[{"path":[]},{"path":"https://danevass.github.io/bartools/articles/bartools_quickstart.html","id":"install-and-load-the-bartools-package","dir":"Articles","previous_headings":"Bartools Quickstart Guide","what":"0. Install and load the bartools package","title":"bartools: quickstart guide","text":"can install bartools GitHub:","code":"# first install Bioconductor dependencies if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\") BiocManager::install(c(\"edgeR\", \"limma\", \"ComplexHeatmap\"))  # then install bartools via GitHub if (!requireNamespace(\"devtools\", quietly = TRUE)) {   install.packages(\"devtools\") } devtools::install_github(\"DaneVass/bartools\", dependencies = TRUE, force = TRUE) library(bartools) ## Loading required package: edgeR ## Loading required package: limma ## Loading required package: ggplot2 knitr::opts_chunk$set(dev=\"png\")"},{"path":"https://danevass.github.io/bartools/articles/bartools_quickstart.html","id":"importing-dna-barcode-count-data","dir":"Articles","previous_headings":"Bartools Quickstart Guide","what":"1. Importing DNA barcode count data","title":"bartools: quickstart guide","text":"Raw barcode count data can thought similarly raw integer-based count data count based experiments RNA-sequencing. data types edgeR package provides efficient DGEList object structure store sample counts associated metadata. bartools makes use object structure store process DNA barcode counts.","code":""},{"path":"https://danevass.github.io/bartools/articles/bartools_quickstart.html","id":"an-example-barcoding-experiment","dir":"Articles","previous_headings":"Bartools Quickstart Guide > 1. Importing DNA barcode count data","what":"An example barcoding experiment","title":"bartools: quickstart guide","text":"section make use hypothetical DNA barcoding dataset based recent unpublished data Dawson lab investigating response acute myeloid leukaemia (AML) cells novel class MYST acetyltransferase inhibitor described recently MacPherson et al. Nature 2019. AML cells cultured vitro, barcoded using lentiviral based barcoding library called SPLINTR, transplanted three groups C57BL/6J mice daily dosing MYST inhibitor low high dose corresponding vehicle control. Barcode containing cells harvested bone marrow diseased mice sequenced technical replicate. follow along vignette raw counts tables sample metadata included bartools package.","code":"data(test.dge)"},{"path":"https://danevass.github.io/bartools/articles/bartools_quickstart.html","id":"generating-a-dgelist-object-from-sample-counts-and-metadata","dir":"Articles","previous_headings":"Bartools Quickstart Guide > 1. Importing DNA barcode count data","what":"Generating a DGEList object from sample counts and metadata","title":"bartools: quickstart guide","text":"Counts objects defined can specified sample metadata sheet shown . easiest way generate DGEList object containing count information metadata interest set barcode sequencing samples. example process shown . read sample sheet excel format: Whatever format sample sheet , make sure rownames unique sample names. Load counts specified samplesheet DGEList object. function expects file locations specified either character vector filenames, column named files samplesheet. results creation DGEList object containing counts metadata information sample.","code":"samplesheet <- read.csv(   system.file(     \"extdata\",     \"test_sampletable.csv\",     package = \"bartools\",     mustWork = T   ),   header = T,   stringsAsFactors = F ) samplesheet samplesheet <-   readxl::read_excel(     \"samplesheet.xlsx\"   ) samplesheet <- as.data.frame(samplesheet) rownames(samplesheet) <- samplesheet$sample samplesheet dge <- edgeR::readDGE(   files = samplesheet,   group = samplesheet$treatment,   labels = samplesheet$sample,   header = F ) # Load the test dataset  data(test.dge) test.dge ## An object of class \"DGEList\" ## $samples ##       Sample Experiment        Group PCR_Replicate Treatment        group ## T0-1    T0-1    test_01           T0             1        T0           T0 ## T0-2    T0-2    test_01           T0             2        T0           T0 ## S10-1  S10-1    test_01 10_High_dose             1 High_dose 10_High_dose ## S10-2  S10-2    test_01 10_High_dose             2 High_dose 10_High_dose ## S11-1  S11-1    test_01   11_Vehicle             1   Vehicle   11_Vehicle ##       lib.size norm.factors ## T0-1   3584606            1 ## T0-2   3349340            1 ## S10-1  4114186            1 ## S10-2  4196458            1 ## S11-1  2907500            1 ## 33 more rows ... ##  ## $counts ##         Samples ## Tags     T0-1 T0-2 S10-1 S10-2 S11-1 S11-2 S12-1 S12-2 S13-1 S13-2 S14-1 S14-2 ##   BC_1    175   79     0     0     0     0     0     0     0     0     0     0 ##   BC_13  1458  834     0     0     0     0     0     0     0     0     0     0 ##   BC_99  1155 1554     0     0     0     0     0     0     0     0     0     0 ##   BC_120  285  184     0     0     0     0     0     0     0     0     0     0 ##   BC_351    0    0     0     0     0     0     0     0     0     0     0     0 ##         Samples ## Tags     S15-1 S15-2 S16-1 S16-2 S17-1 S17-2 S18-1 S18-2 S1-1 S1-2 S2-1 S2-2 ##   BC_1       0     0     0     0     0     0     0     0    0    0    0    0 ##   BC_13      0     0     0     0     0     0     0     0    0    0    0    0 ##   BC_99      0     0     0     0     0     0     0     0  105  205    0    0 ##   BC_120     0     0     0     0     0     0     0     0    0    0    0    0 ##   BC_351     0     0     0     0     0     0     0     0    0    0    0    0 ##         Samples ## Tags     S3-1 S3-2 S4-1 S4-2 S5-1 S5-2 S6-1 S6-2 S7-1 S7-2 S8-1 S8-2 S9-1 S9-2 ##   BC_1      0    0    0    0    0    0    0    0    0    0    0    0    0    0 ##   BC_13     0    0    0    0    0    0    0    0    0    0    0    0    0    0 ##   BC_99     0    0    0    0    0    0    0    0    0    0    0    0    0    0 ##   BC_120    0    0    0    0    0    0    0    0    0    0    0    0    0    0 ##   BC_351    0    0    0    0    0    0    0    0    0    0    0    0    0    0 ## 1634 more rows ..."},{"path":[]},{"path":"https://danevass.github.io/bartools/articles/bartools_quickstart.html","id":"data-qc","dir":"Articles","previous_headings":"Bartools Quickstart Guide > 2. Data QC and Normalisation","what":"Data QC","title":"bartools: quickstart guide","text":"first want ensure working clean data. Using thresholdCounts() function can determine appropriate threshold apply data maximise signal noise retain true informative barcodes. can test different thresholding parameters, absolute thresholds total read counts .    relative thresholds based proportion within sample.    continue absolute threshold 10. normalise samples sequencing depth counts per million using normaliseCounts(). can plot raw normalised sequencing depth get idea depth discrepancies PCR replicates.   lentiviral based cellular barcoding experiments, one, common library exhibit degree skewness based cloning method. means barcodes represented library others greater chance transduced multiple cells. experiments assume individual barcode transduced one cell, cell transduced one barcode. ensured using low multiplicity infection (MOI) transduction likelihood cell transduced one barcode containing virions follows Poisson distribution. mind, also can useful check total counts per barcode identify bias counts sample vs. frequency barcode reference library. barcodes labelled based ranked frequency reference library.     first second plot individual barcodes x-axis ordered based frequency reference library pool. increased number counts per barcode toward left hand side plot suggestive transduction bias, meaning reads average attributed abundant barcodes library. , likely multiple cells transduced barcode. don’t see suggesting problem experiment.","code":"# Remove barcodes (rows) with no data test.dge <- test.dge[rowSums(test.dge$counts) != 0, ] thresholdCounts(   test.dge,   type = \"absolute\",   threshold = 1,   minSamples = 1,   plot = T,   group = \"Treatment\" ) ## DGEList dimensions pre-threshold ## [1] 1490   38 ## DGEList dimensions post-threshold ## [1] 1490   38 thresholdCounts(   test.dge,   type = \"absolute\",   threshold = 10,   minSamples = 1,   plot = T,   group = \"Treatment\" ) ## DGEList dimensions pre-threshold ## [1] 1490   38 ## DGEList dimensions post-threshold ## [1] 1462   38 thresholdCounts(   test.dge,   type = \"absolute\",   threshold = 10,   minSamples = 3,   plot = T,   group = \"Treatment\" ) ## DGEList dimensions pre-threshold ## [1] 1490   38 ## DGEList dimensions post-threshold ## [1] 387  38 thresholdCounts(   test.dge,   type = \"relative\",   threshold = 1e-10,   minSamples = 1,   plot = T,   group = \"Treatment\" ) ## DGEList dimensions pre-threshold ## [1] 1490   38 ## DGEList dimensions post-threshold ## [1] 1490   38 thresholdCounts(   test.dge,   type = \"relative\",   threshold = 1e-5,   minSamples = 1,   plot = T,   group = \"Treatment\" ) ## DGEList dimensions pre-threshold ## [1] 1490   38 ## DGEList dimensions post-threshold ## [1] 1381   38 thresholdCounts(   test.dge,   type = \"relative\",   threshold = 1e-5,   minSamples = 3,   plot = T,   group = \"Treatment\" ) ## DGEList dimensions pre-threshold ## [1] 1490   38 ## DGEList dimensions post-threshold ## [1] 322  38 dge.filtered <-   thresholdCounts(     test.dge,     type = \"absolute\",     threshold = 10,     minSamples = 2,     plot = F   ) ## DGEList dimensions pre-threshold ## [1] 1490   38 ## DGEList dimensions post-threshold ## [1] 1316   38 dge.cpmnorm <- normaliseCounts(dge.filtered, method = \"CPM\") # raw counts per sample plotReadCounts(dge.filtered, group = \"Treatment\") # normalised counts per sample plotReadCounts(dge.cpmnorm, group = \"Treatment\") # plot detected barcodes ordered by frequency in reference library plotBarcodeCounts(dge.cpmnorm, log10 = F) # plot log10 barcode counts plotBarcodeCounts(dge.cpmnorm, log10 = T) # order barcodes by count across samples plotBarcodeCounts(dge.cpmnorm, log10 = F, order = T) # order barcodes by count across samples with log norm plotBarcodeCounts(dge.cpmnorm, log10 = T, order = T)"},{"path":"https://danevass.github.io/bartools/articles/bartools_quickstart.html","id":"check-correlation-between-pcr-replicates","dir":"Articles","previous_headings":"Bartools Quickstart Guide > 2. Data QC and Normalisation","what":"Check correlation between PCR replicates","title":"bartools: quickstart guide","text":"also important ensure individual samples sequenced appropriate depth ensures entire barcode repertoire present sample captured data. Sequencing technical duplicates sample generated library PCR stage good way ensure . experiment 9 samples total, two PCR technical replicates. , correlate barcode distributions pair technical replicates. NB: works paired replicates, .e. 2.  fit linear model technical replicates per sample plot regression line. Note expect high correlation PCR replicates barcode pool. can also easily get correlation values replicates using calcReplicateCorr. Samples can filtered high low correlation using threshold return variables. Finally sample replicates can correlated globally using plotBarcodeCorrelation.","code":"# get all unique samples # column \"group\" contains information on replicates here unique_samples <- unique(dge.filtered$samples$group)  # only plot subset of samples.  lapply(unique_samples[1], function(x) {   # subset dge object to get replicates of sample   replicate_names <- colnames(dge.filtered)[dge.filtered$samples$group %in% as.character(x)]   plotBarcodeRegression(     dge.filtered,     sample1 = replicate_names[1],     sample2 = replicate_names[2],     rug = T,     trans = \"log1p\"   ) }) ## [[1]] corrs <- calcReplicateCorr(dge.filtered, group = \"Group\") corrs[which(corrs < 0.999)] ##  11_Vehicle 2_High_dose   4_Vehicle          T0  ##   0.9988324   0.9975019   0.9975590   0.9983700 corrs ##  1_High_dose 10_High_dose   11_Vehicle   12_Vehicle  13_Low_dose  14_Low_dose  ##    0.9990488    0.9998575    0.9988324    0.9992809    0.9999569    0.9999779  ##  15_Low_dose  16_Low_dose 17_High_dose   18_Vehicle  2_High_dose  3_High_dose  ##    0.9998939    0.9998964    0.9998268    0.9995622    0.9975019    0.9997354  ##    4_Vehicle   5_Low_dose  6_High_dose    7_Vehicle    8_Vehicle   9_Low_dose  ##    0.9975590    0.9999389    0.9994985    0.9997087    0.9992878    0.9997056  ##           T0  ##    0.9983700 # Pearson correlation, full plotBarcodeCorrelation(dge.filtered, clustered = T, upper = F, method = \"pearson\") plot ## function (x, y, ...)  ## UseMethod(\"plot\") ## <bytecode: 0x107352c40> ## <environment: namespace:base> # Pearson correlation, upper plotBarcodeCorrelation(dge.filtered, clustered = T, upper = T, method = \"pearson\") # Spearman correlation plotBarcodeCorrelation(dge.filtered, clustered = T, upper = T, method = \"spearman\")"},{"path":"https://danevass.github.io/bartools/articles/bartools_quickstart.html","id":"collapse-pcr-replicates-in-object","dir":"Articles","previous_headings":"Bartools Quickstart Guide > 2. Data QC and Normalisation","what":"Collapse PCR replicates in object","title":"bartools: quickstart guide","text":"Now know samples good quality use PCR replicate information. point onward good idea collapse PCR replicates. collapseReplicates can take average (default behavior) sum PCR technical replicates within sample. take average. Users may want sum PCR replicates evidence sampling bias across technical repeats (.e. poor correlation score evidence). result clean barcode sequencing dataset ready investigation visualisation. repeat correlation plots can see general similarities across samples","code":"dim(dge.filtered) ## [1] 1316   38 dge.filtered.collapsed <- collapseReplicates(   dge.filtered,   group = \"group\",   method = \"mean\" ) head(dge.filtered.collapsed) ## An object of class \"DGEList\" ## $samples ##              Sample Experiment        Group PCR_Replicate Treatment ## 1_High_dose    S1-1    test_01  1_High_dose             1 High_dose ## 10_High_dose  S10-1    test_01 10_High_dose             1 High_dose ## 11_Vehicle    S11-1    test_01   11_Vehicle             1   Vehicle ## 12_Vehicle    S12-1    test_01   12_Vehicle             1   Vehicle ## 13_Low_dose   S13-1    test_01  13_Low_dose             1  Low_dose ##                     group lib.size norm.factors Sample BC.count ## 1_High_dose   1_High_dose  3447629            1   S1-1       66 ## 10_High_dose 10_High_dose  4114186            1  S10-1       78 ## 11_Vehicle     11_Vehicle  2907500            1  S11-1       88 ## 12_Vehicle     12_Vehicle  4202337            1  S12-1       70 ## 13_Low_dose   13_Low_dose  4513559            1  S13-1       93 ## 14 more rows ... ##  ## $counts ##         Samples ## Tags     1_High_dose 10_High_dose 11_Vehicle 12_Vehicle 13_Low_dose 14_Low_dose ##   BC_1             0            0          0          0           0           0 ##   BC_13            0            0          0          0           0           0 ##   BC_99          155            0          0          0           0           0 ##   BC_120           0            0          0          0           0           0 ##   BC_426           0            0          0          0           0           0 ##   BC_430           0            0          0          0           0           0 ##         Samples ## Tags     15_Low_dose 16_Low_dose 17_High_dose 18_Vehicle 2_High_dose ##   BC_1             0           0          0.0        0.0           0 ##   BC_13            0           0          0.0        0.0           0 ##   BC_99            0           0          0.0        0.0           0 ##   BC_120           0           0          0.0        0.0           0 ##   BC_426           0           0          0.0        0.0           0 ##   BC_430           0           0          0.5      413.5           0 ##         Samples ## Tags     3_High_dose 4_Vehicle 5_Low_dose 6_High_dose 7_Vehicle 8_Vehicle ##   BC_1             0       0.0          0           0       0.0         0 ##   BC_13            0       0.0          0           0       0.0         0 ##   BC_99            0       0.0          0           0       0.0         0 ##   BC_120           0       0.0          0           0       0.0         0 ##   BC_426           0       0.0          0           0       0.0         0 ##   BC_430           0      13.5          0           0       0.5         0 ##         Samples ## Tags     9_Low_dose     T0 ##   BC_1            0  127.0 ##   BC_13           0 1146.0 ##   BC_99           0 1354.5 ##   BC_120          0  234.5 ##   BC_426          0   81.0 ##   BC_430          0 1022.0 # Pearson correlation, full plotBarcodeCorrelation(dge.filtered.collapsed, clustered = T, upper = F, method = \"pearson\")"},{"path":"https://danevass.github.io/bartools/articles/bartools_quickstart.html","id":"visualisation","dir":"Articles","previous_headings":"Bartools Quickstart Guide","what":"3. Visualisation","title":"bartools: quickstart guide","text":"bartools includes range visualisation options examining barcode-seq datasets.","code":""},{"path":"https://danevass.github.io/bartools/articles/bartools_quickstart.html","id":"bubble-plot","dir":"Articles","previous_headings":"Bartools Quickstart Guide > 3. Visualisation","what":"Bubble plot","title":"bartools: quickstart guide","text":"Sometimes visual depiction data suitable. , barcodes/tags represented bubbles aligned single plane. size bubbles reflects percentage abundance barcode within sample.  Using orderSample parameter, bubbleplots can also arranged according frequency particular sample can help visual comparison large vs small clones across samples conditions.  Barcodes fail meet defined abundance threshold sample can greyed .  filtered plot entirely using filterCutoff parameters","code":"plotBarcodeBubble(dge.filtered.collapsed,                    proportionCutoff = 10,                    labelBarcodes = T) ## Warning: Vectorized input to `element_text()` is not officially supported. ## ℹ Results may be unexpected or may change in future versions of ggplot2. plotOrderedBubble(dge.filtered.collapsed,                    proportionCutoff = 10,                    labelBarcodes = T,                    orderSample = \"T0\",                    colorDominant = F,                    filterCutoff = 0.001,                   group = \"Treatment\") ## Warning: Vectorized input to `element_text()` is not officially supported. ## ℹ Results may be unexpected or may change in future versions of ggplot2. plotOrderedBubble(dge.filtered.collapsed,                    proportionCutoff = 10,                    labelBarcodes = T,                    orderSample = \"T0\",                    colorDominant = T,                    filterCutoff = 0.001,                    group = \"Treatment\") ## Warning: Vectorized input to `element_text()` is not officially supported. ## ℹ Results may be unexpected or may change in future versions of ggplot2. plotOrderedBubble(dge.filtered.collapsed,                    proportionCutoff = 10,                    labelBarcodes = T,                    orderSample = \"T0\",                    colorDominant = T,                    filterCutoff = 0.1,                   group = \"Treatment\") ## Warning: Vectorized input to `element_text()` is not officially supported. ## ℹ Results may be unexpected or may change in future versions of ggplot2."},{"path":"https://danevass.github.io/bartools/articles/bartools_quickstart.html","id":"barcode-plot","dir":"Articles","previous_headings":"Bartools Quickstart Guide > 3. Visualisation","what":"Barcode Plot","title":"bartools: quickstart guide","text":"Alternatively, can focus abundant barcodes within set samples easily observe change frequency course experiment.","code":"plotBarcodeHistogram(dge.filtered.collapsed, topN = 10, alphaLowFreq = 0) ## Warning: The `guide` argument in `scale_*()` cannot be `FALSE`. This was deprecated in ## ggplot2 3.3.4. ## ℹ Please use \"none\" instead. ## ℹ The deprecated feature was likely used in the bartools package. ##   Please report the issue to the authors. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated."},{"path":"https://danevass.github.io/bartools/articles/bartools_quickstart.html","id":"timeseries-plots","dir":"Articles","previous_headings":"Bartools Quickstart Guide > 3. Visualisation","what":"Timeseries Plots","title":"bartools: quickstart guide","text":"timecourse experiments useful visualise kinetics barcode diversity changes time. instance can use plotBarcodeTimeseries get idea relative abundance top n barcodes sample relative others.","code":"plotBarcodeTimeseries(dge.filtered.collapsed,                        top = 50,                        seed = 10101) ## Using barcode as id variables"},{"path":"https://danevass.github.io/bartools/articles/bartools_quickstart.html","id":"principal-components-analysis","dir":"Articles","previous_headings":"Bartools Quickstart Guide > 3. Visualisation","what":"Principal Components Analysis","title":"bartools: quickstart guide","text":"global level PCA analysis good way get high level understanding similarities differences samples.","code":"plotBarcodePCA(dge.filtered.collapsed,                 groups = \"Treatment\",                 ntop = 1000,                pcs=c(1, 2))"},{"path":"https://danevass.github.io/bartools/articles/bartools_quickstart.html","id":"heatmaps","dir":"Articles","previous_headings":"Bartools Quickstart Guide > 3. Visualisation","what":"Heatmaps","title":"bartools: quickstart guide","text":"Another method comparing abundance across samples using heatmap. barcodes ranked among top n abundant within sample indicated asterisk. heatmap shows high dose samples generally distinct low dose vehicle group.","code":"plotBarcodeHeatmap(   normaliseCounts(dge.filtered.collapsed, method = \"CPM\"),    topN = 5,   showBarcodes = F,   group = \"Treatment\" )"},{"path":"https://danevass.github.io/bartools/articles/bartools_quickstart.html","id":"analysing-composition-and-diversity","dir":"Articles","previous_headings":"Bartools Quickstart Guide","what":"4. Analysing Composition and Diversity","title":"bartools: quickstart guide","text":"important able visualise data also understand relationships barcodes/tags data level.","code":""},{"path":"https://danevass.github.io/bartools/articles/bartools_quickstart.html","id":"identify-compositional-bias-within-samples","dir":"Articles","previous_headings":"Bartools Quickstart Guide > 4. Analysing Composition and Diversity","what":"Identify compositional bias within samples","title":"bartools: quickstart guide","text":"plots give global visualisation abundance barcode within sample however compositional makeup can obscured visualising data way. can helpful examine fraction barcodes comprise sample. plots calculate cumulative sum sample relation samples defined user.","code":"samples <-   which(dge.filtered.collapsed$samples$Treatment == \"Vehicle\")  plotBarcodeCumSum(   dge.filtered.collapsed,   referenceSample = \"T0\",   samples = colnames(dge.filtered.collapsed$counts)[samples] )"},{"path":"https://danevass.github.io/bartools/articles/bartools_quickstart.html","id":"identifying-abundant-barcodes-within-samples","dir":"Articles","previous_headings":"Bartools Quickstart Guide > 4. Analysing Composition and Diversity","what":"Identifying abundant barcodes within samples","title":"bartools: quickstart guide","text":"important able determine barcodes abundant within sample. bartools allows easily calculated according abundance threshold. can use specific plots visualise dominance specific barcodes within across samples.","code":"top.bc <- getDominantBarcodes(dge.filtered.collapsed, threshold = 0.05) top.bc[1:5] ## $`1_High_dose` ## [1] \"BC_79755\"  \"BC_102160\" \"BC_59493\"  \"BC_23361\"  \"BC_53234\"  \"BC_400391\" ##  ## $`10_High_dose` ## [1] \"BC_8419\"   \"BC_124796\" ##  ## $`11_Vehicle` ## [1] \"BC_53234\"  \"BC_205581\" \"BC_90135\"  \"BC_172626\" \"BC_58978\"  ##  ## $`12_Vehicle` ## [1] \"BC_389078\" \"BC_159570\" \"BC_135438\" \"BC_500780\" \"BC_79755\"  ##  ## $`13_Low_dose` ## [1] \"BC_8419\"   \"BC_124796\" \"BC_102160\" \"BC_257382\" # plot top barcodes across samples for mouse 10 (High Dose group) plotBarcodeBoxplot(   dge.filtered.collapsed,   barcodes = top.bc$`10_High_dose`,   group = \"Treatment\",   conditions = c(\"Low_dose\", \"High_dose\", \"Vehicle\"),   point = T )"},{"path":"https://danevass.github.io/bartools/articles/bartools_quickstart.html","id":"calculating-and-plotting-percentile-abundance-","dir":"Articles","previous_headings":"Bartools Quickstart Guide > 4. Analysing Composition and Diversity","what":"Calculating and plotting percentile abundance.","title":"bartools: quickstart guide","text":"graphs demonstrate relatively barcodes can sometimes comprise majority sample’s clonality, particularly following selective event drug treatment. useful formally analyse based desired percentile threshold. common threshold 95th percentile. can eliminate small barcodes comprise tail dataset give sense many clones truly comprise sample can compare number detected barcodes top 95th percentile per sample total sample.    plots show clones comprise majority dataset per mouse. Also, generally fewer clones present high dose group compared vehicle low dose groups.","code":"top_barcodes <- calcPercentileBarcodes(dge.filtered.collapsed, percentile = 0.95) top_barcodes$NumBarcodes ##          Sample NumBarcodes ## 1   1_High_dose          15 ## 2  10_High_dose           3 ## 3    11_Vehicle          19 ## 4    12_Vehicle          14 ## 5   13_Low_dose          11 ## 6   14_Low_dose           6 ## 7   15_Low_dose           7 ## 8   16_Low_dose          19 ## 9  17_High_dose           5 ## 10   18_Vehicle          27 ## 11  2_High_dose          12 ## 12  3_High_dose          10 ## 13    4_Vehicle          26 ## 14   5_Low_dose          11 ## 15  6_High_dose           9 ## 16    7_Vehicle          16 ## 17    8_Vehicle          21 ## 18   9_Low_dose          19 ## 19           T0         591 top_barcodes$TopBarcodeCounts$`6_High_dose` ##           6_High_dose ## BC_79755    1313507.0 ## BC_8419     1120457.5 ## BC_124796   1013931.0 ## BC_4564      461928.0 ## BC_400391     93601.5 ## BC_31610      43251.5 ## BC_1478       33933.5 ## BC_90135      32480.0 ## BC_388103     29467.0 top_barcodes$TopBarcodes$`6_High_dose` ## [1] \"BC_79755\"  \"BC_8419\"   \"BC_124796\" \"BC_4564\"   \"BC_400391\" \"BC_31610\"  ## [7] \"BC_1478\"   \"BC_90135\"  \"BC_388103\" plotDetectedBarcodes(   dge.filtered.collapsed,   percentile = 1,   plot = T,   group = \"Treatment\",  ) plotDetectedBarcodes(   dge.filtered.collapsed,   percentile = 0.95,   plot = T,   group = \"Treatment\" ) plotDetectedBarcodes(   dge.filtered.collapsed,   percentile = 0.80,   plot = T,   group = \"Treatment\" )"},{"path":"https://danevass.github.io/bartools/articles/bartools_quickstart.html","id":"diversity-analysis","dir":"Articles","previous_headings":"Bartools Quickstart Guide > 4. Analysing Composition and Diversity","what":"Diversity analysis","title":"bartools: quickstart guide","text":"can examine within-sample diversity different ways. common Shannon, Simpson, Inverse Simpson Gini. applicable different circumstances, however Shannon diversity index widely used compare global diversity amongst populations barcoded cells. calcDivIndexes can used determine various diversity indices per sample diversity calculations can fed plotDivIndexes visualisation either bar dotplot","code":"diversity <- calcDivIndexes(dge.filtered.collapsed, group = \"Treatment\") ## Warning in xtfrm.data.frame(x): cannot xtfrm data frames diversity ##            name  shannon   simpson invsimpson      gini group ## 1   1_High_dose 2.348653 0.8444024   6.426835 0.9937718  <NA> ## 2  10_High_dose 1.225855 0.6032568   2.520522 0.9976422  <NA> ## 3    11_Vehicle 2.652009 0.8814286   8.433734 0.9914712  <NA> ## 4    12_Vehicle 2.414063 0.8399960   6.249843 0.9930451  <NA> ## 5   13_Low_dose 2.018988 0.8131654   5.352328 0.9952918  <NA> ## 6   14_Low_dose 1.519950 0.6814210   3.138939 0.9972041  <NA> ## 7   15_Low_dose 1.832241 0.7746745   4.438025 0.9961403  <NA> ## 8   16_Low_dose 2.778868 0.9048407  10.508698 0.9907836  <NA> ## 9  17_High_dose 1.534553 0.6789918   3.115185 0.9971341  <NA> ## 10   18_Vehicle 3.153789 0.9327042  14.859766 0.9864058  <NA> ## 11  2_High_dose 2.256249 0.8510421   6.713305 0.9943143  <NA> ## 12  3_High_dose 1.798299 0.6916723   3.243303 0.9959564  <NA> ## 13    4_Vehicle 3.122474 0.9318075  14.664379 0.9868916  <NA> ## 14   5_Low_dose 1.705062 0.6350995   2.740473 0.9959301  <NA> ## 15  6_High_dose 1.855066 0.7799154   4.543707 0.9958108  <NA> ## 16    7_Vehicle 2.605180 0.8891069   9.017692 0.9922683  <NA> ## 17    8_Vehicle 2.599855 0.8583819   7.061244 0.9915058  <NA> ## 18   9_Low_dose 2.747625 0.8980389   9.807663 0.9909330  <NA> ## 19           T0 5.496669 0.9850733  66.994135 0.7979588  <NA> # bar plot plotDivIndexes(   dge.filtered.collapsed,   div = diversity,   metric = \"shannon\",   group = \"Treatment\" ) # dot plot plotDivIndexes(   dge.filtered.collapsed,   div = diversity,   metric = \"shannon\",   group = \"Treatment\",   type = \"point\" ) # summarized by condition as box plot plotDivIndexes(   dge.filtered.collapsed,   div = diversity,   metric = \"shannon\",   group = \"Treatment\",   type = \"box\" )"},{"path":"https://danevass.github.io/bartools/articles/bartools_quickstart.html","id":"comparing-abundance","dir":"Articles","previous_headings":"Bartools Quickstart Guide > 4. Analysing Composition and Diversity","what":"Comparing abundance","title":"bartools: quickstart guide","text":"can also statistically test barcodes / tags / underrepresented group samples relative another using internal edgeR framework. bartools contains convenience wrapper functionality","code":"compareAbundance(dge.filtered.collapsed,                  group = \"Treatment\",                   condition1 = \"Low_dose\",                  condition2 = \"High_dose\",                  pval = 1e-04,                  logFC = 10)"},{"path":"https://danevass.github.io/bartools/articles/bartools_quickstart.html","id":"session-info","dir":"Articles","previous_headings":"Bartools Quickstart Guide","what":"5. Session Info","title":"bartools: quickstart guide","text":"","code":"sessionInfo() ## R version 4.2.2 (2022-10-31) ## Platform: aarch64-apple-darwin20 (64-bit) ## Running under: macOS 14.1.1 ##  ## Matrix products: default ## BLAS:   /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRblas.0.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRlapack.dylib ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] bartools_1.0.0 ggplot2_3.4.4  edgeR_3.40.2   limma_3.54.2   ##  ## loaded via a namespace (and not attached): ##  [1] nlme_3.1-163          matrixStats_1.0.0     fs_1.6.3              ##  [4] doParallel_1.0.17     RColorBrewer_1.1-3    rprojroot_2.0.4       ##  [7] ggsci_3.0.0           tools_4.2.2           backports_1.4.1       ## [10] bslib_0.6.0           utf8_1.2.4            R6_2.5.1              ## [13] vegan_2.6-4           BiocGenerics_0.44.0   mgcv_1.9-0            ## [16] colorspace_2.1-0      permute_0.9-7         GetoptLong_1.0.5      ## [19] withr_2.5.2           tidyselect_1.2.0      compiler_4.2.2        ## [22] textshaping_0.3.6     cli_3.6.1             Cairo_1.6-1           ## [25] desc_1.4.2            labeling_0.4.3        sass_0.4.7            ## [28] scales_1.2.1          pkgdown_2.0.7         systemfonts_1.0.5     ## [31] stringr_1.5.1         digest_0.6.33         rmarkdown_2.25        ## [34] pkgconfig_2.0.3       htmltools_0.5.7       fastmap_1.1.1         ## [37] highr_0.10            rlang_1.1.2           GlobalOptions_0.1.2   ## [40] rstudioapi_0.15.0     shape_1.4.6           jquerylib_0.1.4       ## [43] farver_2.1.1          generics_0.1.3        jsonlite_1.8.7        ## [46] dplyr_1.1.4           car_3.1-2             magrittr_2.0.3        ## [49] Matrix_1.6-1.1        S4Vectors_0.36.2      Rcpp_1.0.11           ## [52] munsell_0.5.0         fansi_1.0.5           abind_1.4-5           ## [55] lifecycle_1.0.4       stringi_1.8.1         yaml_2.3.7            ## [58] carData_3.0-5         MASS_7.3-60           plyr_1.8.9            ## [61] grid_4.2.2            parallel_4.2.2        forcats_1.0.0         ## [64] crayon_1.5.2          lattice_0.21-9        splines_4.2.2         ## [67] circlize_0.4.15       magick_2.8.0          locfit_1.5-9.8        ## [70] knitr_1.45            ComplexHeatmap_2.14.0 pillar_1.9.0          ## [73] ggpubr_0.6.0          rjson_0.2.21          ggsignif_0.6.4        ## [76] stats4_4.2.2          reshape2_1.4.4        codetools_0.2-19      ## [79] glue_1.6.2            evaluate_0.23         vctrs_0.6.4           ## [82] png_0.1-8             foreach_1.5.2         gtable_0.3.4          ## [85] purrr_1.0.2           tidyr_1.3.0           clue_0.3-65           ## [88] cachem_1.0.8          xfun_0.41             broom_1.0.5           ## [91] rstatix_0.7.2         ragg_1.2.5            viridisLite_0.4.2     ## [94] tibble_3.2.1          iterators_1.0.14      IRanges_2.32.0        ## [97] ineq_0.2-13           memoise_2.0.1         cluster_2.1.4"},{"path":"https://danevass.github.io/bartools/articles/bartools_single_cell_analysis.html","id":"bartools-single-cell-guide","dir":"Articles","previous_headings":"","what":"Bartools single-cell guide","title":"bartools: scRNA-seq analysis guide","text":"bartools package contains methods simplify clone level analyses single-cell cellular barcoding datasets. purpose vignette highlight capabilities bartools.","code":""},{"path":"https://danevass.github.io/bartools/articles/bartools_single_cell_analysis.html","id":"setup","dir":"Articles","previous_headings":"Bartools single-cell guide","what":"0. Setup","title":"bartools: scRNA-seq analysis guide","text":"vignette makes use simple test single cell experiment object (SCE) included bartools package. dataset contains 100 cells 100 randomly sampled genes. cell lineage barcode information annotated test.sce$barcode field. Dimensionality reduction clustering previously performed using Seurat. Cluster assignments test.sce$seurat_clusters field.","code":""},{"path":"https://danevass.github.io/bartools/articles/bartools_single_cell_analysis.html","id":"load-the-bartools-package","dir":"Articles","previous_headings":"Bartools single-cell guide > 0. Setup","what":"Load the bartools package","title":"bartools: scRNA-seq analysis guide","text":"","code":"library(bartools) ## Loading required package: edgeR ## Loading required package: limma ## Loading required package: ggplot2 knitr::opts_chunk$set(dev=\"png\")"},{"path":"https://danevass.github.io/bartools/articles/bartools_single_cell_analysis.html","id":"load-the-test-sce-dataset","dir":"Articles","previous_headings":"Bartools single-cell guide > 0. Setup","what":"Load the test.sce dataset","title":"bartools: scRNA-seq analysis guide","text":"","code":"data(test.sce) test.sce ## Loading required package: SingleCellExperiment ## Loading required package: SummarizedExperiment ## Loading required package: MatrixGenerics ## Loading required package: matrixStats ##  ## Attaching package: 'MatrixGenerics' ## The following objects are masked from 'package:matrixStats': ##  ##     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, ##     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, ##     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, ##     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, ##     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, ##     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, ##     colWeightedMeans, colWeightedMedians, colWeightedSds, ##     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, ##     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, ##     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, ##     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, ##     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, ##     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, ##     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, ##     rowWeightedSds, rowWeightedVars ## Loading required package: GenomicRanges ## Loading required package: stats4 ## Loading required package: BiocGenerics ##  ## Attaching package: 'BiocGenerics' ## The following object is masked from 'package:limma': ##  ##     plotMA ## The following objects are masked from 'package:stats': ##  ##     IQR, mad, sd, var, xtabs ## The following objects are masked from 'package:base': ##  ##     anyDuplicated, aperm, append, as.data.frame, basename, cbind, ##     colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, ##     get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply, ##     match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, ##     Position, rank, rbind, Reduce, rownames, sapply, setdiff, sort, ##     table, tapply, union, unique, unsplit, which.max, which.min ## Loading required package: S4Vectors ##  ## Attaching package: 'S4Vectors' ## The following objects are masked from 'package:base': ##  ##     expand.grid, I, unname ## Loading required package: IRanges ## Loading required package: GenomeInfoDb ## Loading required package: Biobase ## Welcome to Bioconductor ##  ##     Vignettes contain introductory material; view with ##     'browseVignettes()'. To cite Bioconductor, see ##     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. ##  ## Attaching package: 'Biobase' ## The following object is masked from 'package:MatrixGenerics': ##  ##     rowMedians ## The following objects are masked from 'package:matrixStats': ##  ##     anyMissing, rowMedians ##  ## Attaching package: 'SingleCellExperiment' ## The following object is masked from 'package:edgeR': ##  ##     cpm ## class: SingleCellExperiment  ## dim: 100 100  ## metadata(0): ## assays(3): counts logcounts scaledata ## rownames(100): Mrpl15 Lypla1 ... Tmem131 Cnga3 ## rowData names(0): ## colnames(100): GCTACCTAGAGGCCAT ACTGCAAGTGATTCAC ... CGAGTTACAGCGACAA ##   TTTATGCGTACAGTTC ## colData names(27): orig.ident nCount_RNA ... seurat_clusters ident ## reducedDimNames(3): PCA TSNE UMAP ## mainExpName: RNA ## altExpNames(1): HTO"},{"path":"https://danevass.github.io/bartools/articles/bartools_single_cell_analysis.html","id":"analyse-dataset-metrics-using-plotmetrics","dir":"Articles","previous_headings":"Bartools single-cell guide","what":"1. Analyse dataset metrics using plotMetrics","title":"bartools: scRNA-seq analysis guide","text":"Single cell RNA sequencing datasets can reveal transcriptional differences groups cells / celltypes biological importance. plotMetrics function takes single cell object Seurat SingleCellExperiment format plots desired continuous variable (e.g. number transcripts genes detected per cell) split across groups interest. groups clusters, celltypes , lineage barcode information, individual clones. Thus, plotMetrics allows us go one step examine biological differences individual groups cells. , group parameter defines grouping variable, present column metadata single cell object. factor parameter defines continuous variable plot per level group parameter. threshold parameter defines minimum number cells required level group parameter.","code":""},{"path":"https://danevass.github.io/bartools/articles/bartools_single_cell_analysis.html","id":"plotmetrics---clusters","dir":"Articles","previous_headings":"Bartools single-cell guide > 1. Analyse dataset metrics using plotMetrics","what":"plotMetrics - clusters","title":"bartools: scRNA-seq analysis guide","text":"Using trans parameter, x axis plotMetrics can transformed using standard methods available within R","code":"plotMetrics(test.sce, group = \"seurat_clusters\", factor = \"nCount_RNA\", threshold = 10) plotMetrics(test.sce, group = \"seurat_clusters\", factor = \"nCount_RNA\", threshold = 10, trans = \"log10\")"},{"path":"https://danevass.github.io/bartools/articles/bartools_single_cell_analysis.html","id":"plotmetrics---barcodes","dir":"Articles","previous_headings":"Bartools single-cell guide > 1. Analyse dataset metrics using plotMetrics","what":"plotMetrics - barcodes","title":"bartools: scRNA-seq analysis guide","text":"plotMetrics accepts grouping variable available sample metadata. examine transcriptional differences clones using lineage barcode information. NB: test dataset number cells per clone small.","code":"plotMetrics(test.sce, group = \"barcode\", factor = \"nCount_RNA\", threshold = 2)"},{"path":"https://danevass.github.io/bartools/articles/bartools_single_cell_analysis.html","id":"examine-number-of-cells-per-grouping-variable---plotcellspergroup","dir":"Articles","previous_headings":"Bartools single-cell guide","what":"2. Examine number of cells per grouping variable - plotCellsPerGroup","title":"bartools: scRNA-seq analysis guide","text":"may also interested basic metrics like many cells comprise grouping variable interest cluster, celltype lineage barcode. plotCellsPerGroup function allows easily plotted. Groups user defined threshold highlighted. , group parameter defines grouping variable, present column metadata single cell object. threshold parameter defines minimum number cells. Levels group parameter threshold labelled.","code":""},{"path":"https://danevass.github.io/bartools/articles/bartools_single_cell_analysis.html","id":"plot-cells-per-cluster","dir":"Articles","previous_headings":"Bartools single-cell guide > 2. Examine number of cells per grouping variable - plotCellsPerGroup","what":"plot cells per cluster","title":"bartools: scRNA-seq analysis guide","text":"","code":"plotCellsPerGroup(test.sce, group = \"seurat_clusters\", threshold = 5)"},{"path":"https://danevass.github.io/bartools/articles/bartools_single_cell_analysis.html","id":"plot-cells-per-lineage-barcode","dir":"Articles","previous_headings":"Bartools single-cell guide > 2. Examine number of cells per grouping variable - plotCellsPerGroup","what":"plot cells per lineage barcode","title":"bartools: scRNA-seq analysis guide","text":"","code":"plotCellsPerGroup(test.sce, group = \"barcode\", threshold = 3)"},{"path":"https://danevass.github.io/bartools/articles/bartools_single_cell_analysis.html","id":"plot-distribution-of-cells-across-clusters---plotcellsinclusters","dir":"Articles","previous_headings":"Bartools single-cell guide","what":"3. Plot distribution of cells across clusters - plotCellsInClusters","title":"bartools: scRNA-seq analysis guide","text":"may also interested distribution cells within certain groups across levels another group. example may want reveal proportion cells certain cell cycle phase across louvain clusters within single cell dataset. plotCellsInClusters function allows users examine questions. , group parameter defines grouping variable, present column metadata single cell object. factor parameter defines level group calculate percentage abundance within level idents. idents parameter defines second grouping variable, present column metadata single cell object.","code":""},{"path":"https://danevass.github.io/bartools/articles/bartools_single_cell_analysis.html","id":"cell-cycle-phase-across-clusters","dir":"Articles","previous_headings":"Bartools single-cell guide > 3. Plot distribution of cells across clusters - plotCellsInClusters","what":"Cell cycle phase across clusters","title":"bartools: scRNA-seq analysis guide","text":"plotCellsInClusters framework can extend discrete variables present dataset. examine representation lineage barcode BC_12904 across clusters","code":"plotCellsInClusters(test.sce, group = \"Phase\", factor = \"G1\", clusters = \"seurat_clusters\") ## # A tibble: 7 × 2 ##   seurat_clusters     n ##   <fct>           <int> ## 1 0                  17 ## 2 1                  15 ## 3 2                  15 ## 4 3                   6 ## 5 4                   4 ## 6 5                   3 ## 7 7                   1 ## Warning in ggplot2::geom_histogram(stat = \"identity\"): Ignoring unknown ## parameters: `binwidth`, `bins`, and `pad` plotCellsInClusters(test.sce, group = \"barcode\", factor = \"BC_12904\", clusters = \"seurat_clusters\") ## # A tibble: 3 × 2 ##   seurat_clusters     n ##   <fct>           <int> ## 1 0                   2 ## 2 1                   1 ## 3 7                   1 ## Warning in ggplot2::geom_histogram(stat = \"identity\"): Ignoring unknown ## parameters: `binwidth`, `bins`, and `pad`"},{"path":"https://danevass.github.io/bartools/articles/bartools_single_cell_analysis.html","id":"determine-enrichment-within-clusters---plotclusterenrichment","dir":"Articles","previous_headings":"Bartools single-cell guide","what":"4. Determine enrichment within clusters - plotClusterEnrichment","title":"bartools: scRNA-seq analysis guide","text":"check whether clone enriched cluster cell type, can perform hypergeometric test using plotClusterEnrichment function. test enrichment cells G2M cell cycle phase across louvain clusters. , group parameter defines grouping variable, present column metadata single cell object. factor parameter defines level group parameter test enrichment within level idents. idents parameter defines second grouping variable test enrichment factor level. threshold parameter defines p-value threshold hypergeometric test. ## 5. Session Info","code":"plotClusterEnrichment(   test.sce,   group = \"Phase\",   factor = \"G2M\",   clusters = \"seurat_clusters\",   threshold = 0.01,   order = T,   plot = T ) ## The following ident levels had no observations and were removed: 6 ## --- ## cluster_0 ## all cells: 100 ## all G2M cells: 2 ## universe: 98 ## cluster total cells: 24 ## cluster G2M cells: 0 ## [1] \"Hypergeometric test p-value: 0.424242424242424\" ## --- ## cluster_1 ## all cells: 100 ## all G2M cells: 2 ## universe: 98 ## cluster total cells: 27 ## cluster G2M cells: 0 ## [1] \"Hypergeometric test p-value: 0.469090909090909\" ## --- ## cluster_2 ## all cells: 100 ## all G2M cells: 2 ## universe: 98 ## cluster total cells: 28 ## cluster G2M cells: 1 ## [1] \"Hypergeometric test p-value: 0.0763636363636364\" ## --- ## cluster_3 ## all cells: 100 ## all G2M cells: 2 ## universe: 98 ## cluster total cells: 10 ## cluster G2M cells: 1 ## [1] \"Hypergeometric test p-value: 0.0090909090909091\" ## --- ## cluster_4 ## all cells: 100 ## all G2M cells: 2 ## universe: 98 ## cluster total cells: 5 ## cluster G2M cells: 0 ## [1] \"Hypergeometric test p-value: 0.0979797979797982\" ## --- ## cluster_5 ## all cells: 100 ## all G2M cells: 2 ## universe: 98 ## cluster total cells: 5 ## cluster G2M cells: 0 ## [1] \"Hypergeometric test p-value: 0.0979797979797982\" ## --- ## cluster_7 ## all cells: 100 ## all G2M cells: 2 ## universe: 98 ## cluster total cells: 1 ## cluster G2M cells: 0 ## [1] \"Hypergeometric test p-value: 0.0200000000000001\" sessionInfo() ## R version 4.2.2 (2022-10-31) ## Platform: aarch64-apple-darwin20 (64-bit) ## Running under: macOS 14.1.1 ##  ## Matrix products: default ## BLAS:   /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRblas.0.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRlapack.dylib ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] SingleCellExperiment_1.20.1 SummarizedExperiment_1.28.0 ##  [3] Biobase_2.58.0              GenomicRanges_1.50.2        ##  [5] GenomeInfoDb_1.34.9         IRanges_2.32.0              ##  [7] S4Vectors_0.36.2            BiocGenerics_0.44.0         ##  [9] MatrixGenerics_1.10.0       matrixStats_1.0.0           ## [11] bartools_1.0.0              ggplot2_3.4.4               ## [13] edgeR_3.40.2                limma_3.54.2                ##  ## loaded via a namespace (and not attached): ##  [1] viridis_0.6.4          sass_0.4.7             viridisLite_0.4.2      ##  [4] jsonlite_1.8.7         splines_4.2.2          bslib_0.6.0            ##  [7] highr_0.10             GenomeInfoDbData_1.2.9 ggrepel_0.9.4          ## [10] yaml_2.3.7             pillar_1.9.0           lattice_0.21-9         ## [13] glue_1.6.2             digest_0.6.33          XVector_0.38.0         ## [16] colorspace_2.1-0       htmltools_0.5.7        Matrix_1.6-1.1         ## [19] pkgconfig_2.0.3        zlibbioc_1.44.0        purrr_1.0.2            ## [22] scales_1.2.1           tibble_3.2.1           mgcv_1.9-0             ## [25] farver_2.1.1           generics_0.1.3         cachem_1.0.8           ## [28] withr_2.5.2            cli_3.6.1              magrittr_2.0.3         ## [31] memoise_2.0.1          evaluate_0.23          fs_1.6.3               ## [34] fansi_1.0.5            nlme_3.1-163           MASS_7.3-60            ## [37] vegan_2.6-4            textshaping_0.3.6      tools_4.2.2            ## [40] ineq_0.2-13            lifecycle_1.0.4        stringr_1.5.1          ## [43] munsell_0.5.0          locfit_1.5-9.8         DelayedArray_0.24.0    ## [46] cluster_2.1.4          compiler_4.2.2         pkgdown_2.0.7          ## [49] jquerylib_0.1.4        systemfonts_1.0.5      rlang_1.1.2            ## [52] grid_4.2.2             RCurl_1.98-1.12        rstudioapi_0.15.0      ## [55] labeling_0.4.3         bitops_1.0-7           rmarkdown_2.25         ## [58] gtable_0.3.4           R6_2.5.1               gridExtra_2.3          ## [61] knitr_1.45             dplyr_1.1.4            fastmap_1.1.1          ## [64] utf8_1.2.4             rprojroot_2.0.4        ragg_1.2.5             ## [67] permute_0.9-7          desc_1.4.2             stringi_1.8.1          ## [70] parallel_4.2.2         Rcpp_1.0.11            vctrs_0.6.4            ## [73] tidyselect_1.2.0       xfun_0.41"},{"path":"https://danevass.github.io/bartools/articles/import_qc_single_cell.html","id":"import-and-qc-of-single-cell-barcode-data","dir":"Articles","previous_headings":"","what":"Import and QC of single-cell barcode data","title":"bartools: import and QC single-cell barcode data","text":"vignette shows 1. Import barcode counts table produced BARtab single-cell workflow 2. Creat QC plots filter barcodes 3. Add barcode counts Seurat object 4. Analyze visualize barcoded single-cell RNA-seq data filtering already performed BARtab, using umi_count_filter umi_fraction_filter parameters, skip section 2. QC thresholds need revised, follow section 1.","code":""},{"path":"https://danevass.github.io/bartools/articles/import_qc_single_cell.html","id":"load-the-bartools-package","dir":"Articles","previous_headings":"Import and QC of single-cell barcode data","what":"0. Load the bartools package","title":"bartools: import and QC single-cell barcode data","text":"","code":"library(bartools) ## Loading required package: edgeR ## Loading required package: limma ## Loading required package: ggplot2 knitr::opts_chunk$set(dev=\"png\")"},{"path":"https://danevass.github.io/bartools/articles/import_qc_single_cell.html","id":"import-dna-barcode-count-data","dir":"Articles","previous_headings":"Import and QC of single-cell barcode data","what":"1. Import DNA barcode count data","title":"bartools: import and QC single-cell barcode data","text":"Raw barcode count data can thought similarly raw integer-based count data count based experiments RNA-sequencing. data types edgeR package provides efficient DGEList object structure store sample counts associated metadata. bartools makes use object structure store process DNA barcode counts.","code":""},{"path":"https://danevass.github.io/bartools/articles/import_qc_single_cell.html","id":"an-example-barcoding-experiment","dir":"Articles","previous_headings":"Import and QC of single-cell barcode data > 1. Import DNA barcode count data","what":"An example barcoding experiment","title":"bartools: import and QC single-cell barcode data","text":"section make use hypothetical DNA barcoding dataset based recent unpublished data Dawson lab investigating response acute myeloid leukaemia (AML) cells novel class MYST acetyltransferase inhibitor described recently MacPherson et al. Nature 2019. AML cells cultured vitro, barcoded using lentiviral based barcoding library called SPLINTR, transplanted three groups C57BL/6J mice daily dosing MYST inhibitor low high dose corresponding vehicle control. Barcode containing cells harvested bone marrow diseased mice sequenced technical replicate. follow along vignette raw counts tables sample metadata included bartools package.","code":""},{"path":"https://danevass.github.io/bartools/articles/import_qc_single_cell.html","id":"qc-and-filter-barcodes","dir":"Articles","previous_headings":"Import and QC of single-cell barcode data","what":"2. QC and filter barcodes","title":"bartools: import and QC single-cell barcode data","text":"First, load results BARtab. example can load data using readBartabCounts function. now, users can follow along vignette using test dataset included bartools unfiltered barcode counts table long format potentially multiple rows per cell ID multiple barcodes per cell detected. assess quality data looking number barcodes detected per cell number UMIs supporting frequent barcode per cell.   order identify suitable threshold minimum number UMIs supporting barcode, can plot cummulative sum many cells pass threshold.  remove barcodes supported single UMI, lose half cells. Therefore, filter based minimum number UMIs. However, can remove minor barcodes cells, .e. barcodes less half number supporting UMIs major barcode cell. following plot shows number cells multiple barcodes detected now reduced. want keep frequent barcode per cell, umi_fraction_filter = 1. Ties kept.  Finally, aggregate barcodes per cell concatenating barcodes UMIs ;. allows add barcode data metadata Seurat SingleCellExperiment object.","code":"counts_path <- \"/researchers/henrietta.holze/splintr_tools/BARtab/test/test_out/sc_bam/counts/JK05_T0_unmapped_unmapped_reads_sample1.counts.tsv\" counts <- readBartabCounts(counts_path) data(test.bartab.sc) plotBarcodesPerCell(test.bartab.sc) plotUmiPerBarcode(test.bartab.sc) plotUmiFilterThresholds(test.bartab.sc) counts_filtered <- filterBarcodes(test.bartab.sc, umiCountFilter = 2, umiFractionFilter = 0.5) plotBarcodesPerCell(counts_filtered) counts_agg <- aggregateBarcodes(counts_filtered) head(counts_agg) ##             cellid               barcode bc.umi.count ## 1 AAACCCAAGTTTGTCG mCHERRY_Barcode_12409            4 ## 2 AAACCCACAAGAGCTG mCHERRY_Barcode_14566            3 ## 3 AAACCCATCAGACCCG mCHERRY_Barcode_12904            3 ## 4 AAACGCTCATATAGCC  mCHERRY_Barcode_1614            3 ## 5 AAACGCTTCTCAGGCG  mCHERRY_Barcode_1614            2 ## 6 AAACGCTTCTGACAGT mCHERRY_Barcode_11745            3"},{"path":[]},{"path":"https://danevass.github.io/bartools/articles/import_qc_single_cell.html","id":"barcode-metadata-import-into-seurat","dir":"Articles","previous_headings":"Import and QC of single-cell barcode data > 2. Add barcode data to Seurat or SingleCellExperiment object","what":"Barcode metadata import into Seurat","title":"bartools: import and QC single-cell barcode data","text":"Generate Seurat object Cell Ranger scRNA expression matrix. Add SPLINTR barcode annotation metadata. Make sure cell IDs match. Potentially suffix needs added BARtab results (e.g. -1). Add barcode UMI count columns metadata SCE object.","code":"library(Seurat) expression.data <-   Read10X(data.dir = \"../../bartools_sc_example/GEX_filtered_feature_bc_matrix/\", strip.suffix = T) sc <- CreateSeuratObject(   counts = expression.data,   min.cells = 3,   min.features = 200,   project = \"bartools_example\" ) sc rownames(counts_agg) <- counts_agg$cellid sc <- Seurat::AddMetaData(sc, counts_agg)"},{"path":"https://danevass.github.io/bartools/articles/import_qc_single_cell.html","id":"barcode-metadata-import-into-singlecellexperiment","dir":"Articles","previous_headings":"Import and QC of single-cell barcode data > 2. Add barcode data to Seurat or SingleCellExperiment object","what":"Barcode metadata import into SingleCellExperiment","title":"bartools: import and QC single-cell barcode data","text":"Group barcode metadata detected .detected","code":"data(test.sce) colData(test.sce)[c(\"barcode\", \"bc.umi.count\")] <-   counts_agg[colnames(test.sce), c(\"barcode\", \"bc.umi.count\")] ## Loading required package: SingleCellExperiment ## Loading required package: SummarizedExperiment ## Loading required package: MatrixGenerics ## Loading required package: matrixStats ##  ## Attaching package: 'MatrixGenerics' ## The following objects are masked from 'package:matrixStats': ##  ##     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, ##     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, ##     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, ##     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, ##     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, ##     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, ##     colWeightedMeans, colWeightedMedians, colWeightedSds, ##     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, ##     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, ##     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, ##     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, ##     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, ##     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, ##     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, ##     rowWeightedSds, rowWeightedVars ## Loading required package: GenomicRanges ## Loading required package: stats4 ## Loading required package: BiocGenerics ##  ## Attaching package: 'BiocGenerics' ## The following object is masked from 'package:limma': ##  ##     plotMA ## The following objects are masked from 'package:stats': ##  ##     IQR, mad, sd, var, xtabs ## The following objects are masked from 'package:base': ##  ##     anyDuplicated, aperm, append, as.data.frame, basename, cbind, ##     colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, ##     get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply, ##     match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, ##     Position, rank, rbind, Reduce, rownames, sapply, setdiff, sort, ##     table, tapply, union, unique, unsplit, which.max, which.min ## Loading required package: S4Vectors ##  ## Attaching package: 'S4Vectors' ## The following objects are masked from 'package:base': ##  ##     expand.grid, I, unname ## Loading required package: IRanges ## Loading required package: GenomeInfoDb ## Loading required package: Biobase ## Welcome to Bioconductor ##  ##     Vignettes contain introductory material; view with ##     'browseVignettes()'. To cite Bioconductor, see ##     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. ##  ## Attaching package: 'Biobase' ## The following object is masked from 'package:MatrixGenerics': ##  ##     rowMedians ## The following objects are masked from 'package:matrixStats': ##  ##     anyMissing, rowMedians ##  ## Attaching package: 'SingleCellExperiment' ## The following object is masked from 'package:edgeR': ##  ##     cpm head(colData(test.sce)) ## DataFrame with 6 rows and 27 columns ##                        orig.ident nCount_RNA nFeature_RNA percent.mito ##                          <factor>  <numeric>    <integer>    <numeric> ## GCTACCTAGAGGCCAT bartools_example      14721         3122      6.86095 ## ACTGCAAGTGATTCAC bartools_example      20112         3497      4.52963 ## ATTTCTGGTTAGAGTA bartools_example      23773         4118      7.08367 ## GAAGTAAAGTCATGGG bartools_example       6155         1942      4.17547 ## CGGGACTCAAACCGGA bartools_example      30609         4583      4.80904 ## TGCATCCCACCTGCTT bartools_example       9633         2401      4.93097 ##                  nCount_HTO nFeature_HTO   HTO_maxID HTO_secondID HTO_margin ##                   <numeric>    <integer> <character>  <character>  <numeric> ## GCTACCTAGAGGCCAT       1098            2       MA9-1        MA9-2   1.426341 ## ACTGCAAGTGATTCAC        748            2       MA9-1        MA9-2   1.483240 ## ATTTCTGGTTAGAGTA        788            2       MA9-1        MA9-2   1.468272 ## GAAGTAAAGTCATGGG        351            2       MA9-1        MA9-2   0.986854 ## CGGGACTCAAACCGGA        731            2       MA9-1        MA9-2   1.398757 ## TGCATCCCACCTGCTT        790            2       MA9-1        MA9-2   1.463313 ##                  HTO_classification HTO_classification.global  hash.ID ##                         <character>               <character> <factor> ## GCTACCTAGAGGCCAT              MA9-1                   Singlet    MA9-1 ## ACTGCAAGTGATTCAC              MA9-1                   Singlet    MA9-1 ## ATTTCTGGTTAGAGTA              MA9-1                   Singlet    MA9-1 ## GAAGTAAAGTCATGGG              MA9-1                   Singlet    MA9-1 ## CGGGACTCAAACCGGA              MA9-1                   Singlet    MA9-1 ## TGCATCCCACCTGCTT              MA9-1                   Singlet    MA9-1 ##                      barcode bc.umi.count     detected doubletBarcode ##                  <character>  <character>  <character>    <character> ## GCTACCTAGAGGCCAT          NA           NA     detected        singlet ## ACTGCAAGTGATTCAC          NA           NA     detected        singlet ## ATTTCTGGTTAGAGTA          NA           NA     detected        singlet ## GAAGTAAAGTCATGGG          NA           NA not.detected        unknown ## CGGGACTCAAACCGGA          NA           NA     detected        singlet ## TGCATCCCACCTGCTT          NA           NA     detected        singlet ##                  MA9_1_HTO_raw MA9_2_HTO_raw MA9_1_HTO_norm MA9_2_HTO_norm ##                      <numeric>     <numeric>      <numeric>      <numeric> ## GCTACCTAGAGGCCAT          1017            81        1.88644      0.4600971 ## ACTGCAAGTGATTCAC           729            19        1.61167      0.1284293 ## ATTTCTGGTTAGAGTA           761            27        1.64620      0.1779307 ## GAAGTAAAGTCATGGG           341            10        1.05650      0.0696444 ## CGGGACTCAAACCGGA           703            28        1.58271      0.1839496 ## TGCATCCCACCTGCTT           762            28        1.64726      0.1839496 ##                     S.Score G2M.Score       Phase old.ident RNA_snn_res.0.3 ##                   <numeric> <numeric> <character>  <factor>        <factor> ## GCTACCTAGAGGCCAT  0.5712484  -2.98143           S   Singlet               0 ## ACTGCAAGTGATTCAC -0.7336216  -2.62838          G1   Singlet               3 ## ATTTCTGGTTAGAGTA  0.7472527  -3.80758           S   Singlet               1 ## GAAGTAAAGTCATGGG -0.0413439  -1.08835          G1   Singlet               1 ## CGGGACTCAAACCGGA -0.6348105  -3.49328          G1   Singlet               2 ## TGCATCCCACCTGCTT -0.2304990  -1.44251          G1   Singlet               2 ##                  seurat_clusters    ident ##                         <factor> <factor> ## GCTACCTAGAGGCCAT               0        0 ## ACTGCAAGTGATTCAC               3        3 ## ATTTCTGGTTAGAGTA               1        1 ## GAAGTAAAGTCATGGG               1        1 ## CGGGACTCAAACCGGA               2        2 ## TGCATCCCACCTGCTT               2        2 test.sce$detected <- ifelse(is.na(test.sce$barcode), \"not.detected\", \"detected\") table(test.sce$detected) ##  ## not.detected  ##          100"},{"path":"https://danevass.github.io/bartools/articles/import_qc_single_cell.html","id":"analyze-and-visualize-barcoded-scrna-seq-data","dir":"Articles","previous_headings":"Import and QC of single-cell barcode data","what":"4. Analyze and visualize barcoded scRNA-seq data","title":"bartools: import and QC single-cell barcode data","text":"can repeat QC plot check many barcodes detected cell, including barcodes detected.  can visualize distribution number cells per clone. , plot clones, ordered size. clone defined barcode unique combination barcodes. Usually, one barcode detected cell mean doublet. number cells clones tend low. Seeing cells per clone one barcode suggests truly two integration events.  check whether clone enriched cluster cell type, can perform hypergeometric test.","code":"data(test.sce) message(\"Percentage of cells with no barcode detected\") ## Percentage of cells with no barcode detected length(which(is.na(test.sce$barcode))) / ncol(test.sce) * 100 ## [1] 29 message(\"Percentage of cells with a barcode detected\") ## Percentage of cells with a barcode detected length(which(!is.na(test.sce$barcode))) / ncol(test.sce) * 100 ## [1] 71 plotBarcodesPerCell(test.sce, aggregated = T, sep = \",\") plotCellsPerGroup(   test.sce,   group = \"barcode\",   order = T,   threshold = 5,   plot = T,   label = T,   sep = \",\" ) plotClusterEnrichment(   test.sce,   group = \"barcode\",   factor = \"BC_1614\",   clusters = \"seurat_clusters\",   threshold = 0.01,   order = T,   plot = T ) ## The following ident levels had no observations and were removed: 6 ## --- ## cluster_0 ## all cells: 100 ## all BC_1614 cells: 3 ## universe: 97 ## cluster total cells: 24 ## cluster BC_1614 cells: 0 ## [1] \"Hypergeometric test p-value: 0.565244279529994\" ## --- ## cluster_1 ## all cells: 100 ## all BC_1614 cells: 3 ## universe: 97 ## cluster total cells: 27 ## cluster BC_1614 cells: 0 ## [1] \"Hypergeometric test p-value: 0.615361781076067\" ## --- ## cluster_2 ## all cells: 100 ## all BC_1614 cells: 3 ## universe: 97 ## cluster total cells: 28 ## cluster BC_1614 cells: 0 ## [1] \"Hypergeometric test p-value: 0.631168831168831\" ## --- ## cluster_3 ## all cells: 100 ## all BC_1614 cells: 3 ## universe: 97 ## cluster total cells: 10 ## cluster BC_1614 cells: 3 ## [1] \"Hypergeometric test p-value: 0\" ## --- ## cluster_4 ## all cells: 100 ## all BC_1614 cells: 3 ## universe: 97 ## cluster total cells: 5 ## cluster BC_1614 cells: 0 ## [1] \"Hypergeometric test p-value: 0.14400123685838\" ## --- ## cluster_5 ## all cells: 100 ## all BC_1614 cells: 3 ## universe: 97 ## cluster total cells: 5 ## cluster BC_1614 cells: 0 ## [1] \"Hypergeometric test p-value: 0.14400123685838\" ## --- ## cluster_7 ## all cells: 100 ## all BC_1614 cells: 3 ## universe: 97 ## cluster total cells: 1 ## cluster BC_1614 cells: 0 ## [1] \"Hypergeometric test p-value: 0.03\" plotCellsInClusters(test.sce,                      group = \"barcode\",                      factor = \"BC_12904\",                      clusters = \"seurat_clusters\") ## # A tibble: 3 × 2 ##   seurat_clusters     n ##   <fct>           <int> ## 1 0                   2 ## 2 1                   1 ## 3 7                   1 ## Warning in ggplot2::geom_histogram(stat = \"identity\"): Ignoring unknown ## parameters: `binwidth`, `bins`, and `pad`"},{"path":"https://danevass.github.io/bartools/articles/import_qc_single_cell.html","id":"session-info","dir":"Articles","previous_headings":"Import and QC of single-cell barcode data","what":"5. Session Info","title":"bartools: import and QC single-cell barcode data","text":"","code":"sessionInfo() ## R version 4.2.2 (2022-10-31) ## Platform: aarch64-apple-darwin20 (64-bit) ## Running under: macOS 14.1.1 ##  ## Matrix products: default ## BLAS:   /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRblas.0.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRlapack.dylib ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] SingleCellExperiment_1.20.1 SummarizedExperiment_1.28.0 ##  [3] Biobase_2.58.0              GenomicRanges_1.50.2        ##  [5] GenomeInfoDb_1.34.9         IRanges_2.32.0              ##  [7] S4Vectors_0.36.2            BiocGenerics_0.44.0         ##  [9] MatrixGenerics_1.10.0       matrixStats_1.0.0           ## [11] bartools_1.0.0              ggplot2_3.4.4               ## [13] edgeR_3.40.2                limma_3.54.2                ##  ## loaded via a namespace (and not attached): ##  [1] viridis_0.6.4          sass_0.4.7             viridisLite_0.4.2      ##  [4] jsonlite_1.8.7         splines_4.2.2          bslib_0.6.0            ##  [7] highr_0.10             GenomeInfoDbData_1.2.9 ggrepel_0.9.4          ## [10] yaml_2.3.7             pillar_1.9.0           lattice_0.21-9         ## [13] glue_1.6.2             digest_0.6.33          XVector_0.38.0         ## [16] colorspace_2.1-0       htmltools_0.5.7        Matrix_1.6-1.1         ## [19] pkgconfig_2.0.3        zlibbioc_1.44.0        purrr_1.0.2            ## [22] scales_1.2.1           tibble_3.2.1           mgcv_1.9-0             ## [25] generics_0.1.3         farver_2.1.1           cachem_1.0.8           ## [28] withr_2.5.2            cli_3.6.1              magrittr_2.0.3         ## [31] memoise_2.0.1          evaluate_0.23          fs_1.6.3               ## [34] fansi_1.0.5            nlme_3.1-163           MASS_7.3-60            ## [37] vegan_2.6-4            textshaping_0.3.6      tools_4.2.2            ## [40] ineq_0.2-13            data.table_1.14.8      lifecycle_1.0.4        ## [43] stringr_1.5.1          munsell_0.5.0          locfit_1.5-9.8         ## [46] DelayedArray_0.24.0    cluster_2.1.4          compiler_4.2.2         ## [49] pkgdown_2.0.7          jquerylib_0.1.4        systemfonts_1.0.5      ## [52] rlang_1.1.2            grid_4.2.2             RCurl_1.98-1.12        ## [55] rstudioapi_0.15.0      bitops_1.0-7           labeling_0.4.3         ## [58] rmarkdown_2.25         gtable_0.3.4           R6_2.5.1               ## [61] gridExtra_2.3          knitr_1.45             dplyr_1.1.4            ## [64] fastmap_1.1.1          utf8_1.2.4             rprojroot_2.0.4        ## [67] ragg_1.2.5             permute_0.9-7          desc_1.4.2             ## [70] stringi_1.8.1          parallel_4.2.2         Rcpp_1.0.11            ## [73] vctrs_0.6.4            tidyselect_1.2.0       xfun_0.41"},{"path":"https://danevass.github.io/bartools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dane Vassiliadis. Author, maintainer. Henrietta Holze. Author.","code":""},{"path":"https://danevass.github.io/bartools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vassiliadis D, Holze H (2023). bartools: Analysis visualisation synthetic DNA barcodes high throughput sequencing datasets. R package version 1.0.0.","code":"@Manual{,   title = {bartools: Analysis and visualisation of synthetic DNA barcodes in high throughput sequencing datasets},   author = {Dane Vassiliadis and Henrietta Holze},   year = {2023},   note = {R package version 1.0.0}, }"},{"path":[]},{"path":[]},{"path":"https://danevass.github.io/bartools/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Analysis and visualisation of synthetic DNA barcodes in high throughput sequencing datasets","text":"Cellular barcoding powerful widespread method accurately track progeny clone within population cells, enabling dissection biological phenomena single cell resolution. However remains need scalable standardised open-source tools pre-process visualise cellular barcoding datasets. bartools package R-based toolkit analysis cellular barcoding information high throughput sequencing datasets. package consists suite functions annotate, analyse plot DNA barcodes read using common high throughput sequencing methodologies Illumina machines. bartools package optimised use SPLINTR lineage barcode libraries however functions within can adapted cellular barcoding methodology utiilses random DNA barcodes.","code":""},{"path":"https://danevass.github.io/bartools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analysis and visualisation of synthetic DNA barcodes in high throughput sequencing datasets","text":"can install bartools GitHub:","code":"# first install Bioconductor dependencies if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\") BiocManager::install(c(\"edgeR\", \"limma\", \"ComplexHeatmap\"))  # then install bartools via GitHub if (!requireNamespace(\"devtools\", quietly = TRUE)) {   install.packages(\"devtools\") } devtools::install_github(\"DaneVass/bartools\", dependencies = TRUE, force = TRUE)"},{"path":"https://danevass.github.io/bartools/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Analysis and visualisation of synthetic DNA barcodes in high throughput sequencing datasets","text":"See vignette(bartools) details usage examples.","code":""},{"path":"https://danevass.github.io/bartools/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Analysis and visualisation of synthetic DNA barcodes in high throughput sequencing datasets","text":"See Docs full package documentation.","code":""},{"path":"https://danevass.github.io/bartools/index.html","id":"looking-for-a-dataset-preprocessing-pipeline","dir":"","previous_headings":"","what":"Looking for a dataset preprocessing pipeline?","title":"Analysis and visualisation of synthetic DNA barcodes in high throughput sequencing datasets","text":"also developed BARtab, pre-processing pipeline automate extraction enumeration barcode reads raw sequence files. See github ","code":""},{"path":"https://danevass.github.io/bartools/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Analysis and visualisation of synthetic DNA barcodes in high throughput sequencing datasets","text":"bartools package developed Dane Vassiliadis Henrietta Holze. Please post issues https://github.com/DaneVass/bartools/issues","code":""},{"path":"https://danevass.github.io/bartools/reference/aggregateBarcodes.html","id":null,"dir":"Reference","previous_headings":"","what":"aggregateBarcodes — aggregateBarcodes","title":"aggregateBarcodes — aggregateBarcodes","text":"Aggregate barcodes barcode UMIs per cell","code":""},{"path":"https://danevass.github.io/bartools/reference/aggregateBarcodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"aggregateBarcodes — aggregateBarcodes","text":"","code":"aggregateBarcodes(counts, sep = \";\")"},{"path":"https://danevass.github.io/bartools/reference/aggregateBarcodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"aggregateBarcodes — aggregateBarcodes","text":"counts Dataframe barcodes UMI counts per cell sep Separator barcodes (string). Default = `;`.","code":""},{"path":"https://danevass.github.io/bartools/reference/aggregateBarcodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"aggregateBarcodes — aggregateBarcodes","text":"Returns data frame one row per cell ID","code":""},{"path":"https://danevass.github.io/bartools/reference/calcDivIndexes.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate diversity indices for barcode samples — calcDivIndexes","title":"Calculate diversity indices for barcode samples — calcDivIndexes","text":"Takes DGEList object barcode counts computes shannon, simpson, inverse simpson gini coefficients sample","code":""},{"path":"https://danevass.github.io/bartools/reference/calcDivIndexes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate diversity indices for barcode samples — calcDivIndexes","text":"","code":"calcDivIndexes(dgeObject, group = NULL)"},{"path":"https://danevass.github.io/bartools/reference/calcDivIndexes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate diversity indices for barcode samples — calcDivIndexes","text":"dgeObject DGEList object barcode counts. group Optional, column name sample metadata group samples (string).","code":""},{"path":"https://danevass.github.io/bartools/reference/calcDivIndexes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate diversity indices for barcode samples — calcDivIndexes","text":"Returns data-frame containing calculated diversity indices per sample","code":""},{"path":"https://danevass.github.io/bartools/reference/calcDivIndexes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate diversity indices for barcode samples — calcDivIndexes","text":"calcDivIndexes Calculates common diversity indices per sample dataframe counts","code":""},{"path":"https://danevass.github.io/bartools/reference/calcDivIndexes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate diversity indices for barcode samples — calcDivIndexes","text":"","code":"data(test.dge) indexes <- calcDivIndexes(test.dge)"},{"path":"https://danevass.github.io/bartools/reference/calcPercentileBarcodes.html","id":null,"dir":"Reference","previous_headings":"","what":"calcPercentileBarcodes — calcPercentileBarcodes","title":"calcPercentileBarcodes — calcPercentileBarcodes","text":"Calculate barcodes comprising Nth percentile sample & generate cumulative sum plots","code":""},{"path":"https://danevass.github.io/bartools/reference/calcPercentileBarcodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calcPercentileBarcodes — calcPercentileBarcodes","text":"","code":"calcPercentileBarcodes(dgeObject, percentile = 0.95)"},{"path":"https://danevass.github.io/bartools/reference/calcPercentileBarcodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calcPercentileBarcodes — calcPercentileBarcodes","text":"dgeObject DGEList object barcode counts. percentile Desired percentile value (decimal). Default = `0.95` (.e. 95 percent).","code":""},{"path":"https://danevass.github.io/bartools/reference/calcPercentileBarcodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calcPercentileBarcodes — calcPercentileBarcodes","text":"Returns list object containing Nth percentile tables barcode counts per sample","code":""},{"path":"https://danevass.github.io/bartools/reference/calcPercentileBarcodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"calcPercentileBarcodes — calcPercentileBarcodes","text":"","code":"data(test.dge) calcPercentileBarcodes(test.dge, percentile = 0.95) #> $NumBarcodes #>    Sample NumBarcodes #> 1    T0-1         593 #> 2    T0-2         590 #> 3   S10-1           3 #> 4   S10-2           4 #> 5   S11-1          19 #> 6   S11-2          20 #> 7   S12-1          14 #> 8   S12-2          14 #> 9   S13-1          10 #> 10  S13-2          11 #> 11  S14-1           6 #> 12  S14-2           6 #> 13  S15-1           7 #> 14  S15-2           7 #> 15  S16-1          19 #> 16  S16-2          20 #> 17  S17-1           5 #> 18  S17-2           6 #> 19  S18-1          27 #> 20  S18-2          27 #> 21   S1-1          14 #> 22   S1-2          15 #> 23   S2-1          12 #> 24   S2-2          11 #> 25   S3-1          10 #> 26   S3-2          10 #> 27   S4-1          25 #> 28   S4-2          26 #> 29   S5-1          11 #> 30   S5-2          12 #> 31   S6-1           9 #> 32   S6-2          10 #> 33   S7-1          16 #> 34   S7-2          16 #> 35   S8-1          20 #> 36   S8-2          21 #> 37   S9-1          19 #> 38   S9-2          19 #>  #> $TopBarcodes #> $TopBarcodes$`T0-1` #>   [1] \"BC_245016\" \"BC_121651\" \"BC_420967\" \"BC_108059\" \"BC_323670\" \"BC_9141\"   #>   [7] \"BC_331193\" \"BC_119418\" \"BC_65104\"  \"BC_17570\"  \"BC_35704\"  \"BC_383329\" #>  [13] \"BC_92942\"  \"BC_24510\"  \"BC_1396\"   \"BC_83680\"  \"BC_55858\"  \"BC_38589\"  #>  [19] \"BC_137495\" \"BC_69627\"  \"BC_446739\" \"BC_171385\" \"BC_12367\"  \"BC_280320\" #>  [25] \"BC_15782\"  \"BC_310257\" \"BC_221975\" \"BC_313129\" \"BC_67201\"  \"BC_3618\"   #>  [31] \"BC_107789\" \"BC_36103\"  \"BC_2596\"   \"BC_69641\"  \"BC_215831\" \"BC_16618\"  #>  [37] \"BC_249402\" \"BC_141060\" \"BC_13611\"  \"BC_22306\"  \"BC_588849\" \"BC_43535\"  #>  [43] \"BC_16956\"  \"BC_175651\" \"BC_294188\" \"BC_46538\"  \"BC_344050\" \"BC_25084\"  #>  [49] \"BC_56819\"  \"BC_206193\" \"BC_428803\" \"BC_219379\" \"BC_400391\" \"BC_19146\"  #>  [55] \"BC_205581\" \"BC_148563\" \"BC_114027\" \"BC_172626\" \"BC_403084\" \"BC_62602\"  #>  [61] \"BC_224300\" \"BC_47439\"  \"BC_18278\"  \"BC_43128\"  \"BC_68847\"  \"BC_111272\" #>  [67] \"BC_58978\"  \"BC_162898\" \"BC_476380\" \"BC_262618\" \"BC_276866\" \"BC_252374\" #>  [73] \"BC_550404\" \"BC_325065\" \"BC_202891\" \"BC_50136\"  \"BC_255436\" \"BC_103528\" #>  [79] \"BC_425129\" \"BC_168818\" \"BC_204266\" \"BC_176946\" \"BC_521149\" \"BC_105387\" #>  [85] \"BC_227720\" \"BC_83707\"  \"BC_64584\"  \"BC_21018\"  \"BC_458543\" \"BC_11643\"  #>  [91] \"BC_175871\" \"BC_556149\" \"BC_34617\"  \"BC_166467\" \"BC_41692\"  \"BC_72619\"  #>  [97] \"BC_168530\" \"BC_289383\" \"BC_2040\"   \"BC_516753\" \"BC_24159\"  \"BC_249161\" #> [103] \"BC_345717\" \"BC_54442\"  \"BC_236596\" \"BC_248159\" \"BC_206263\" \"BC_376665\" #> [109] \"BC_18345\"  \"BC_114040\" \"BC_612467\" \"BC_56338\"  \"BC_363714\" \"BC_39281\"  #> [115] \"BC_30946\"  \"BC_32325\"  \"BC_418545\" \"BC_103714\" \"BC_140320\" \"BC_120596\" #> [121] \"BC_503475\" \"BC_160057\" \"BC_16754\"  \"BC_43673\"  \"BC_173736\" \"BC_46524\"  #> [127] \"BC_142999\" \"BC_11277\"  \"BC_67854\"  \"BC_258799\" \"BC_13395\"  \"BC_37062\"  #> [133] \"BC_38398\"  \"BC_105732\" \"BC_139928\" \"BC_355420\" \"BC_40856\"  \"BC_128266\" #> [139] \"BC_321677\" \"BC_203520\" \"BC_29284\"  \"BC_172412\" \"BC_85441\"  \"BC_20263\"  #> [145] \"BC_118831\" \"BC_10454\"  \"BC_5256\"   \"BC_129519\" \"BC_11391\"  \"BC_172238\" #> [151] \"BC_43123\"  \"BC_42178\"  \"BC_102205\" \"BC_346124\" \"BC_389078\" \"BC_42612\"  #> [157] \"BC_93485\"  \"BC_415373\" \"BC_3733\"   \"BC_32680\"  \"BC_474982\" \"BC_7405\"   #> [163] \"BC_289568\" \"BC_229995\" \"BC_79026\"  \"BC_45955\"  \"BC_146666\" \"BC_183401\" #> [169] \"BC_356531\" \"BC_187025\" \"BC_42310\"  \"BC_221056\" \"BC_132225\" \"BC_235128\" #> [175] \"BC_15740\"  \"BC_160158\" \"BC_320233\" \"BC_8835\"   \"BC_173674\" \"BC_53234\"  #> [181] \"BC_91412\"  \"BC_135438\" \"BC_373901\" \"BC_44599\"  \"BC_87047\"  \"BC_350464\" #> [187] \"BC_324711\" \"BC_40516\"  \"BC_113839\" \"BC_162119\" \"BC_33699\"  \"BC_635211\" #> [193] \"BC_346627\" \"BC_7122\"   \"BC_806\"    \"BC_63846\"  \"BC_283335\" \"BC_151544\" #> [199] \"BC_273124\" \"BC_227308\" \"BC_47726\"  \"BC_102803\" \"BC_244320\" \"BC_10347\"  #> [205] \"BC_389742\" \"BC_2865\"   \"BC_77030\"  \"BC_65130\"  \"BC_564039\" \"BC_519985\" #> [211] \"BC_76947\"  \"BC_4564\"   \"BC_521485\" \"BC_495859\" \"BC_35659\"  \"BC_14377\"  #> [217] \"BC_199881\" \"BC_147006\" \"BC_26769\"  \"BC_100344\" \"BC_672202\" \"BC_146146\" #> [223] \"BC_320752\" \"BC_324953\" \"BC_217211\" \"BC_67965\"  \"BC_210529\" \"BC_189813\" #> [229] \"BC_242383\" \"BC_560839\" \"BC_228994\" \"BC_389087\" \"BC_44600\"  \"BC_20557\"  #> [235] \"BC_10808\"  \"BC_138900\" \"BC_81309\"  \"BC_145719\" \"BC_58144\"  \"BC_7299\"   #> [241] \"BC_78349\"  \"BC_102160\" \"BC_164378\" \"BC_211828\" \"BC_336794\" \"BC_53380\"  #> [247] \"BC_14492\"  \"BC_23241\"  \"BC_57621\"  \"BC_11270\"  \"BC_41523\"  \"BC_33764\"  #> [253] \"BC_12191\"  \"BC_17608\"  \"BC_8324\"   \"BC_183112\" \"BC_167638\" \"BC_2206\"   #> [259] \"BC_123791\" \"BC_377226\" \"BC_195246\" \"BC_161563\" \"BC_67233\"  \"BC_421415\" #> [265] \"BC_150291\" \"BC_408928\" \"BC_410172\" \"BC_121663\" \"BC_201293\" \"BC_156353\" #> [271] \"BC_45652\"  \"BC_357846\" \"BC_199093\" \"BC_214878\" \"BC_6093\"   \"BC_214604\" #> [277] \"BC_302238\" \"BC_521264\" \"BC_672021\" \"BC_2294\"   \"BC_587139\" \"BC_638624\" #> [283] \"BC_86358\"  \"BC_1764\"   \"BC_366637\" \"BC_218093\" \"BC_201372\" \"BC_19353\"  #> [289] \"BC_130431\" \"BC_22999\"  \"BC_49044\"  \"BC_154519\" \"BC_324042\" \"BC_37363\"  #> [295] \"BC_154990\" \"BC_350335\" \"BC_194823\" \"BC_23522\"  \"BC_141246\" \"BC_4531\"   #> [301] \"BC_4733\"   \"BC_654016\" \"BC_147380\" \"BC_196282\" \"BC_52081\"  \"BC_207651\" #> [307] \"BC_380559\" \"BC_527469\" \"BC_353112\" \"BC_426662\" \"BC_655329\" \"BC_73098\"  #> [313] \"BC_146322\" \"BC_596629\" \"BC_64945\"  \"BC_462254\" \"BC_261055\" \"BC_145403\" #> [319] \"BC_61489\"  \"BC_617554\" \"BC_228018\" \"BC_249649\" \"BC_211811\" \"BC_101581\" #> [325] \"BC_43206\"  \"BC_326596\" \"BC_514247\" \"BC_88464\"  \"BC_203989\" \"BC_206798\" #> [331] \"BC_19610\"  \"BC_9626\"   \"BC_116921\" \"BC_181554\" \"BC_79755\"  \"BC_77101\"  #> [337] \"BC_55675\"  \"BC_83816\"  \"BC_138737\" \"BC_322542\" \"BC_318282\" \"BC_444573\" #> [343] \"BC_9340\"   \"BC_49226\"  \"BC_57692\"  \"BC_93884\"  \"BC_181957\" \"BC_217320\" #> [349] \"BC_296283\" \"BC_3583\"   \"BC_11055\"  \"BC_95934\"  \"BC_88099\"  \"BC_35283\"  #> [355] \"BC_67374\"  \"BC_175957\" \"BC_266451\" \"BC_283541\" \"BC_14484\"  \"BC_14810\"  #> [361] \"BC_157906\" \"BC_354350\" \"BC_539228\" \"BC_61500\"  \"BC_45402\"  \"BC_234390\" #> [367] \"BC_415903\" \"BC_12418\"  \"BC_238160\" \"BC_29208\"  \"BC_91989\"  \"BC_92584\"  #> [373] \"BC_351660\" \"BC_381245\" \"BC_31196\"  \"BC_47310\"  \"BC_20573\"  \"BC_64931\"  #> [379] \"BC_2430\"   \"BC_15448\"  \"BC_94579\"  \"BC_171953\" \"BC_9322\"   \"BC_587343\" #> [385] \"BC_50222\"  \"BC_53219\"  \"BC_77187\"  \"BC_7691\"   \"BC_225019\" \"BC_238577\" #> [391] \"BC_6304\"   \"BC_13093\"  \"BC_154696\" \"BC_275321\" \"BC_75688\"  \"BC_10293\"  #> [397] \"BC_13\"     \"BC_90135\"  \"BC_357977\" \"BC_4198\"   \"BC_147556\" \"BC_231962\" #> [403] \"BC_175198\" \"BC_144061\" \"BC_26258\"  \"BC_114257\" \"BC_194092\" \"BC_31779\"  #> [409] \"BC_268745\" \"BC_67247\"  \"BC_82595\"  \"BC_103862\" \"BC_149347\" \"BC_346761\" #> [415] \"BC_473006\" \"BC_49397\"  \"BC_302454\" \"BC_207333\" \"BC_31185\"  \"BC_115436\" #> [421] \"BC_124624\" \"BC_491991\" \"BC_309303\" \"BC_12410\"  \"BC_228333\" \"BC_528062\" #> [427] \"BC_363879\" \"BC_70909\"  \"BC_563624\" \"BC_11152\"  \"BC_446649\" \"BC_129768\" #> [433] \"BC_129559\" \"BC_169627\" \"BC_21535\"  \"BC_516611\" \"BC_57582\"  \"BC_159570\" #> [439] \"BC_130861\" \"BC_48168\"  \"BC_66948\"  \"BC_257382\" \"BC_179919\" \"BC_15707\"  #> [445] \"BC_17509\"  \"BC_444761\" \"BC_57794\"  \"BC_147063\" \"BC_52856\"  \"BC_14452\"  #> [451] \"BC_316483\" \"BC_186401\" \"BC_90599\"  \"BC_245600\" \"BC_1977\"   \"BC_99\"     #> [457] \"BC_176231\" \"BC_472019\" \"BC_292962\" \"BC_221691\" \"BC_170233\" \"BC_182320\" #> [463] \"BC_381050\" \"BC_28938\"  \"BC_67370\"  \"BC_110945\" \"BC_195887\" \"BC_257523\" #> [469] \"BC_2762\"   \"BC_255928\" \"BC_355439\" \"BC_33035\"  \"BC_125634\" \"BC_430\"    #> [475] \"BC_146760\" \"BC_164579\" \"BC_345889\" \"BC_142112\" \"BC_515934\" \"BC_141114\" #> [481] \"BC_20281\"  \"BC_322219\" \"BC_248582\" \"BC_1593\"   \"BC_9747\"   \"BC_82758\"  #> [487] \"BC_329007\" \"BC_567519\" \"BC_229036\" \"BC_50311\"  \"BC_576338\" \"BC_189854\" #> [493] \"BC_25609\"  \"BC_56489\"  \"BC_10190\"  \"BC_41280\"  \"BC_370968\" \"BC_162322\" #> [499] \"BC_337697\" \"BC_6453\"   \"BC_186267\" \"BC_222891\" \"BC_297704\" \"BC_145103\" #> [505] \"BC_81579\"  \"BC_35633\"  \"BC_170407\" \"BC_62970\"  \"BC_120505\" \"BC_66747\"  #> [511] \"BC_413466\" \"BC_329679\" \"BC_454109\" \"BC_37116\"  \"BC_389378\" \"BC_4061\"   #> [517] \"BC_163063\" \"BC_125776\" \"BC_38465\"  \"BC_278096\" \"BC_288976\" \"BC_171345\" #> [523] \"BC_557872\" \"BC_127999\" \"BC_259621\" \"BC_314343\" \"BC_80020\"  \"BC_228451\" #> [529] \"BC_282868\" \"BC_182092\" \"BC_56792\"  \"BC_143062\" \"BC_219703\" \"BC_235649\" #> [535] \"BC_131019\" \"BC_561471\" \"BC_22981\"  \"BC_567514\" \"BC_345175\" \"BC_345888\" #> [541] \"BC_7076\"   \"BC_220827\" \"BC_23213\"  \"BC_73196\"  \"BC_2142\"   \"BC_41997\"  #> [547] \"BC_147873\" \"BC_19557\"  \"BC_29053\"  \"BC_230643\" \"BC_28077\"  \"BC_22263\"  #> [553] \"BC_29984\"  \"BC_215667\" \"BC_69571\"  \"BC_8838\"   \"BC_275938\" \"BC_413636\" #> [559] \"BC_2791\"   \"BC_26462\"  \"BC_29222\"  \"BC_4173\"   \"BC_89937\"  \"BC_8159\"   #> [565] \"BC_413271\" \"BC_14131\"  \"BC_59243\"  \"BC_190202\" \"BC_294271\" \"BC_23918\"  #> [571] \"BC_154806\" \"BC_214774\" \"BC_26384\"  \"BC_57471\"  \"BC_1534\"   \"BC_451991\" #> [577] \"BC_15172\"  \"BC_109658\" \"BC_483925\" \"BC_71820\"  \"BC_330625\" \"BC_153858\" #> [583] \"BC_319910\" \"BC_459545\" \"BC_53645\"  \"BC_84350\"  \"BC_427925\" \"BC_75310\"  #> [589] \"BC_5615\"   \"BC_142652\" \"BC_50626\"  \"BC_107381\" \"BC_8715\"   #>  #> $TopBarcodes$`T0-2` #>   [1] \"BC_245016\" \"BC_121651\" \"BC_420967\" \"BC_108059\" \"BC_323670\" \"BC_9141\"   #>   [7] \"BC_331193\" \"BC_119418\" \"BC_65104\"  \"BC_17570\"  \"BC_35704\"  \"BC_92942\"  #>  [13] \"BC_383329\" \"BC_83680\"  \"BC_1396\"   \"BC_24510\"  \"BC_55858\"  \"BC_38589\"  #>  [19] \"BC_313129\" \"BC_446739\" \"BC_137495\" \"BC_69627\"  \"BC_171385\" \"BC_280320\" #>  [25] \"BC_221975\" \"BC_12367\"  \"BC_15782\"  \"BC_3618\"   \"BC_310257\" \"BC_107789\" #>  [31] \"BC_67201\"  \"BC_36103\"  \"BC_215831\" \"BC_43535\"  \"BC_2596\"   \"BC_13611\"  #>  [37] \"BC_294188\" \"BC_588849\" \"BC_16618\"  \"BC_69641\"  \"BC_22306\"  \"BC_428803\" #>  [43] \"BC_403084\" \"BC_141060\" \"BC_205581\" \"BC_249402\" \"BC_206193\" \"BC_25084\"  #>  [49] \"BC_344050\" \"BC_400391\" \"BC_325065\" \"BC_219379\" \"BC_46538\"  \"BC_289383\" #>  [55] \"BC_56819\"  \"BC_43128\"  \"BC_175651\" \"BC_18278\"  \"BC_172626\" \"BC_19146\"  #>  [61] \"BC_47439\"  \"BC_252374\" \"BC_58978\"  \"BC_21018\"  \"BC_521149\" \"BC_16956\"  #>  [67] \"BC_262618\" \"BC_50136\"  \"BC_202891\" \"BC_148563\" \"BC_62602\"  \"BC_458543\" #>  [73] \"BC_68847\"  \"BC_114027\" \"BC_476380\" \"BC_276866\" \"BC_111272\" \"BC_176946\" #>  [79] \"BC_255436\" \"BC_168818\" \"BC_550404\" \"BC_175871\" \"BC_204266\" \"BC_64584\"  #>  [85] \"BC_425129\" \"BC_83707\"  \"BC_162898\" \"BC_224300\" \"BC_103528\" \"BC_34617\"  #>  [91] \"BC_72619\"  \"BC_516753\" \"BC_105387\" \"BC_376665\" \"BC_18345\"  \"BC_2040\"   #>  [97] \"BC_168530\" \"BC_11643\"  \"BC_114040\" \"BC_227720\" \"BC_556149\" \"BC_7405\"   #> [103] \"BC_249161\" \"BC_345717\" \"BC_363714\" \"BC_248159\" \"BC_24159\"  \"BC_236596\" #> [109] \"BC_16754\"  \"BC_206263\" \"BC_118831\" \"BC_54442\"  \"BC_41692\"  \"BC_503475\" #> [115] \"BC_5256\"   \"BC_11277\"  \"BC_67854\"  \"BC_30946\"  \"BC_43673\"  \"BC_29284\"  #> [121] \"BC_85441\"  \"BC_160057\" \"BC_166467\" \"BC_56338\"  \"BC_20263\"  \"BC_258799\" #> [127] \"BC_172412\" \"BC_32325\"  \"BC_321677\" \"BC_79026\"  \"BC_37062\"  \"BC_120596\" #> [133] \"BC_203520\" \"BC_418545\" \"BC_135438\" \"BC_139928\" \"BC_160158\" \"BC_635211\" #> [139] \"BC_612467\" \"BC_11391\"  \"BC_564039\" \"BC_47726\"  \"BC_105732\" \"BC_46524\"  #> [145] \"BC_53234\"  \"BC_103714\" \"BC_140320\" \"BC_289568\" \"BC_415373\" \"BC_102803\" #> [151] \"BC_39281\"  \"BC_3733\"   \"BC_172238\" \"BC_93485\"  \"BC_13395\"  \"BC_43123\"  #> [157] \"BC_2294\"   \"BC_146666\" \"BC_132225\" \"BC_40516\"  \"BC_173736\" \"BC_42612\"  #> [163] \"BC_356531\" \"BC_113839\" \"BC_519985\" \"BC_129519\" \"BC_77030\"  \"BC_32680\"  #> [169] \"BC_183401\" \"BC_128266\" \"BC_210529\" \"BC_161563\" \"BC_355420\" \"BC_217211\" #> [175] \"BC_324711\" \"BC_10454\"  \"BC_91412\"  \"BC_44599\"  \"BC_40856\"  \"BC_8835\"   #> [181] \"BC_142999\" \"BC_173674\" \"BC_151544\" \"BC_229995\" \"BC_346124\" \"BC_42310\"  #> [187] \"BC_102160\" \"BC_45955\"  \"BC_15740\"  \"BC_17608\"  \"BC_350464\" \"BC_560839\" #> [193] \"BC_389078\" \"BC_76947\"  \"BC_33699\"  \"BC_145719\" \"BC_42178\"  \"BC_67233\"  #> [199] \"BC_38398\"  \"BC_7122\"   \"BC_410172\" \"BC_65130\"  \"BC_189813\" \"BC_8324\"   #> [205] \"BC_324953\" \"BC_521485\" \"BC_235128\" \"BC_63846\"  \"BC_320752\" \"BC_87047\"  #> [211] \"BC_67965\"  \"BC_102205\" \"BC_242383\" \"BC_377226\" \"BC_389742\" \"BC_211828\" #> [217] \"BC_273124\" \"BC_23522\"  \"BC_154990\" \"BC_320233\" \"BC_41523\"  \"BC_183112\" #> [223] \"BC_221056\" \"BC_2865\"   \"BC_672202\" \"BC_187025\" \"BC_326596\" \"BC_283335\" #> [229] \"BC_336794\" \"BC_44600\"  \"BC_227308\" \"BC_156353\" \"BC_207651\" \"BC_408928\" #> [235] \"BC_495859\" \"BC_162119\" \"BC_64931\"  \"BC_7299\"   \"BC_53380\"  \"BC_35659\"  #> [241] \"BC_101581\" \"BC_4733\"   \"BC_199881\" \"BC_57621\"  \"BC_373901\" \"BC_164378\" #> [247] \"BC_147006\" \"BC_214604\" \"BC_45652\"  \"BC_154519\" \"BC_64945\"  \"BC_346627\" #> [253] \"BC_201293\" \"BC_366637\" \"BC_26769\"  \"BC_474982\" \"BC_206798\" \"BC_9340\"   #> [259] \"BC_19353\"  \"BC_95934\"  \"BC_20557\"  \"BC_14377\"  \"BC_6093\"   \"BC_33764\"  #> [265] \"BC_389087\" \"BC_130861\" \"BC_157906\" \"BC_462254\" \"BC_244320\" \"BC_1764\"   #> [271] \"BC_123791\" \"BC_37363\"  \"BC_86358\"  \"BC_194823\" \"BC_211811\" \"BC_53219\"  #> [277] \"BC_421415\" \"BC_100344\" \"BC_2206\"   \"BC_78349\"  \"BC_221691\" \"BC_116921\" #> [283] \"BC_228994\" \"BC_10347\"  \"BC_514247\" \"BC_175198\" \"BC_266451\" \"BC_638624\" #> [289] \"BC_4531\"   \"BC_10808\"  \"BC_88464\"  \"BC_228018\" \"BC_196282\" \"BC_81309\"  #> [295] \"BC_167638\" \"BC_130431\" \"BC_346761\" \"BC_77101\"  \"BC_672021\" \"BC_446649\" #> [301] \"BC_12418\"  \"BC_22999\"  \"BC_350335\" \"BC_14492\"  \"BC_806\"    \"BC_141114\" #> [307] \"BC_138737\" \"BC_10293\"  \"BC_175957\" \"BC_14810\"  \"BC_444573\" \"BC_521264\" #> [313] \"BC_147380\" \"BC_380559\" \"BC_539228\" \"BC_162322\" \"BC_91989\"  \"BC_145403\" #> [319] \"BC_57692\"  \"BC_61489\"  \"BC_58144\"  \"BC_4564\"   \"BC_77187\"  \"BC_121663\" #> [325] \"BC_73098\"  \"BC_141246\" \"BC_195246\" \"BC_49226\"  \"BC_171953\" \"BC_181957\" #> [331] \"BC_214878\" \"BC_182320\" \"BC_114257\" \"BC_146146\" \"BC_6304\"   \"BC_181554\" #> [337] \"BC_13093\"  \"BC_528062\" \"BC_587139\" \"BC_55675\"  \"BC_23241\"  \"BC_11270\"  #> [343] \"BC_20573\"  \"BC_29208\"  \"BC_218093\" \"BC_654016\" \"BC_150291\" \"BC_292962\" #> [349] \"BC_217320\" \"BC_199093\" \"BC_138900\" \"BC_225019\" \"BC_12191\"  \"BC_354350\" #> [355] \"BC_115436\" \"BC_99\"     \"BC_93884\"  \"BC_234390\" \"BC_527469\" \"BC_351660\" #> [361] \"BC_201372\" \"BC_3583\"   \"BC_19610\"  \"BC_587343\" \"BC_353112\" \"BC_15448\"  #> [367] \"BC_357977\" \"BC_2430\"   \"BC_617554\" \"BC_11152\"  \"BC_31779\"  \"BC_330625\" #> [373] \"BC_147556\" \"BC_88099\"  \"BC_2791\"   \"BC_67247\"  \"BC_110945\" \"BC_50222\"  #> [379] \"BC_147063\" \"BC_9626\"   \"BC_1593\"   \"BC_426662\" \"BC_413271\" \"BC_49044\"  #> [385] \"BC_4198\"   \"BC_164652\" \"BC_125634\" \"BC_322542\" \"BC_203989\" \"BC_67374\"  #> [391] \"BC_45402\"  \"BC_14484\"  \"BC_195887\" \"BC_9322\"   \"BC_415903\" \"BC_82595\"  #> [397] \"BC_329007\" \"BC_146322\" \"BC_261055\" \"BC_90135\"  \"BC_26258\"  \"BC_363879\" #> [403] \"BC_515934\" \"BC_11055\"  \"BC_49397\"  \"BC_381245\" \"BC_309303\" \"BC_12410\"  #> [409] \"BC_249649\" \"BC_318282\" \"BC_57794\"  \"BC_67370\"  \"BC_316483\" \"BC_31196\"  #> [415] \"BC_357846\" \"BC_9747\"   \"BC_83816\"  \"BC_26384\"  \"BC_52856\"  \"BC_302454\" #> [421] \"BC_50311\"  \"BC_282868\" \"BC_61500\"  \"BC_238577\" \"BC_47310\"  \"BC_31185\"  #> [427] \"BC_283541\" \"BC_79755\"  \"BC_231962\" \"BC_56489\"  \"BC_120505\" \"BC_94579\"  #> [433] \"BC_444761\" \"BC_70909\"  \"BC_296283\" \"BC_15652\"  \"BC_276301\" \"BC_322219\" #> [439] \"BC_169627\" \"BC_84350\"  \"BC_596629\" \"BC_21535\"  \"BC_52081\"  \"BC_7691\"   #> [445] \"BC_302238\" \"BC_165975\" \"BC_14380\"  \"BC_144061\" \"BC_129559\" \"BC_491991\" #> [451] \"BC_43206\"  \"BC_35459\"  \"BC_228333\" \"BC_176231\" \"BC_75688\"  \"BC_516611\" #> [457] \"BC_149347\" \"BC_220827\" \"BC_207333\" \"BC_159570\" \"BC_288976\" \"BC_81579\"  #> [463] \"BC_44350\"  \"BC_145103\" \"BC_35283\"  \"BC_250471\" \"BC_97874\"  \"BC_567519\" #> [469] \"BC_454109\" \"BC_355439\" \"BC_430\"    \"BC_57582\"  \"BC_48168\"  \"BC_10190\"  #> [475] \"BC_19612\"  \"BC_92584\"  \"BC_212837\" \"BC_129768\" \"BC_345889\" \"BC_115038\" #> [481] \"BC_228451\" \"BC_451991\" \"BC_179919\" \"BC_576338\" \"BC_655329\" \"BC_472019\" #> [487] \"BC_168163\" \"BC_35633\"  \"BC_257382\" \"BC_535770\" \"BC_329679\" \"BC_248582\" #> [493] \"BC_62970\"  \"BC_324042\" \"BC_18218\"  \"BC_182092\" \"BC_142112\" \"BC_4173\"   #> [499] \"BC_100070\" \"BC_259621\" \"BC_567514\" \"BC_103862\" \"BC_28938\"  \"BC_325871\" #> [505] \"BC_49060\"  \"BC_275321\" \"BC_186267\" \"BC_652798\" \"BC_1977\"   \"BC_238160\" #> [511] \"BC_189854\" \"BC_37116\"  \"BC_255928\" \"BC_268745\" \"BC_23918\"  \"BC_131019\" #> [517] \"BC_171345\" \"BC_278096\" \"BC_13\"     \"BC_82758\"  \"BC_26097\"  \"BC_65912\"  #> [523] \"BC_41280\"  \"BC_245600\" \"BC_509872\" \"BC_15707\"  \"BC_17509\"  \"BC_154696\" #> [529] \"BC_194092\" \"BC_28077\"  \"BC_4165\"   \"BC_154806\" \"BC_25609\"  \"BC_33035\"  #> [535] \"BC_1139\"   \"BC_80020\"  \"BC_388103\" \"BC_59243\"  \"BC_20281\"  \"BC_57889\"  #> [541] \"BC_143062\" \"BC_218837\" \"BC_179997\" \"BC_90599\"  \"BC_5615\"   \"BC_23363\"  #> [547] \"BC_352645\" \"BC_292621\" \"BC_153858\" \"BC_230643\" \"BC_297704\" \"BC_381050\" #> [553] \"BC_203210\" \"BC_8838\"   \"BC_183115\" \"BC_257523\" \"BC_22263\"  \"BC_56792\"  #> [559] \"BC_163063\" \"BC_184732\" \"BC_563624\" \"BC_77131\"  \"BC_78760\"  \"BC_370968\" #> [565] \"BC_307924\" \"BC_331889\" \"BC_389378\" \"BC_29053\"  \"BC_23213\"  \"BC_428204\" #> [571] \"BC_500299\" \"BC_14452\"  \"BC_124624\" \"BC_22981\"  \"BC_98171\"  \"BC_170233\" #> [577] \"BC_38465\"  \"BC_47704\"  \"BC_198370\" \"BC_14131\"  \"BC_190202\" \"BC_278655\" #> [583] \"BC_6453\"   \"BC_557872\" \"BC_31562\"  \"BC_128748\" \"BC_29984\"  \"BC_294176\" #> [589] \"BC_127999\" \"BC_796\"    #>  #> $TopBarcodes$`S10-1` #> [1] \"BC_8419\"   \"BC_124796\" \"BC_102160\" #>  #> $TopBarcodes$`S10-2` #> [1] \"BC_8419\"   \"BC_124796\" \"BC_102160\" \"BC_68847\"  #>  #> $TopBarcodes$`S11-1` #>  [1] \"BC_53234\"  \"BC_205581\" \"BC_90135\"  \"BC_172626\" \"BC_58978\"  \"BC_79755\"  #>  [7] \"BC_159570\" \"BC_118640\" \"BC_31610\"  \"BC_257382\" \"BC_1607\"   \"BC_635211\" #> [13] \"BC_4531\"   \"BC_324711\" \"BC_327422\" \"BC_297704\" \"BC_194823\" \"BC_415460\" #> [19] \"BC_140320\" #>  #> $TopBarcodes$`S11-2` #>  [1] \"BC_53234\"  \"BC_205581\" \"BC_90135\"  \"BC_172626\" \"BC_58978\"  \"BC_79755\"  #>  [7] \"BC_159570\" \"BC_635211\" \"BC_118640\" \"BC_324711\" \"BC_31610\"  \"BC_257382\" #> [13] \"BC_4531\"   \"BC_1607\"   \"BC_327422\" \"BC_297704\" \"BC_194823\" \"BC_415460\" #> [19] \"BC_62602\"  \"BC_140320\" #>  #> $TopBarcodes$`S12-1` #>  [1] \"BC_389078\" \"BC_159570\" \"BC_135438\" \"BC_500780\" \"BC_79755\"  \"BC_31610\"  #>  [7] \"BC_49629\"  \"BC_78349\"  \"BC_118640\" \"BC_47726\"  \"BC_58978\"  \"BC_1607\"   #> [13] \"BC_245016\" \"BC_329679\" #>  #> $TopBarcodes$`S12-2` #>  [1] \"BC_389078\" \"BC_159570\" \"BC_135438\" \"BC_500780\" \"BC_79755\"  \"BC_31610\"  #>  [7] \"BC_49629\"  \"BC_118640\" \"BC_47726\"  \"BC_78349\"  \"BC_245016\" \"BC_58978\"  #> [13] \"BC_1607\"   \"BC_329679\" #>  #> $TopBarcodes$`S13-1` #>  [1] \"BC_8419\"   \"BC_124796\" \"BC_102160\" \"BC_257382\" \"BC_172626\" \"BC_345889\" #>  [7] \"BC_53234\"  \"BC_79755\"  \"BC_5472\"   \"BC_205581\" #>  #> $TopBarcodes$`S13-2` #>  [1] \"BC_8419\"   \"BC_124796\" \"BC_102160\" \"BC_257382\" \"BC_172626\" \"BC_345889\" #>  [7] \"BC_53234\"  \"BC_5472\"   \"BC_79755\"  \"BC_17608\"  \"BC_205581\" #>  #> $TopBarcodes$`S14-1` #> [1] \"BC_90135\"  \"BC_388103\" \"BC_31610\"  \"BC_58978\"  \"BC_292962\" \"BC_159570\" #>  #> $TopBarcodes$`S14-2` #> [1] \"BC_90135\"  \"BC_388103\" \"BC_31610\"  \"BC_58978\"  \"BC_292962\" \"BC_159570\" #>  #> $TopBarcodes$`S15-1` #> [1] \"BC_1478\"   \"BC_94579\"  \"BC_124796\" \"BC_8419\"   \"BC_316204\" \"BC_400391\" #> [7] \"BC_23241\"  #>  #> $TopBarcodes$`S15-2` #> [1] \"BC_1478\"   \"BC_94579\"  \"BC_124796\" \"BC_8419\"   \"BC_316204\" \"BC_400391\" #> [7] \"BC_23241\"  #>  #> $TopBarcodes$`S16-1` #>  [1] \"BC_53234\"  \"BC_79755\"  \"BC_140320\" \"BC_31610\"  \"BC_248880\" \"BC_1478\"   #>  [7] \"BC_17608\"  \"BC_257382\" \"BC_345889\" \"BC_94511\"  \"BC_142112\" \"BC_142024\" #> [13] \"BC_91412\"  \"BC_58978\"  \"BC_190202\" \"BC_4198\"   \"BC_68847\"  \"BC_389078\" #> [19] \"BC_47726\"  #>  #> $TopBarcodes$`S16-2` #>  [1] \"BC_53234\"  \"BC_79755\"  \"BC_140320\" \"BC_31610\"  \"BC_248880\" \"BC_1478\"   #>  [7] \"BC_17608\"  \"BC_257382\" \"BC_345889\" \"BC_94511\"  \"BC_142112\" \"BC_142024\" #> [13] \"BC_91412\"  \"BC_58978\"  \"BC_190202\" \"BC_68847\"  \"BC_4198\"   \"BC_389078\" #> [19] \"BC_47726\"  \"BC_205581\" #>  #> $TopBarcodes$`S17-1` #> [1] \"BC_183691\" \"BC_90135\"  \"BC_400391\" \"BC_31610\"  \"BC_68847\"  #>  #> $TopBarcodes$`S17-2` #> [1] \"BC_183691\" \"BC_90135\"  \"BC_400391\" \"BC_31610\"  \"BC_68847\"  \"BC_53234\"  #>  #> $TopBarcodes$`S18-1` #>  [1] \"BC_49397\"  \"BC_91412\"  \"BC_159570\" \"BC_62602\"  \"BC_93485\"  \"BC_70225\"  #>  [7] \"BC_79755\"  \"BC_4564\"   \"BC_124796\" \"BC_58978\"  \"BC_8419\"   \"BC_149935\" #> [13] \"BC_68847\"  \"BC_90135\"  \"BC_4173\"   \"BC_4469\"   \"BC_172626\" \"BC_31610\"  #> [19] \"BC_383329\" \"BC_55960\"  \"BC_62970\"  \"BC_102160\" \"BC_244320\" \"BC_400391\" #> [25] \"BC_135438\" \"BC_203989\" \"BC_81579\"  #>  #> $TopBarcodes$`S18-2` #>  [1] \"BC_49397\"  \"BC_91412\"  \"BC_159570\" \"BC_62602\"  \"BC_70225\"  \"BC_93485\"  #>  [7] \"BC_79755\"  \"BC_4564\"   \"BC_124796\" \"BC_8419\"   \"BC_58978\"  \"BC_149935\" #> [13] \"BC_68847\"  \"BC_90135\"  \"BC_4173\"   \"BC_4469\"   \"BC_172626\" \"BC_31610\"  #> [19] \"BC_383329\" \"BC_55960\"  \"BC_62970\"  \"BC_102160\" \"BC_244320\" \"BC_400391\" #> [25] \"BC_135438\" \"BC_203989\" \"BC_133178\" #>  #> $TopBarcodes$`S1-1` #>  [1] \"BC_79755\"  \"BC_102160\" \"BC_59493\"  \"BC_23361\"  \"BC_53234\"  \"BC_400391\" #>  [7] \"BC_142112\" \"BC_94511\"  \"BC_68847\"  \"BC_142024\" \"BC_23241\"  \"BC_47310\"  #> [13] \"BC_9141\"   \"BC_65104\"  #>  #> $TopBarcodes$`S1-2` #>  [1] \"BC_79755\"  \"BC_102160\" \"BC_59493\"  \"BC_23361\"  \"BC_53234\"  \"BC_142112\" #>  [7] \"BC_400391\" \"BC_94511\"  \"BC_68847\"  \"BC_142024\" \"BC_23241\"  \"BC_9141\"   #> [13] \"BC_47310\"  \"BC_5472\"   \"BC_65104\"  #>  #> $TopBarcodes$`S2-1` #>  [1] \"BC_248880\" \"BC_65104\"  \"BC_9141\"   \"BC_1478\"   \"BC_31610\"  \"BC_79755\"  #>  [7] \"BC_388103\" \"BC_257382\" \"BC_68618\"  \"BC_102160\" \"BC_4531\"   \"BC_90135\"  #>  #> $TopBarcodes$`S2-2` #>  [1] \"BC_248880\" \"BC_65104\"  \"BC_9141\"   \"BC_1478\"   \"BC_31610\"  \"BC_79755\"  #>  [7] \"BC_388103\" \"BC_257382\" \"BC_68618\"  \"BC_102160\" \"BC_4531\"   #>  #> $TopBarcodes$`S3-1` #>  [1] \"BC_79755\"  \"BC_142024\" \"BC_102160\" \"BC_183691\" \"BC_59493\"  \"BC_345889\" #>  [7] \"BC_23361\"  \"BC_70225\"  \"BC_30946\"  \"BC_159570\" #>  #> $TopBarcodes$`S3-2` #>  [1] \"BC_79755\"  \"BC_142024\" \"BC_102160\" \"BC_183691\" \"BC_59493\"  \"BC_345889\" #>  [7] \"BC_23361\"  \"BC_70225\"  \"BC_159570\" \"BC_30946\"  #>  #> $TopBarcodes$`S4-1` #>  [1] \"BC_53234\"  \"BC_58978\"  \"BC_62602\"  \"BC_68847\"  \"BC_140320\" \"BC_79755\"  #>  [7] \"BC_327422\" \"BC_36103\"  \"BC_102160\" \"BC_81579\"  \"BC_118640\" \"BC_135438\" #> [13] \"BC_205581\" \"BC_91412\"  \"BC_4564\"   \"BC_1607\"   \"BC_159570\" \"BC_468335\" #> [19] \"BC_560839\" \"BC_229324\" \"BC_49397\"  \"BC_203989\" \"BC_124796\" \"BC_8419\"   #> [25] \"BC_190202\" #>  #> $TopBarcodes$`S4-2` #>  [1] \"BC_53234\"  \"BC_58978\"  \"BC_62602\"  \"BC_68847\"  \"BC_140320\" \"BC_79755\"  #>  [7] \"BC_327422\" \"BC_36103\"  \"BC_81579\"  \"BC_102160\" \"BC_118640\" \"BC_135438\" #> [13] \"BC_1607\"   \"BC_205581\" \"BC_4564\"   \"BC_91412\"  \"BC_229324\" \"BC_560839\" #> [19] \"BC_159570\" \"BC_468335\" \"BC_49397\"  \"BC_203989\" \"BC_124796\" \"BC_8419\"   #> [25] \"BC_190202\" \"BC_23241\"  #>  #> $TopBarcodes$`S5-1` #>  [1] \"BC_561471\" \"BC_118640\" \"BC_59493\"  \"BC_1607\"   \"BC_31610\"  \"BC_23361\"  #>  [7] \"BC_159570\" \"BC_93485\"  \"BC_468335\" \"BC_81579\"  \"BC_257382\" #>  #> $TopBarcodes$`S5-2` #>  [1] \"BC_561471\" \"BC_118640\" \"BC_59493\"  \"BC_1607\"   \"BC_31610\"  \"BC_23361\"  #>  [7] \"BC_159570\" \"BC_93485\"  \"BC_81579\"  \"BC_468335\" \"BC_257382\" \"BC_21013\"  #>  #> $TopBarcodes$`S6-1` #> [1] \"BC_79755\"  \"BC_8419\"   \"BC_124796\" \"BC_4564\"   \"BC_400391\" \"BC_31610\"  #> [7] \"BC_1478\"   \"BC_90135\"  \"BC_388103\" #>  #> $TopBarcodes$`S6-2` #>  [1] \"BC_79755\"  \"BC_8419\"   \"BC_124796\" \"BC_4564\"   \"BC_400391\" \"BC_31610\"  #>  [7] \"BC_1478\"   \"BC_90135\"  \"BC_54442\"  \"BC_388103\" #>  #> $TopBarcodes$`S7-1` #>  [1] \"BC_53234\"  \"BC_54442\"  \"BC_142024\" \"BC_140320\" \"BC_93485\"  \"BC_124796\" #>  [7] \"BC_23544\"  \"BC_8419\"   \"BC_324711\" \"BC_159570\" \"BC_58978\"  \"BC_90135\"  #> [13] \"BC_345889\" \"BC_4564\"   \"BC_102160\" \"BC_400391\" #>  #> $TopBarcodes$`S7-2` #>  [1] \"BC_53234\"  \"BC_54442\"  \"BC_142024\" \"BC_140320\" \"BC_93485\"  \"BC_124796\" #>  [7] \"BC_23544\"  \"BC_8419\"   \"BC_324711\" \"BC_159570\" \"BC_58978\"  \"BC_90135\"  #> [13] \"BC_4564\"   \"BC_345889\" \"BC_102160\" \"BC_400391\" #>  #> $TopBarcodes$`S8-1` #>  [1] \"BC_142024\" \"BC_90135\"  \"BC_58978\"  \"BC_93485\"  \"BC_363879\" \"BC_4531\"   #>  [7] \"BC_205581\" \"BC_118640\" \"BC_79755\"  \"BC_31610\"  \"BC_1607\"   \"BC_82758\"  #> [13] \"BC_389078\" \"BC_194823\" \"BC_251167\" \"BC_77209\"  \"BC_68847\"  \"BC_102160\" #> [19] \"BC_4173\"   \"BC_4564\"   #>  #> $TopBarcodes$`S8-2` #>  [1] \"BC_142024\" \"BC_90135\"  \"BC_58978\"  \"BC_93485\"  \"BC_363879\" \"BC_4531\"   #>  [7] \"BC_205581\" \"BC_118640\" \"BC_79755\"  \"BC_1607\"   \"BC_31610\"  \"BC_82758\"  #> [13] \"BC_194823\" \"BC_251167\" \"BC_389078\" \"BC_68847\"  \"BC_77209\"  \"BC_102160\" #> [19] \"BC_4173\"   \"BC_4564\"   \"BC_94579\"  #>  #> $TopBarcodes$`S9-1` #>  [1] \"BC_79755\"  \"BC_4198\"   \"BC_81579\"  \"BC_560839\" \"BC_118640\" \"BC_345889\" #>  [7] \"BC_400391\" \"BC_1607\"   \"BC_319105\" \"BC_35704\"  \"BC_205581\" \"BC_90135\"  #> [13] \"BC_124796\" \"BC_8419\"   \"BC_142024\" \"BC_561471\" \"BC_68847\"  \"BC_19146\"  #> [19] \"BC_78912\"  #>  #> $TopBarcodes$`S9-2` #>  [1] \"BC_79755\"  \"BC_4198\"   \"BC_81579\"  \"BC_118640\" \"BC_560839\" \"BC_345889\" #>  [7] \"BC_400391\" \"BC_1607\"   \"BC_319105\" \"BC_35704\"  \"BC_205581\" \"BC_90135\"  #> [13] \"BC_124796\" \"BC_142024\" \"BC_8419\"   \"BC_561471\" \"BC_19146\"  \"BC_68847\"  #> [19] \"BC_78912\"  #>  #>  #> $TopBarcodeCounts #> $TopBarcodeCounts$`T0-1` #>             T0-1 #> BC_245016 235792 #> BC_121651 229674 #> BC_420967 140576 #> BC_108059 107746 #> BC_323670  93902 #> BC_9141    75789 #> BC_331193  61209 #> BC_119418  51910 #> BC_65104   45136 #> BC_17570   44290 #> BC_35704   41752 #> BC_383329  40346 #> BC_92942   39154 #> BC_24510   38403 #> BC_1396    38215 #> BC_83680   36945 #> BC_55858   31659 #> BC_38589   31330 #> BC_137495  30929 #> BC_69627   29428 #> BC_446739  27684 #> BC_171385  24017 #> BC_12367   23205 #> BC_280320  23170 #> BC_15782   22725 #> BC_310257  21578 #> BC_221975  21486 #> BC_313129  21335 #> BC_67201   18479 #> BC_3618    17186 #> BC_107789  17104 #> BC_36103   16025 #> BC_2596    15901 #> BC_69641   14140 #> BC_215831  13831 #> BC_16618   13795 #> BC_249402  13610 #> BC_141060  13535 #> BC_13611   13328 #> BC_22306   13090 #> BC_588849  13063 #> BC_43535   12925 #> BC_16956   12924 #> BC_175651  12903 #> BC_294188  12701 #> BC_46538   12667 #> BC_344050  12651 #> BC_25084   12454 #> BC_56819   12186 #> BC_206193  11681 #> BC_428803  11596 #> BC_219379  11334 #> BC_400391  11240 #> BC_19146   10980 #> BC_205581  10868 #> BC_148563  10683 #> BC_114027  10338 #> BC_172626  10332 #> BC_403084  10243 #> BC_62602   10088 #> BC_224300   9814 #> BC_47439    9520 #> BC_18278    9480 #> BC_43128    9389 #> BC_68847    9033 #> BC_111272   9008 #> BC_58978    8725 #> BC_162898   8480 #> BC_476380   8338 #> BC_262618   8324 #> BC_276866   8296 #> BC_252374   8167 #> BC_550404   8046 #> BC_325065   7949 #> BC_202891   7930 #> BC_50136    7895 #> BC_255436   7874 #> BC_103528   7849 #> BC_425129   7823 #> BC_168818   7818 #> BC_204266   7756 #> BC_176946   7643 #> BC_521149   7583 #> BC_105387   7326 #> BC_227720   7284 #> BC_83707    7266 #> BC_64584    7171 #> BC_21018    7056 #> BC_458543   7033 #> BC_11643    7000 #> BC_175871   6893 #> BC_556149   6772 #> BC_34617    6462 #> BC_166467   6460 #> BC_41692    6409 #> BC_72619    6392 #> BC_168530   6363 #> BC_289383   6347 #> BC_2040     6290 #> BC_516753   6259 #> BC_24159    6246 #> BC_249161   6223 #> BC_345717   6187 #> BC_54442    6053 #> BC_236596   6052 #> BC_248159   6033 #> BC_206263   5911 #> BC_376665   5867 #> BC_18345    5820 #> BC_114040   5760 #> BC_612467   5614 #> BC_56338    5560 #> BC_363714   5450 #> BC_39281    5389 #> BC_30946    5292 #> BC_32325    5202 #> BC_418545   5107 #> BC_103714   5093 #> BC_140320   5043 #> BC_120596   4965 #> BC_503475   4946 #> BC_160057   4936 #> BC_16754    4925 #> BC_43673    4922 #> BC_173736   4913 #> BC_46524    4874 #> BC_142999   4871 #> BC_11277    4832 #> BC_67854    4812 #> BC_258799   4694 #> BC_13395    4689 #> BC_37062    4673 #> BC_38398    4658 #> BC_105732   4622 #> BC_139928   4582 #> BC_355420   4539 #> BC_40856    4515 #> BC_128266   4473 #> BC_321677   4464 #> BC_203520   4459 #> BC_29284    4430 #> BC_172412   4416 #> BC_85441    4400 #> BC_20263    4392 #> BC_118831   4382 #> BC_10454    4369 #> BC_5256     4362 #> BC_129519   4338 #> BC_11391    4303 #> BC_172238   4298 #> BC_43123    4290 #> BC_42178    4287 #> BC_102205   4287 #> BC_346124   4265 #> BC_389078   4171 #> BC_42612    4162 #> BC_93485    4085 #> BC_415373   4064 #> BC_3733     4063 #> BC_32680    4060 #> BC_474982   4011 #> BC_7405     3964 #> BC_289568   3919 #> BC_229995   3867 #> BC_79026    3769 #> BC_45955    3742 #> BC_146666   3727 #> BC_183401   3720 #> BC_356531   3656 #> BC_187025   3625 #> BC_42310    3618 #> BC_221056   3618 #> BC_132225   3585 #> BC_235128   3561 #> BC_15740    3530 #> BC_160158   3525 #> BC_320233   3524 #> BC_8835     3492 #> BC_173674   3443 #> BC_53234    3423 #> BC_91412    3390 #> BC_135438   3390 #> BC_373901   3388 #> BC_44599    3349 #> BC_87047    3338 #> BC_350464   3324 #> BC_324711   3320 #> BC_40516    3289 #> BC_113839   3281 #> BC_162119   3281 #> BC_33699    3222 #> BC_635211   3216 #> BC_346627   3214 #> BC_7122     3142 #> BC_806      3135 #> BC_63846    3135 #> BC_283335   3111 #> BC_151544   3104 #> BC_273124   3101 #> BC_227308   3075 #> BC_47726    3060 #> BC_102803   3056 #> BC_244320   3036 #> BC_10347    3032 #> BC_389742   3009 #> BC_2865     3004 #> BC_77030    2974 #> BC_65130    2970 #> BC_564039   2950 #> BC_519985   2943 #> BC_76947    2937 #> BC_4564     2934 #> BC_521485   2933 #> BC_495859   2921 #> BC_35659    2918 #> BC_14377    2908 #> BC_199881   2905 #> BC_147006   2887 #> BC_26769    2885 #> BC_100344   2869 #> BC_672202   2856 #> BC_146146   2848 #> BC_320752   2845 #> BC_324953   2834 #> BC_217211   2830 #> BC_67965    2821 #> BC_210529   2810 #> BC_189813   2805 #> BC_242383   2801 #> BC_560839   2798 #> BC_228994   2788 #> BC_389087   2775 #> BC_44600    2762 #> BC_20557    2757 #> BC_10808    2724 #> BC_138900   2720 #> BC_81309    2702 #> BC_145719   2690 #> BC_58144    2674 #> BC_7299     2667 #> BC_78349    2666 #> BC_102160   2658 #> BC_164378   2656 #> BC_211828   2653 #> BC_336794   2649 #> BC_53380    2641 #> BC_14492    2636 #> BC_23241    2613 #> BC_57621    2609 #> BC_11270    2605 #> BC_41523    2589 #> BC_33764    2583 #> BC_12191    2564 #> BC_17608    2564 #> BC_8324     2549 #> BC_183112   2531 #> BC_167638   2509 #> BC_2206     2504 #> BC_123791   2482 #> BC_377226   2467 #> BC_195246   2447 #> BC_161563   2433 #> BC_67233    2430 #> BC_421415   2428 #> BC_150291   2424 #> BC_408928   2410 #> BC_410172   2406 #> BC_121663   2393 #> BC_201293   2368 #> BC_156353   2338 #> BC_45652    2320 #> BC_357846   2320 #> BC_199093   2308 #> BC_214878   2300 #> BC_6093     2287 #> BC_214604   2266 #> BC_302238   2250 #> BC_521264   2244 #> BC_672021   2223 #> BC_2294     2218 #> BC_587139   2212 #> BC_638624   2206 #> BC_86358    2199 #> BC_1764     2174 #> BC_366637   2171 #> BC_218093   2168 #> BC_201372   2155 #> BC_19353    2139 #> BC_130431   2134 #> BC_22999    2112 #> BC_49044    2112 #> BC_154519   2111 #> BC_324042   2110 #> BC_37363    2103 #> BC_154990   2098 #> BC_350335   2098 #> BC_194823   2051 #> BC_23522    2047 #> BC_141246   2046 #> BC_4531     2036 #> BC_4733     2025 #> BC_654016   2009 #> BC_147380   1995 #> BC_196282   1994 #> BC_52081    1980 #> BC_207651   1977 #> BC_380559   1974 #> BC_527469   1961 #> BC_353112   1959 #> BC_426662   1958 #> BC_655329   1949 #> BC_73098    1947 #> BC_146322   1937 #> BC_596629   1928 #> BC_64945    1915 #> BC_462254   1913 #> BC_261055   1909 #> BC_145403   1898 #> BC_61489    1893 #> BC_617554   1891 #> BC_228018   1882 #> BC_249649   1878 #> BC_211811   1848 #> BC_101581   1846 #> BC_43206    1833 #> BC_326596   1829 #> BC_514247   1824 #> BC_88464    1815 #> BC_203989   1815 #> BC_206798   1814 #> BC_19610    1803 #> BC_9626     1795 #> BC_116921   1791 #> BC_181554   1780 #> BC_79755    1779 #> BC_77101    1757 #> BC_55675    1755 #> BC_83816    1751 #> BC_138737   1748 #> BC_322542   1733 #> BC_318282   1731 #> BC_444573   1730 #> BC_9340     1729 #> BC_49226    1728 #> BC_57692    1721 #> BC_93884    1720 #> BC_181957   1718 #> BC_217320   1712 #> BC_296283   1710 #> BC_3583     1704 #> BC_11055    1700 #> BC_95934    1691 #> BC_88099    1685 #> BC_35283    1678 #> BC_67374    1673 #> BC_175957   1662 #> BC_266451   1658 #> BC_283541   1657 #> BC_14484    1656 #> BC_14810    1625 #> BC_157906   1624 #> BC_354350   1612 #> BC_539228   1608 #> BC_61500    1606 #> BC_45402    1602 #> BC_234390   1602 #> BC_415903   1600 #> BC_12418    1597 #> BC_238160   1597 #> BC_29208    1595 #> BC_91989    1594 #> BC_92584    1586 #> BC_351660   1583 #> BC_381245   1578 #> BC_31196    1577 #> BC_47310    1576 #> BC_20573    1573 #> BC_64931    1573 #> BC_2430     1558 #> BC_15448    1556 #> BC_94579    1552 #> BC_171953   1548 #> BC_9322     1541 #> BC_587343   1522 #> BC_50222    1505 #> BC_53219    1505 #> BC_77187    1501 #> BC_7691     1497 #> BC_225019   1495 #> BC_238577   1494 #> BC_6304     1486 #> BC_13093    1478 #> BC_154696   1469 #> BC_275321   1468 #> BC_75688    1465 #> BC_10293    1462 #> BC_13       1458 #> BC_90135    1451 #> BC_357977   1451 #> BC_4198     1446 #> BC_147556   1443 #> BC_231962   1441 #> BC_175198   1440 #> BC_144061   1433 #> BC_26258    1422 #> BC_114257   1420 #> BC_194092   1417 #> BC_31779    1413 #> BC_268745   1404 #> BC_67247    1399 #> BC_82595    1399 #> BC_103862   1393 #> BC_149347   1390 #> BC_346761   1388 #> BC_473006   1388 #> BC_49397    1378 #> BC_302454   1378 #> BC_207333   1376 #> BC_31185    1367 #> BC_115436   1367 #> BC_124624   1367 #> BC_491991   1365 #> BC_309303   1362 #> BC_12410    1359 #> BC_228333   1353 #> BC_528062   1351 #> BC_363879   1350 #> BC_70909    1346 #> BC_563624   1341 #> BC_11152    1337 #> BC_446649   1325 #> BC_129768   1310 #> BC_129559   1283 #> BC_169627   1281 #> BC_21535    1239 #> BC_516611   1235 #> BC_57582    1234 #> BC_159570   1234 #> BC_130861   1232 #> BC_48168    1215 #> BC_66948    1214 #> BC_257382   1213 #> BC_179919   1210 #> BC_15707    1204 #> BC_17509    1195 #> BC_444761   1187 #> BC_57794    1183 #> BC_147063   1183 #> BC_52856    1173 #> BC_14452    1170 #> BC_316483   1167 #> BC_186401   1162 #> BC_90599    1160 #> BC_245600   1160 #> BC_1977     1158 #> BC_99       1155 #> BC_176231   1151 #> BC_472019   1150 #> BC_292962   1147 #> BC_221691   1145 #> BC_170233   1138 #> BC_182320   1129 #> BC_381050   1120 #> BC_28938    1116 #> BC_67370    1112 #> BC_110945   1111 #> BC_195887   1104 #> BC_257523   1098 #> BC_2762     1091 #> BC_255928   1082 #> BC_355439   1074 #> BC_33035    1068 #> BC_125634   1066 #> BC_430      1060 #> BC_146760   1060 #> BC_164579   1060 #> BC_345889   1059 #> BC_142112   1057 #> BC_515934   1056 #> BC_141114   1051 #> BC_20281    1045 #> BC_322219   1037 #> BC_248582   1035 #> BC_1593     1032 #> BC_9747     1030 #> BC_82758    1022 #> BC_329007   1021 #> BC_567519   1015 #> BC_229036   1012 #> BC_50311    1010 #> BC_576338   1008 #> BC_189854   1005 #> BC_25609    1003 #> BC_56489    1000 #> BC_10190     996 #> BC_41280     994 #> BC_370968    994 #> BC_162322    984 #> BC_337697    973 #> BC_6453      968 #> BC_186267    966 #> BC_222891    961 #> BC_297704    960 #> BC_145103    958 #> BC_81579     954 #> BC_35633     951 #> BC_170407    950 #> BC_62970     946 #> BC_120505    940 #> BC_66747     935 #> BC_413466    935 #> BC_329679    930 #> BC_454109    928 #> BC_37116     926 #> BC_389378    925 #> BC_4061      922 #> BC_163063    919 #> BC_125776    911 #> BC_38465     904 #> BC_278096    904 #> BC_288976    901 #> BC_171345    900 #> BC_557872    898 #> BC_127999    897 #> BC_259621    889 #> BC_314343    889 #> BC_80020     888 #> BC_228451    888 #> BC_282868    884 #> BC_182092    882 #> BC_56792     877 #> BC_143062    877 #> BC_219703    876 #> BC_235649    876 #> BC_131019    875 #> BC_561471    870 #> BC_22981     863 #> BC_567514    861 #> BC_345175    856 #> BC_345888    853 #> BC_7076      848 #> BC_220827    845 #> BC_23213     840 #> BC_73196     839 #> BC_2142      838 #> BC_41997     838 #> BC_147873    836 #> BC_19557     835 #> BC_29053     834 #> BC_230643    832 #> BC_28077     827 #> BC_22263     825 #> BC_29984     824 #> BC_215667    819 #> BC_69571     818 #> BC_8838      813 #> BC_275938    813 #> BC_413636    808 #> BC_2791      807 #> BC_26462     807 #> BC_29222     804 #> BC_4173      794 #> BC_89937     794 #> BC_8159      793 #> BC_413271    792 #> BC_14131     791 #> BC_59243     788 #> BC_190202    786 #> BC_294271    785 #> BC_23918     784 #> BC_154806    783 #> BC_214774    775 #> BC_26384     771 #> BC_57471     763 #> BC_1534      756 #> BC_451991    755 #> BC_15172     753 #> BC_109658    747 #> BC_483925    744 #> BC_71820     743 #> BC_330625    740 #> BC_153858    737 #> BC_319910    737 #> BC_459545    737 #> BC_53645     725 #> BC_84350     724 #> BC_427925    724 #> BC_75310     721 #> BC_5615      719 #> BC_142652    719 #> BC_50626     718 #> BC_107381    718 #> BC_8715      717 #>  #> $TopBarcodeCounts$`T0-2` #>             T0-2 #> BC_245016 223791 #> BC_121651 204396 #> BC_420967 131262 #> BC_108059 100438 #> BC_323670  83518 #> BC_9141    68107 #> BC_331193  56283 #> BC_119418  48796 #> BC_65104   44721 #> BC_17570   44349 #> BC_35704   42341 #> BC_92942   40957 #> BC_383329  36775 #> BC_83680   35981 #> BC_1396    34908 #> BC_24510   32774 #> BC_55858   32560 #> BC_38589   29758 #> BC_313129  26285 #> BC_446739  26017 #> BC_137495  24915 #> BC_69627   24208 #> BC_171385  22254 #> BC_280320  22064 #> BC_221975  21961 #> BC_12367   21757 #> BC_15782   20633 #> BC_3618    18453 #> BC_310257  17985 #> BC_107789  17399 #> BC_67201   16457 #> BC_36103   14866 #> BC_215831  14499 #> BC_43535   14158 #> BC_2596    14144 #> BC_13611   13531 #> BC_294188  13083 #> BC_588849  13038 #> BC_16618   13026 #> BC_69641   12895 #> BC_22306   12188 #> BC_428803  11962 #> BC_403084  11682 #> BC_141060  11207 #> BC_205581  11081 #> BC_249402  11072 #> BC_206193  10792 #> BC_25084   10713 #> BC_344050  10657 #> BC_400391  10460 #> BC_325065  10413 #> BC_219379  10141 #> BC_46538   10026 #> BC_289383  10001 #> BC_56819    9695 #> BC_43128    9686 #> BC_175651   9683 #> BC_18278    9643 #> BC_172626   9564 #> BC_19146    9489 #> BC_47439    9482 #> BC_252374   9310 #> BC_58978    9275 #> BC_21018    8749 #> BC_521149   8625 #> BC_16956    8603 #> BC_262618   8587 #> BC_50136    8414 #> BC_202891   8319 #> BC_148563   8270 #> BC_62602    8246 #> BC_458543   8209 #> BC_68847    8165 #> BC_114027   8136 #> BC_476380   8103 #> BC_276866   7928 #> BC_111272   7720 #> BC_176946   7511 #> BC_255436   7420 #> BC_168818   7404 #> BC_550404   7402 #> BC_175871   7397 #> BC_204266   6989 #> BC_64584    6943 #> BC_425129   6929 #> BC_83707    6887 #> BC_162898   6821 #> BC_224300   6737 #> BC_103528   6556 #> BC_34617    6437 #> BC_72619    6416 #> BC_516753   6395 #> BC_105387   6368 #> BC_376665   6255 #> BC_18345    6155 #> BC_2040     6063 #> BC_168530   6045 #> BC_11643    6039 #> BC_114040   5775 #> BC_227720   5568 #> BC_556149   5485 #> BC_7405     5475 #> BC_249161   5470 #> BC_345717   5369 #> BC_363714   5357 #> BC_248159   5310 #> BC_24159    5243 #> BC_236596   5138 #> BC_16754    5126 #> BC_206263   5087 #> BC_118831   4976 #> BC_54442    4975 #> BC_41692    4943 #> BC_503475   4931 #> BC_5256     4925 #> BC_11277    4919 #> BC_67854    4806 #> BC_30946    4718 #> BC_43673    4688 #> BC_29284    4677 #> BC_85441    4668 #> BC_160057   4652 #> BC_166467   4593 #> BC_56338    4587 #> BC_20263    4536 #> BC_258799   4489 #> BC_172412   4372 #> BC_32325    4362 #> BC_321677   4354 #> BC_79026    4342 #> BC_37062    4337 #> BC_120596   4332 #> BC_203520   4274 #> BC_418545   4216 #> BC_135438   4181 #> BC_139928   4158 #> BC_160158   4131 #> BC_635211   4121 #> BC_612467   4112 #> BC_11391    4062 #> BC_564039   4055 #> BC_47726    4015 #> BC_105732   4008 #> BC_46524    3976 #> BC_53234    3974 #> BC_103714   3971 #> BC_140320   3967 #> BC_289568   3947 #> BC_415373   3915 #> BC_102803   3880 #> BC_39281    3868 #> BC_3733     3867 #> BC_172238   3845 #> BC_93485    3842 #> BC_13395    3799 #> BC_43123    3765 #> BC_2294     3755 #> BC_146666   3743 #> BC_132225   3716 #> BC_40516    3710 #> BC_173736   3708 #> BC_42612    3706 #> BC_356531   3698 #> BC_113839   3658 #> BC_519985   3646 #> BC_129519   3613 #> BC_77030    3597 #> BC_32680    3585 #> BC_183401   3585 #> BC_128266   3548 #> BC_210529   3515 #> BC_161563   3448 #> BC_355420   3440 #> BC_217211   3431 #> BC_324711   3417 #> BC_10454    3411 #> BC_91412    3399 #> BC_44599    3397 #> BC_40856    3368 #> BC_8835     3358 #> BC_142999   3334 #> BC_173674   3330 #> BC_151544   3325 #> BC_229995   3292 #> BC_346124   3257 #> BC_42310    3253 #> BC_102160   3250 #> BC_45955    3249 #> BC_15740    3246 #> BC_17608    3193 #> BC_350464   3183 #> BC_560839   3183 #> BC_389078   3178 #> BC_76947    3169 #> BC_33699    3141 #> BC_145719   3132 #> BC_42178    3119 #> BC_67233    3104 #> BC_38398    3094 #> BC_7122     3083 #> BC_410172   3047 #> BC_65130    3008 #> BC_189813   2976 #> BC_8324     2930 #> BC_324953   2909 #> BC_521485   2908 #> BC_235128   2892 #> BC_63846    2883 #> BC_320752   2881 #> BC_87047    2866 #> BC_67965    2860 #> BC_102205   2842 #> BC_242383   2833 #> BC_377226   2832 #> BC_389742   2832 #> BC_211828   2822 #> BC_273124   2790 #> BC_23522    2783 #> BC_154990   2746 #> BC_320233   2714 #> BC_41523    2674 #> BC_183112   2669 #> BC_221056   2643 #> BC_2865     2641 #> BC_672202   2641 #> BC_187025   2632 #> BC_326596   2621 #> BC_283335   2602 #> BC_336794   2593 #> BC_44600    2570 #> BC_227308   2555 #> BC_156353   2536 #> BC_207651   2528 #> BC_408928   2503 #> BC_495859   2502 #> BC_162119   2501 #> BC_64931    2488 #> BC_7299     2476 #> BC_53380    2476 #> BC_35659    2473 #> BC_101581   2466 #> BC_4733     2447 #> BC_199881   2446 #> BC_57621    2434 #> BC_373901   2422 #> BC_164378   2409 #> BC_147006   2391 #> BC_214604   2385 #> BC_45652    2368 #> BC_154519   2364 #> BC_64945    2363 #> BC_346627   2344 #> BC_201293   2343 #> BC_366637   2336 #> BC_26769    2329 #> BC_474982   2326 #> BC_206798   2324 #> BC_9340     2319 #> BC_19353    2314 #> BC_95934    2291 #> BC_20557    2289 #> BC_14377    2272 #> BC_6093     2256 #> BC_33764    2252 #> BC_389087   2245 #> BC_130861   2223 #> BC_157906   2189 #> BC_462254   2183 #> BC_244320   2179 #> BC_1764     2173 #> BC_123791   2169 #> BC_37363    2159 #> BC_86358    2140 #> BC_194823   2129 #> BC_211811   2114 #> BC_53219    2111 #> BC_421415   2111 #> BC_100344   2097 #> BC_2206     2096 #> BC_78349    2096 #> BC_221691   2096 #> BC_116921   2090 #> BC_228994   2056 #> BC_10347    2055 #> BC_514247   2053 #> BC_175198   2052 #> BC_266451   2041 #> BC_638624   2035 #> BC_4531     2033 #> BC_10808    2028 #> BC_88464    2010 #> BC_228018   2003 #> BC_196282   2000 #> BC_81309    1999 #> BC_167638   1997 #> BC_130431   1976 #> BC_346761   1975 #> BC_77101    1969 #> BC_672021   1962 #> BC_446649   1959 #> BC_12418    1958 #> BC_22999    1952 #> BC_350335   1946 #> BC_14492    1930 #> BC_806      1925 #> BC_141114   1924 #> BC_138737   1921 #> BC_10293    1918 #> BC_175957   1910 #> BC_14810    1895 #> BC_444573   1892 #> BC_521264   1892 #> BC_147380   1890 #> BC_380559   1888 #> BC_539228   1879 #> BC_162322   1873 #> BC_91989    1868 #> BC_145403   1865 #> BC_57692    1863 #> BC_61489    1859 #> BC_58144    1855 #> BC_4564     1842 #> BC_77187    1838 #> BC_121663   1816 #> BC_73098    1810 #> BC_141246   1792 #> BC_195246   1778 #> BC_49226    1777 #> BC_171953   1763 #> BC_181957   1761 #> BC_214878   1757 #> BC_182320   1748 #> BC_114257   1734 #> BC_146146   1716 #> BC_6304     1699 #> BC_181554   1696 #> BC_13093    1694 #> BC_528062   1694 #> BC_587139   1693 #> BC_55675    1691 #> BC_23241    1690 #> BC_11270    1682 #> BC_20573    1682 #> BC_29208    1670 #> BC_218093   1661 #> BC_654016   1623 #> BC_150291   1607 #> BC_292962   1600 #> BC_217320   1596 #> BC_199093   1595 #> BC_138900   1579 #> BC_225019   1578 #> BC_12191    1567 #> BC_354350   1567 #> BC_115436   1556 #> BC_99       1554 #> BC_93884    1538 #> BC_234390   1525 #> BC_527469   1520 #> BC_351660   1515 #> BC_201372   1512 #> BC_3583     1511 #> BC_19610    1508 #> BC_587343   1507 #> BC_353112   1499 #> BC_15448    1489 #> BC_357977   1482 #> BC_2430     1479 #> BC_617554   1473 #> BC_11152    1472 #> BC_31779    1461 #> BC_330625   1451 #> BC_147556   1443 #> BC_88099    1436 #> BC_2791     1426 #> BC_67247    1424 #> BC_110945   1421 #> BC_50222    1412 #> BC_147063   1403 #> BC_9626     1400 #> BC_1593     1394 #> BC_426662   1392 #> BC_413271   1390 #> BC_49044    1376 #> BC_4198     1373 #> BC_164652   1373 #> BC_125634   1369 #> BC_322542   1367 #> BC_203989   1353 #> BC_67374    1351 #> BC_45402    1343 #> BC_14484    1337 #> BC_195887   1334 #> BC_9322     1332 #> BC_415903   1331 #> BC_82595    1324 #> BC_329007   1324 #> BC_146322   1318 #> BC_261055   1311 #> BC_90135    1307 #> BC_26258    1298 #> BC_363879   1296 #> BC_515934   1290 #> BC_11055    1269 #> BC_49397    1269 #> BC_381245   1266 #> BC_309303   1253 #> BC_12410    1249 #> BC_249649   1249 #> BC_318282   1244 #> BC_57794    1243 #> BC_67370    1239 #> BC_316483   1238 #> BC_31196    1237 #> BC_357846   1230 #> BC_9747     1223 #> BC_83816    1223 #> BC_26384    1221 #> BC_52856    1219 #> BC_302454   1203 #> BC_50311    1196 #> BC_282868   1192 #> BC_61500    1190 #> BC_238577   1185 #> BC_47310    1181 #> BC_31185    1180 #> BC_283541   1179 #> BC_79755    1165 #> BC_231962   1162 #> BC_56489    1154 #> BC_120505   1153 #> BC_94579    1150 #> BC_444761   1146 #> BC_70909    1143 #> BC_296283   1140 #> BC_15652    1129 #> BC_276301   1124 #> BC_322219   1124 #> BC_169627   1121 #> BC_84350    1120 #> BC_596629   1118 #> BC_21535    1110 #> BC_52081    1108 #> BC_7691     1104 #> BC_302238   1103 #> BC_165975   1102 #> BC_14380    1101 #> BC_144061   1099 #> BC_129559   1093 #> BC_491991   1091 #> BC_43206    1083 #> BC_35459    1081 #> BC_228333   1070 #> BC_176231   1069 #> BC_75688    1063 #> BC_516611   1057 #> BC_149347   1055 #> BC_220827   1051 #> BC_207333   1049 #> BC_159570   1046 #> BC_288976   1044 #> BC_81579    1027 #> BC_44350    1025 #> BC_145103   1024 #> BC_35283    1012 #> BC_250471   1004 #> BC_97874    1000 #> BC_567519    989 #> BC_454109    988 #> BC_355439    986 #> BC_430       984 #> BC_57582     984 #> BC_48168     983 #> BC_10190     979 #> BC_19612     978 #> BC_92584     976 #> BC_212837    976 #> BC_129768    970 #> BC_345889    956 #> BC_115038    955 #> BC_228451    955 #> BC_451991    955 #> BC_179919    948 #> BC_576338    944 #> BC_655329    940 #> BC_472019    939 #> BC_168163    936 #> BC_35633     935 #> BC_257382    935 #> BC_535770    934 #> BC_329679    932 #> BC_248582    931 #> BC_62970     925 #> BC_324042    919 #> BC_18218     912 #> BC_182092    908 #> BC_142112    907 #> BC_4173      892 #> BC_100070    892 #> BC_259621    883 #> BC_567514    880 #> BC_103862    878 #> BC_28938     874 #> BC_325871    872 #> BC_49060     871 #> BC_275321    871 #> BC_186267    868 #> BC_652798    865 #> BC_1977      863 #> BC_238160    862 #> BC_189854    858 #> BC_37116     855 #> BC_255928    854 #> BC_268745    852 #> BC_23918     848 #> BC_131019    847 #> BC_171345    844 #> BC_278096    840 #> BC_13        834 #> BC_82758     833 #> BC_26097     831 #> BC_65912     831 #> BC_41280     826 #> BC_245600    824 #> BC_509872    823 #> BC_15707     821 #> BC_17509     821 #> BC_154696    821 #> BC_194092    820 #> BC_28077     816 #> BC_4165      815 #> BC_154806    813 #> BC_25609     810 #> BC_33035     807 #> BC_1139      802 #> BC_80020     802 #> BC_388103    801 #> BC_59243     795 #> BC_20281     788 #> BC_57889     788 #> BC_143062    788 #> BC_218837    784 #> BC_179997    778 #> BC_90599     776 #> BC_5615      775 #> BC_23363     774 #> BC_352645    772 #> BC_292621    762 #> BC_153858    760 #> BC_230643    759 #> BC_297704    754 #> BC_381050    751 #> BC_203210    746 #> BC_8838      738 #> BC_183115    738 #> BC_257523    737 #> BC_22263     734 #> BC_56792     733 #> BC_163063    729 #> BC_184732    723 #> BC_563624    718 #> BC_77131     713 #> BC_78760     706 #> BC_370968    706 #> BC_307924    704 #> BC_331889    704 #> BC_389378    704 #> BC_29053     702 #> BC_23213     700 #> BC_428204    700 #> BC_500299    697 #> BC_14452     696 #> BC_124624    696 #> BC_22981     694 #> BC_98171     693 #> BC_170233    692 #> BC_38465     691 #> BC_47704     691 #> BC_198370    686 #> BC_14131     683 #> BC_190202    683 #> BC_278655    683 #> BC_6453      682 #> BC_557872    681 #> BC_31562     677 #> BC_128748    676 #> BC_29984     675 #> BC_294176    673 #> BC_127999    668 #> BC_796       664 #>  #> $TopBarcodeCounts$`S10-1` #>             S10-1 #> BC_8419   1991893 #> BC_124796 1649985 #> BC_102160  203430 #>  #> $TopBarcodeCounts$`S10-2` #>             S10-2 #> BC_8419   1995956 #> BC_124796 1710825 #> BC_102160  208878 #> BC_68847    68155 #>  #> $TopBarcodeCounts$`S11-1` #>            S11-1 #> BC_53234  680240 #> BC_205581 493308 #> BC_90135  332038 #> BC_172626 257083 #> BC_58978  196664 #> BC_79755  116795 #> BC_159570 108699 #> BC_118640  73041 #> BC_31610   71654 #> BC_257382  64909 #> BC_1607    61994 #> BC_635211  58710 #> BC_4531    58679 #> BC_324711  55178 #> BC_327422  30934 #> BC_297704  27654 #> BC_194823  25858 #> BC_415460  21413 #> BC_140320  19073 #>  #> $TopBarcodeCounts$`S11-2` #>            S11-2 #> BC_53234  672838 #> BC_205581 480681 #> BC_90135  319597 #> BC_172626 226125 #> BC_58978  168069 #> BC_79755  107090 #> BC_159570 101497 #> BC_635211  67342 #> BC_118640  57323 #> BC_324711  56730 #> BC_31610   55511 #> BC_257382  55165 #> BC_4531    50457 #> BC_1607    49865 #> BC_327422  34475 #> BC_297704  22422 #> BC_194823  22402 #> BC_415460  20209 #> BC_62602   17792 #> BC_140320  16805 #>  #> $TopBarcodeCounts$`S12-1` #>             S12-1 #> BC_389078 1413816 #> BC_159570  615742 #> BC_135438  272292 #> BC_500780  246148 #> BC_79755   235092 #> BC_31610   185291 #> BC_49629   144164 #> BC_78349   134743 #> BC_118640  132924 #> BC_47726   128882 #> BC_58978   115558 #> BC_1607    108011 #> BC_245016  107080 #> BC_329679   79183 #>  #> $TopBarcodeCounts$`S12-2` #>             S12-2 #> BC_389078 1397641 #> BC_159570  557943 #> BC_135438  248280 #> BC_500780  235202 #> BC_79755   219591 #> BC_31610   171947 #> BC_49629   131663 #> BC_118640  120960 #> BC_47726   117847 #> BC_78349   109942 #> BC_245016   99030 #> BC_58978    97876 #> BC_1607     95198 #> BC_329679   74065 #>  #> $TopBarcodeCounts$`S13-1` #>             S13-1 #> BC_8419   1132876 #> BC_124796 1113617 #> BC_102160  813971 #> BC_257382  768188 #> BC_172626  112559 #> BC_345889   84734 #> BC_53234    72801 #> BC_79755    55138 #> BC_5472     54808 #> BC_205581   41262 #>  #> $TopBarcodeCounts$`S13-2` #>             S13-2 #> BC_8419   1075999 #> BC_124796 1036131 #> BC_102160  766818 #> BC_257382  724300 #> BC_172626  106215 #> BC_345889   77361 #> BC_53234    65594 #> BC_5472     52942 #> BC_79755    51810 #> BC_17608    39408 #> BC_205581   38917 #>  #> $TopBarcodeCounts$`S14-1` #>             S14-1 #> BC_90135  2015353 #> BC_388103 1491990 #> BC_31610   325001 #> BC_58978   186583 #> BC_292962  127737 #> BC_159570   82869 #>  #> $TopBarcodeCounts$`S14-2` #>             S14-2 #> BC_90135  1814510 #> BC_388103 1338206 #> BC_31610   285251 #> BC_58978   161284 #> BC_292962  125041 #> BC_159570   76636 #>  #> $TopBarcodeCounts$`S15-1` #>             S15-1 #> BC_1478   1137019 #> BC_94579   930125 #> BC_124796  490802 #> BC_8419    480465 #> BC_316204   95059 #> BC_400391   61062 #> BC_23241    42520 #>  #> $TopBarcodeCounts$`S15-2` #>             S15-2 #> BC_1478   1189434 #> BC_94579   976104 #> BC_124796  494292 #> BC_8419    486189 #> BC_316204   96050 #> BC_400391   67224 #> BC_23241    43739 #>  #> $TopBarcodeCounts$`S16-1` #>            S16-1 #> BC_53234  967214 #> BC_79755  699557 #> BC_140320 622182 #> BC_31610  355389 #> BC_248880 310481 #> BC_1478   286098 #> BC_17608  219959 #> BC_257382 191551 #> BC_345889 186661 #> BC_94511  140502 #> BC_142112 136360 #> BC_142024 111299 #> BC_91412   96497 #> BC_58978   76133 #> BC_190202  65758 #> BC_4198    51449 #> BC_68847   48868 #> BC_389078  39963 #> BC_47726   37946 #>  #> $TopBarcodeCounts$`S16-2` #>            S16-2 #> BC_53234  955906 #> BC_79755  679328 #> BC_140320 605778 #> BC_31610  351863 #> BC_248880 297737 #> BC_1478   286187 #> BC_17608  215120 #> BC_257382 192418 #> BC_345889 192200 #> BC_94511  143289 #> BC_142112 142201 #> BC_142024 111762 #> BC_91412   97112 #> BC_58978   77379 #> BC_190202  66762 #> BC_68847   51297 #> BC_4198    51154 #> BC_389078  41183 #> BC_47726   37684 #> BC_205581  34755 #>  #> $TopBarcodeCounts$`S17-1` #>             S17-1 #> BC_183691 2648948 #> BC_90135  1584269 #> BC_400391  588642 #> BC_31610   216675 #> BC_68847   146098 #>  #> $TopBarcodeCounts$`S17-2` #>             S17-2 #> BC_183691 2785778 #> BC_90135  1600044 #> BC_400391  604178 #> BC_31610   206900 #> BC_68847   158068 #> BC_53234   139785 #>  #> $TopBarcodeCounts$`S18-1` #>            S18-1 #> BC_49397  763504 #> BC_91412  419115 #> BC_159570 417080 #> BC_62602  261522 #> BC_93485  252666 #> BC_70225  234477 #> BC_79755  204363 #> BC_4564   141545 #> BC_124796 133198 #> BC_58978  124347 #> BC_8419   120698 #> BC_149935 111889 #> BC_68847  110884 #> BC_90135  103890 #> BC_4173    99281 #> BC_4469    94003 #> BC_172626  92447 #> BC_31610   86277 #> BC_383329  74354 #> BC_55960   71818 #> BC_62970   55812 #> BC_102160  51865 #> BC_244320  38874 #> BC_400391  33062 #> BC_135438  31484 #> BC_203989  21276 #> BC_81579   19900 #>  #> $TopBarcodeCounts$`S18-2` #>            S18-2 #> BC_49397  817999 #> BC_91412  443237 #> BC_159570 436654 #> BC_62602  290698 #> BC_70225  275474 #> BC_93485  270096 #> BC_79755  214481 #> BC_4564   165210 #> BC_124796 143216 #> BC_8419   137545 #> BC_58978  134487 #> BC_149935 120452 #> BC_68847  119995 #> BC_90135  116149 #> BC_4173   109548 #> BC_4469   107465 #> BC_172626  97888 #> BC_31610   96129 #> BC_383329  83812 #> BC_55960   82691 #> BC_62970   66186 #> BC_102160  58036 #> BC_244320  44322 #> BC_400391  41088 #> BC_135438  33668 #> BC_203989  25743 #> BC_133178  20613 #>  #> $TopBarcodeCounts$`S1-1` #>             S1-1 #> BC_79755  993343 #> BC_102160 714207 #> BC_59493  406903 #> BC_23361  207760 #> BC_53234  201367 #> BC_400391 189577 #> BC_142112 174047 #> BC_94511  113449 #> BC_68847   58203 #> BC_142024  56214 #> BC_23241   44498 #> BC_47310   31114 #> BC_9141    30245 #> BC_65104   28467 #>  #> $TopBarcodeCounts$`S1-2` #>              S1-2 #> BC_79755  1222013 #> BC_102160  808336 #> BC_59493   463756 #> BC_23361   256247 #> BC_53234   244541 #> BC_142112  200263 #> BC_400391  195378 #> BC_94511   143734 #> BC_68847    67285 #> BC_142024   66571 #> BC_23241    54725 #> BC_9141     39529 #> BC_47310    38718 #> BC_5472     35839 #> BC_65104    33854 #>  #> $TopBarcodeCounts$`S2-1` #>              S2-1 #> BC_248880 2011324 #> BC_65104  1426536 #> BC_9141   1346962 #> BC_1478    850892 #> BC_31610   820495 #> BC_79755   462821 #> BC_388103  216599 #> BC_257382  200090 #> BC_68618   105753 #> BC_102160   76111 #> BC_4531     54809 #> BC_90135    45785 #>  #> $TopBarcodeCounts$`S2-2` #>              S2-2 #> BC_248880 1182134 #> BC_65104   933706 #> BC_9141    932603 #> BC_1478    561478 #> BC_31610   468327 #> BC_79755   308473 #> BC_388103  133643 #> BC_257382  121541 #> BC_68618    69576 #> BC_102160   49153 #> BC_4531     31316 #>  #> $TopBarcodeCounts$`S3-1` #>              S3-1 #> BC_79755  2163553 #> BC_142024  565889 #> BC_102160  448714 #> BC_183691  203408 #> BC_59493   163823 #> BC_345889   89546 #> BC_23361    81236 #> BC_70225    56521 #> BC_30946    50953 #> BC_159570   45613 #>  #> $TopBarcodeCounts$`S3-2` #>              S3-2 #> BC_79755  2486675 #> BC_142024  696785 #> BC_102160  551728 #> BC_183691  257218 #> BC_59493   196076 #> BC_345889  107156 #> BC_23361    93503 #> BC_70225    66396 #> BC_159570   61382 #> BC_30946    59659 #>  #> $TopBarcodeCounts$`S4-1` #>             S4-1 #> BC_53234  692353 #> BC_58978  342379 #> BC_62602  280987 #> BC_68847  237132 #> BC_140320 223426 #> BC_79755  208335 #> BC_327422 190392 #> BC_36103  181458 #> BC_102160 151606 #> BC_81579  139375 #> BC_118640 132880 #> BC_135438 119051 #> BC_205581 102204 #> BC_91412   92210 #> BC_4564    91814 #> BC_1607    90610 #> BC_159570  66307 #> BC_468335  66180 #> BC_560839  64927 #> BC_229324  62954 #> BC_49397   49062 #> BC_203989  43358 #> BC_124796  38389 #> BC_8419    31905 #> BC_190202  26816 #>  #> $TopBarcodeCounts$`S4-2` #>             S4-2 #> BC_53234  507873 #> BC_58978  223666 #> BC_62602  181352 #> BC_68847  145969 #> BC_140320 144767 #> BC_79755  139330 #> BC_327422 138287 #> BC_36103  118928 #> BC_81579   96742 #> BC_102160  93245 #> BC_118640  89017 #> BC_135438  70979 #> BC_1607    66226 #> BC_205581  62591 #> BC_4564    61778 #> BC_91412   58781 #> BC_229324  40462 #> BC_560839  38271 #> BC_159570  36888 #> BC_468335  35416 #> BC_49397   34391 #> BC_203989  33235 #> BC_124796  24380 #> BC_8419    21807 #> BC_190202  17786 #> BC_23241   16442 #>  #> $TopBarcodeCounts$`S5-1` #>              S5-1 #> BC_561471 2123044 #> BC_118640  322753 #> BC_59493   268377 #> BC_1607    259730 #> BC_31610   180017 #> BC_23361   133885 #> BC_159570   48021 #> BC_93485    30112 #> BC_468335   25518 #> BC_81579    24169 #> BC_257382   24078 #>  #> $TopBarcodeCounts$`S5-2` #>              S5-2 #> BC_561471 1975938 #> BC_118640  290505 #> BC_59493   246168 #> BC_1607    224559 #> BC_31610   172466 #> BC_23361   122852 #> BC_159570   42615 #> BC_93485    30438 #> BC_81579    25799 #> BC_468335   24958 #> BC_257382   24460 #> BC_21013    23108 #>  #> $TopBarcodeCounts$`S6-1` #>              S6-1 #> BC_79755  1282572 #> BC_8419   1123900 #> BC_124796  996596 #> BC_4564    434228 #> BC_400391   84518 #> BC_31610    44921 #> BC_1478     31005 #> BC_90135    30404 #> BC_388103   28921 #>  #> $TopBarcodeCounts$`S6-2` #>              S6-2 #> BC_79755  1344442 #> BC_8419   1117015 #> BC_124796 1031266 #> BC_4564    489628 #> BC_400391  102685 #> BC_31610    41582 #> BC_1478     36862 #> BC_90135    34556 #> BC_54442    31930 #> BC_388103   30013 #>  #> $TopBarcodeCounts$`S7-1` #>             S7-1 #> BC_53234  921435 #> BC_54442  710031 #> BC_142024 472357 #> BC_140320 350076 #> BC_93485  324557 #> BC_124796 197590 #> BC_23544  186585 #> BC_8419   179578 #> BC_324711 166985 #> BC_159570 116366 #> BC_58978  106125 #> BC_90135   92285 #> BC_345889  60307 #> BC_4564    56816 #> BC_102160  52674 #> BC_400391  42639 #>  #> $TopBarcodeCounts$`S7-2` #>             S7-2 #> BC_53234  886421 #> BC_54442  680000 #> BC_142024 434889 #> BC_140320 331549 #> BC_93485  301678 #> BC_124796 177503 #> BC_23544  166526 #> BC_8419   163482 #> BC_324711 147268 #> BC_159570 104165 #> BC_58978   87248 #> BC_90135   85151 #> BC_4564    55719 #> BC_345889  55079 #> BC_102160  48773 #> BC_400391  38887 #>  #> $TopBarcodeCounts$`S8-1` #>              S8-1 #> BC_142024 1234236 #> BC_90135   711120 #> BC_58978   347497 #> BC_93485   266947 #> BC_363879  206203 #> BC_4531    151017 #> BC_205581  141328 #> BC_118640  139500 #> BC_79755   119797 #> BC_31610   102078 #> BC_1607     99159 #> BC_82758    77715 #> BC_389078   49526 #> BC_194823   49489 #> BC_251167   47114 #> BC_77209    43860 #> BC_68847    43534 #> BC_102160   35811 #> BC_4173     27438 #> BC_4564     23411 #>  #> $TopBarcodeCounts$`S8-2` #>              S8-2 #> BC_142024 1098417 #> BC_90135   613893 #> BC_58978   269454 #> BC_93485   215752 #> BC_363879  166500 #> BC_4531    125332 #> BC_205581  115375 #> BC_118640  111091 #> BC_79755   105974 #> BC_1607     80651 #> BC_31610    79449 #> BC_82758    63339 #> BC_194823   47934 #> BC_251167   43484 #> BC_389078   41208 #> BC_68847    40176 #> BC_77209    35932 #> BC_102160   27346 #> BC_4173     24198 #> BC_4564     22430 #> BC_94579    18367 #>  #> $TopBarcodeCounts$`S9-1` #>             S9-1 #> BC_79755  684599 #> BC_4198   412438 #> BC_81579  222908 #> BC_560839 190175 #> BC_118640 190072 #> BC_345889 174338 #> BC_400391 173891 #> BC_1607   124662 #> BC_319105 106683 #> BC_35704   97669 #> BC_205581  96776 #> BC_90135   55050 #> BC_124796  54709 #> BC_8419    41751 #> BC_142024  41208 #> BC_561471  36418 #> BC_68847   26528 #> BC_19146   26470 #> BC_78912   18539 #>  #> $TopBarcodeCounts$`S9-2` #>             S9-2 #> BC_79755  678991 #> BC_4198   420103 #> BC_81579  232056 #> BC_118640 198440 #> BC_560839 187828 #> BC_345889 177297 #> BC_400391 169731 #> BC_1607   132863 #> BC_319105 107906 #> BC_35704  100753 #> BC_205581  89183 #> BC_90135   56985 #> BC_124796  51211 #> BC_142024  47093 #> BC_8419    40711 #> BC_561471  35227 #> BC_19146   32473 #> BC_68847   29591 #> BC_78912   20199 #>  #>"},{"path":"https://danevass.github.io/bartools/reference/calcReplicateCorr.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate correlation between technical replicates — calcReplicateCorr","title":"Calculate correlation between technical replicates — calcReplicateCorr","text":"Calculate return list correlation paired technical replicates dataset","code":""},{"path":"https://danevass.github.io/bartools/reference/calcReplicateCorr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate correlation between technical replicates — calcReplicateCorr","text":"","code":"calcReplicateCorr(   dgeObject,   group = NULL,   corrThreshold = 0.8,   return = \"all\",   method = \"pearson\",   ignoreZero = FALSE )"},{"path":"https://danevass.github.io/bartools/reference/calcReplicateCorr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate correlation between technical replicates — calcReplicateCorr","text":"dgeObject DGEList object barcode counts technical replicates. group Column name sample metadata replicate information (string). Correlation can calculated pairs replicates. corrThreshold Threshold distinguishing good vs bad correlation technical replicates (decimal). Default = `0.8`. return values return, one `good`, `bad`, `` (string). Default = ``. method Method correlation, one `spearman`, `pearson` (string). Default = `pearson`. ignoreZero Remove barcodes replicates 0 counts calculating correlation (boolean). Including zeros can increase spearman correlation, especially samples barcodes detected. Default = `FALSE`.","code":""},{"path":"https://danevass.github.io/bartools/reference/calcReplicateCorr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate correlation between technical replicates — calcReplicateCorr","text":"Returns plot read counts per barcode (row) data frame","code":""},{"path":"https://danevass.github.io/bartools/reference/calcReplicateCorr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate correlation between technical replicates — calcReplicateCorr","text":"","code":"data(test.dge) calcReplicateCorr(test.dge, group = \"group\") #> 10_High_dose   11_Vehicle   12_Vehicle  13_Low_dose  14_Low_dose  15_Low_dose  #>    0.9998576    0.9988335    0.9992809    0.9999569    0.9999779    0.9998940  #>  16_Low_dose 17_High_dose   18_Vehicle  1_High_dose  2_High_dose  3_High_dose  #>    0.9998965    0.9998269    0.9995630    0.9990497    0.9975044    0.9997354  #>    4_Vehicle   5_Low_dose  6_High_dose    7_Vehicle    8_Vehicle   9_Low_dose  #>    0.9975635    0.9999389    0.9994988    0.9997089    0.9992883    0.9997059  #>           T0  #>    0.9983848"},{"path":"https://danevass.github.io/bartools/reference/cluster_cormat.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster correlation matrix — cluster_cormat","title":"Cluster correlation matrix — cluster_cormat","text":"cluster correlation matrix using hierarchical clustering cluster correlation matrix using hierarchical clustering","code":""},{"path":"https://danevass.github.io/bartools/reference/cluster_cormat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster correlation matrix — cluster_cormat","text":"","code":"cluster_cormat(correlation_mat)  cluster_cormat(correlation_mat)"},{"path":"https://danevass.github.io/bartools/reference/cluster_cormat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster correlation matrix — cluster_cormat","text":"correlation_mat matrix correlation values cormat matrix correlation values","code":""},{"path":"https://danevass.github.io/bartools/reference/cluster_cormat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster correlation matrix — cluster_cormat","text":"Returns matrix correlation values columns rows hierarchically clustered Returns matrix correlation values columns rows hierarchically clustered","code":""},{"path":"https://danevass.github.io/bartools/reference/collapseReplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse technical replicates — collapseReplicates","title":"Collapse technical replicates — collapseReplicates","text":"Collapse technical replicates DGEList object mean sum. Modified collapseReplicates function DESeq2 package accept DGEList objects allow collapsing replicated mean sum.","code":""},{"path":"https://danevass.github.io/bartools/reference/collapseReplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse technical replicates — collapseReplicates","text":"","code":"collapseReplicates(   dgeObject,   group,   sampleNames = NULL,   renameCols = TRUE,   showReps = FALSE,   method = \"mean\" )"},{"path":"https://danevass.github.io/bartools/reference/collapseReplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse technical replicates — collapseReplicates","text":"dgeObject DGEList object barcode counts. group Column name sample metadata group samples (string). sampleNames Optional, column name sample metadata contains unique sample names (string). provided, new column collapsed_samples added sample metadata collapsed samples renameCols Whether rename columns returned object using levels grouping factor (boolean). Default = `TRUE`. showReps Whether print replicate column names console (boolean). Default = `FALSE`. method Method collapse replicates , one `mean` `sum` (string). Default = `mean`.","code":""},{"path":"https://danevass.github.io/bartools/reference/collapseReplicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse technical replicates — collapseReplicates","text":"Returns DGE object normalised counts sample.","code":""},{"path":"https://danevass.github.io/bartools/reference/collapseReplicates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse technical replicates — collapseReplicates","text":"","code":"data(test.dge) collapseReplicates(test.dge, group = \"group\", method = \"mean\") #> An object of class \"DGEList\" #> $samples #>              Sample Experiment        Group PCR_Replicate Treatment #> 10_High_dose  S10-1    test_01 10_High_dose             1 High_dose #> 11_Vehicle    S11-1    test_01   11_Vehicle             1   Vehicle #> 12_Vehicle    S12-1    test_01   12_Vehicle             1   Vehicle #> 13_Low_dose   S13-1    test_01  13_Low_dose             1  Low_dose #> 14_Low_dose   S14-1    test_01  14_Low_dose             1  Low_dose #>                     group lib.size norm.factors #> 10_High_dose 10_High_dose  4114186            1 #> 11_Vehicle     11_Vehicle  2907500            1 #> 12_Vehicle     12_Vehicle  4202337            1 #> 13_Low_dose   13_Low_dose  4513559            1 #> 14_Low_dose   14_Low_dose  4503490            1 #> 14 more rows ... #>  #> $counts #>         Samples #> Tags     10_High_dose 11_Vehicle 12_Vehicle 13_Low_dose 14_Low_dose 15_Low_dose #>   BC_1              0          0          0           0           0           0 #>   BC_13             0          0          0           0           0           0 #>   BC_99             0          0          0           0           0           0 #>   BC_120            0          0          0           0           0           0 #>   BC_351            0          0          0           0           0           0 #>         Samples #> Tags     16_Low_dose 17_High_dose 18_Vehicle 1_High_dose 2_High_dose #>   BC_1             0            0          0           0           0 #>   BC_13            0            0          0           0           0 #>   BC_99            0            0          0         155           0 #>   BC_120           0            0          0           0           0 #>   BC_351           0            0          0           0           0 #>         Samples #> Tags     3_High_dose 4_Vehicle 5_Low_dose 6_High_dose 7_Vehicle 8_Vehicle #>   BC_1             0         0          0           0         0         0 #>   BC_13            0         0          0           0         0         0 #>   BC_99            0         0          0           0         0         0 #>   BC_120           0         0          0           0         0         0 #>   BC_351           0         0          0           0         0         0 #>         Samples #> Tags     9_Low_dose     T0 #>   BC_1            0  127.0 #>   BC_13           0 1146.0 #>   BC_99           0 1354.5 #>   BC_120          0  234.5 #>   BC_351          0    0.0 #> 1634 more rows ... #>"},{"path":"https://danevass.github.io/bartools/reference/compareAbundance.html","id":null,"dir":"Reference","previous_headings":"","what":"Barcode abundance comparison — compareAbundance","title":"Barcode abundance comparison — compareAbundance","text":"Takes DGElist list object counts samples dataframe. Finds differentially abundant barcodes two experimental conditions, using likelihood ratio test (LRT) based fitted generalized linear model (GLM) compare two nested models, typically reduced model full model, determine additional terms full model significantly improve model fit.  Additionally, computes p-values associated test statistic barcode. save results csv file returns volcano plot.","code":""},{"path":"https://danevass.github.io/bartools/reference/compareAbundance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barcode abundance comparison — compareAbundance","text":"","code":"compareAbundance(   dgeObject,   group,   condition1,   condition2,   pval = 0.05,   logFC = 2,   filename = NULL )"},{"path":"https://danevass.github.io/bartools/reference/compareAbundance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Barcode abundance comparison — compareAbundance","text":"dgeObject DGEList object barcode counts. group Column name sample metadata group samples (string). condition1 Name reference condition group column (string). condition2 Name second condition group column (string). pval Pvalue threshold volcano plot (decimal). Default = `0.05`. logFC logFC threshold volcano plot (decimal). Default = `2`. filename Optional, filename results likelihood ratio test (string).","code":""},{"path":"https://danevass.github.io/bartools/reference/compareAbundance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Barcode abundance comparison — compareAbundance","text":"Returns volcano plot csv file differentially abundant barcode results","code":""},{"path":"https://danevass.github.io/bartools/reference/compareAbundance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Barcode abundance comparison — compareAbundance","text":"compareAbundance","code":""},{"path":"https://danevass.github.io/bartools/reference/compareAbundance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Barcode abundance comparison — compareAbundance","text":"","code":"data(test.dge) compareAbundance(test.dge, group = \"Treatment\", condition1 = \"Vehicle\", condition2 = \"Low_dose\")"},{"path":"https://danevass.github.io/bartools/reference/createBarcodeObj.html","id":null,"dir":"Reference","previous_headings":"","what":"createBarcodeObj — createBarcodeObj","title":"createBarcodeObj — createBarcodeObj","text":"generate DGEList object containing barcode counts sample metadata raw counts files","code":""},{"path":"https://danevass.github.io/bartools/reference/createBarcodeObj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"createBarcodeObj — createBarcodeObj","text":"","code":"createBarcodeObj(counts.dir = \"counts/\", sampleanno = NULL)"},{"path":"https://danevass.github.io/bartools/reference/createBarcodeObj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"createBarcodeObj — createBarcodeObj","text":"counts.dir directory containing counts files per sample sampleanno annotation file detailing sample ID groups","code":""},{"path":"https://danevass.github.io/bartools/reference/createBarcodeObj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"createBarcodeObj — createBarcodeObj","text":"data frame containing barcode counts rows per sample columns.","code":""},{"path":"https://danevass.github.io/bartools/reference/filterBarcodes.html","id":null,"dir":"Reference","previous_headings":"","what":"filterBarcodes — filterBarcodes","title":"filterBarcodes — filterBarcodes","text":"Filter barcodes single-cell sample","code":""},{"path":"https://danevass.github.io/bartools/reference/filterBarcodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"filterBarcodes — filterBarcodes","text":"","code":"filterBarcodes(counts, umiCountFilter = 1, umiFractionFilter = 0.3)"},{"path":"https://danevass.github.io/bartools/reference/filterBarcodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"filterBarcodes — filterBarcodes","text":"counts Dataframe barcodes UMI counts per cell umiCountFilter Minimum number UMIs per barcode per cell umiFractionFilter Minimum fraction UMIs per barcode per cell compared dominant barcode cell (barcode supported UMIs)","code":""},{"path":"https://danevass.github.io/bartools/reference/filterBarcodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"filterBarcodes — filterBarcodes","text":"Returns data frame one row per cell ID","code":""},{"path":"https://danevass.github.io/bartools/reference/getDominantBarcodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get dominant barcodes per sample — getDominantBarcodes","title":"Get dominant barcodes per sample — getDominantBarcodes","text":"Takes DGEList dataframe barcode counts, computes proportion abundance barcode within sample returns list barcodes meeting threshold abundance per sample.","code":""},{"path":"https://danevass.github.io/bartools/reference/getDominantBarcodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get dominant barcodes per sample — getDominantBarcodes","text":"","code":"getDominantBarcodes(dgeObject, threshold = 0.05)"},{"path":"https://danevass.github.io/bartools/reference/getDominantBarcodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get dominant barcodes per sample — getDominantBarcodes","text":"dgeObject DGEList object barcode counts. threshold Proportion threshold call dominant barcodes (decimal). Default = `0.05` (.e. 5 percent).","code":""},{"path":"https://danevass.github.io/bartools/reference/getDominantBarcodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get dominant barcodes per sample — getDominantBarcodes","text":"Returns named list containing vectors dominant barcodes per sample","code":""},{"path":"https://danevass.github.io/bartools/reference/getDominantBarcodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get dominant barcodes per sample — getDominantBarcodes","text":"","code":"data(test.dge) getDominantBarcodes(test.dge, threshold = 0.05) #> $`T0-1` #> [1] \"BC_245016\" \"BC_121651\" #>  #> $`T0-2` #> [1] \"BC_245016\" \"BC_121651\" #>  #> $`S10-1` #> [1] \"BC_8419\"   \"BC_124796\" #>  #> $`S10-2` #> [1] \"BC_8419\"   \"BC_124796\" #>  #> $`S11-1` #> [1] \"BC_53234\"  \"BC_205581\" \"BC_90135\"  \"BC_172626\" \"BC_58978\"  #>  #> $`S11-2` #> [1] \"BC_53234\"  \"BC_205581\" \"BC_90135\"  \"BC_172626\" \"BC_58978\"  #>  #> $`S12-1` #> [1] \"BC_389078\" \"BC_159570\" \"BC_135438\" \"BC_500780\" \"BC_79755\"  #>  #> $`S12-2` #> [1] \"BC_389078\" \"BC_159570\" \"BC_135438\" \"BC_500780\" \"BC_79755\"  #>  #> $`S13-1` #> [1] \"BC_8419\"   \"BC_124796\" \"BC_102160\" \"BC_257382\" #>  #> $`S13-2` #> [1] \"BC_8419\"   \"BC_124796\" \"BC_102160\" \"BC_257382\" #>  #> $`S14-1` #> [1] \"BC_90135\"  \"BC_388103\" \"BC_31610\"  #>  #> $`S14-2` #> [1] \"BC_90135\"  \"BC_388103\" \"BC_31610\"  #>  #> $`S15-1` #> [1] \"BC_1478\"   \"BC_94579\"  \"BC_124796\" \"BC_8419\"   #>  #> $`S15-2` #> [1] \"BC_1478\"   \"BC_94579\"  \"BC_124796\" \"BC_8419\"   #>  #> $`S16-1` #> [1] \"BC_53234\"  \"BC_79755\"  \"BC_140320\" \"BC_31610\"  \"BC_248880\" \"BC_1478\"   #>  #> $`S16-2` #> [1] \"BC_53234\"  \"BC_79755\"  \"BC_140320\" \"BC_31610\"  \"BC_248880\" \"BC_1478\"   #>  #> $`S17-1` #> [1] \"BC_183691\" \"BC_90135\"  \"BC_400391\" #>  #> $`S17-2` #> [1] \"BC_183691\" \"BC_90135\"  \"BC_400391\" #>  #> $`S18-1` #> [1] \"BC_49397\"  \"BC_91412\"  \"BC_159570\" \"BC_62602\"  \"BC_93485\"  \"BC_70225\"  #>  #> $`S18-2` #> [1] \"BC_49397\"  \"BC_91412\"  \"BC_159570\" \"BC_62602\"  \"BC_70225\"  \"BC_93485\"  #>  #> $`S1-1` #> [1] \"BC_79755\"  \"BC_102160\" \"BC_59493\"  \"BC_23361\"  \"BC_53234\"  \"BC_400391\" #> [7] \"BC_142112\" #>  #> $`S1-2` #> [1] \"BC_79755\"  \"BC_102160\" \"BC_59493\"  \"BC_23361\"  \"BC_53234\"  #>  #> $`S2-1` #> [1] \"BC_248880\" \"BC_65104\"  \"BC_9141\"   \"BC_1478\"   \"BC_31610\"  \"BC_79755\"  #>  #> $`S2-2` #> [1] \"BC_248880\" \"BC_65104\"  \"BC_9141\"   \"BC_1478\"   \"BC_31610\"  \"BC_79755\"  #>  #> $`S3-1` #> [1] \"BC_79755\"  \"BC_142024\" \"BC_102160\" #>  #> $`S3-2` #> [1] \"BC_79755\"  \"BC_142024\" \"BC_102160\" \"BC_183691\" #>  #> $`S4-1` #> [1] \"BC_53234\"  \"BC_58978\"  \"BC_62602\"  \"BC_68847\"  \"BC_140320\" \"BC_79755\"  #>  #> $`S4-2` #> [1] \"BC_53234\"  \"BC_58978\"  \"BC_62602\"  \"BC_68847\"  \"BC_140320\" \"BC_79755\"  #> [7] \"BC_327422\" #>  #> $`S5-1` #> [1] \"BC_561471\" \"BC_118640\" \"BC_59493\"  \"BC_1607\"   #>  #> $`S5-2` #> [1] \"BC_561471\" \"BC_118640\" \"BC_59493\"  \"BC_1607\"   \"BC_31610\"  #>  #> $`S6-1` #> [1] \"BC_79755\"  \"BC_8419\"   \"BC_124796\" \"BC_4564\"   #>  #> $`S6-2` #> [1] \"BC_79755\"  \"BC_8419\"   \"BC_124796\" \"BC_4564\"   #>  #> $`S7-1` #> [1] \"BC_53234\"  \"BC_54442\"  \"BC_142024\" \"BC_140320\" \"BC_93485\"  #>  #> $`S7-2` #> [1] \"BC_53234\"  \"BC_54442\"  \"BC_142024\" \"BC_140320\" \"BC_93485\"  #>  #> $`S8-1` #> [1] \"BC_142024\" \"BC_90135\"  \"BC_58978\"  \"BC_93485\"  #>  #> $`S8-2` #> [1] \"BC_142024\" \"BC_90135\"  \"BC_58978\"  \"BC_93485\"  #>  #> $`S9-1` #> [1] \"BC_79755\"  \"BC_4198\"   \"BC_81579\"  \"BC_560839\" \"BC_118640\" \"BC_345889\" #> [7] \"BC_400391\" #>  #> $`S9-2` #> [1] \"BC_79755\"  \"BC_4198\"   \"BC_81579\"  \"BC_118640\" \"BC_560839\" \"BC_345889\" #> [7] \"BC_400391\" #>"},{"path":"https://danevass.github.io/bartools/reference/get_upper_tri.html","id":null,"dir":"Reference","previous_headings":"","what":"Get upper triangle — get_upper_tri","title":"Get upper triangle — get_upper_tri","text":"change lower triangle values mirrored matrix NA change lower triangle values mirrored matrix NA","code":""},{"path":"https://danevass.github.io/bartools/reference/get_upper_tri.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get upper triangle — get_upper_tri","text":"","code":"get_upper_tri(correlation_mat)  get_upper_tri(correlation_mat)"},{"path":"https://danevass.github.io/bartools/reference/get_upper_tri.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get upper triangle — get_upper_tri","text":"correlation_mat matrix correlation values cormat matrix correlation values","code":""},{"path":"https://danevass.github.io/bartools/reference/get_upper_tri.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get upper triangle — get_upper_tri","text":"Returns matrix correlation values lower triangle values changed NA Returns matrix correlation values lower triangle values changed NA","code":""},{"path":"https://danevass.github.io/bartools/reference/normaliseCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalise barcode counts — normaliseCounts","title":"Normalise barcode counts — normaliseCounts","text":"Normalise barcode counts within DGEList object","code":""},{"path":"https://danevass.github.io/bartools/reference/normaliseCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalise barcode counts — normaliseCounts","text":"","code":"normaliseCounts(dgeObject, method = \"CPM\", threshold = 0)"},{"path":"https://danevass.github.io/bartools/reference/normaliseCounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalise barcode counts — normaliseCounts","text":"dgeObject DGEList object barcode counts. method method normalization. One `CPM`, `TMM`, `TMMwsp`, `upperquartile` `RLE` (string). See `edgeR::calcNormFactors()`. threshold Threshold apply counts normalisation (integer). Default = `0`.","code":""},{"path":"https://danevass.github.io/bartools/reference/normaliseCounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalise barcode counts — normaliseCounts","text":"Returns DGEList object containing normalised barcode counts","code":""},{"path":"https://danevass.github.io/bartools/reference/normaliseCounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalise barcode counts — normaliseCounts","text":"","code":"data(test.dge) normaliseCounts(test.dge, method = \"CPM\", threshold = 0) #> An object of class \"DGEList\" #> $samples #>       Sample Experiment        Group PCR_Replicate Treatment        group #> T0-1    T0-1    test_01           T0             1        T0           T0 #> T0-2    T0-2    test_01           T0             2        T0           T0 #> S10-1  S10-1    test_01 10_High_dose             1 High_dose 10_High_dose #> S10-2  S10-2    test_01 10_High_dose             2 High_dose 10_High_dose #> S11-1  S11-1    test_01   11_Vehicle             1   Vehicle   11_Vehicle #>       lib.size norm.factors #> T0-1   3584606            1 #> T0-2   3349340            1 #> S10-1  4114186            1 #> S10-2  4196458            1 #> S11-1  2907500            1 #> 33 more rows ... #>  #> $counts #>         Samples #> Tags          T0-1      T0-2 S10-1 S10-2 S11-1 S11-2 S12-1 S12-2 S13-1 S13-2 #>   BC_1    48.81987  23.58674     0     0     0     0     0     0     0     0 #>   BC_13  406.73926 249.00428     0     0     0     0     0     0     0     0 #>   BC_99  322.21114 463.97201     0     0     0     0     0     0     0     0 #>   BC_120  79.50665  54.93620     0     0     0     0     0     0     0     0 #>   BC_351   0.00000   0.00000     0     0     0     0     0     0     0     0 #>         Samples #> Tags     S14-1 S14-2 S15-1 S15-2 S16-1 S16-2 S17-1 S17-2 S18-1 S18-2     S1-1 #>   BC_1       0     0     0     0     0     0     0     0     0     0  0.00000 #>   BC_13      0     0     0     0     0     0     0     0     0     0  0.00000 #>   BC_99      0     0     0     0     0     0     0     0     0     0 30.45571 #>   BC_120     0     0     0     0     0     0     0     0     0     0  0.00000 #>   BC_351     0     0     0     0     0     0     0     0     0     0  0.00000 #>         Samples #> Tags         S1-2 S2-1 S2-2 S3-1 S3-2 S4-1 S4-2 S5-1 S5-2 S6-1 S6-2 S7-1 S7-2 #>   BC_1    0.00000    0    0    0    0    0    0    0    0    0    0    0    0 #>   BC_13   0.00000    0    0    0    0    0    0    0    0    0    0    0    0 #>   BC_99  50.22587    0    0    0    0    0    0    0    0    0    0    0    0 #>   BC_120  0.00000    0    0    0    0    0    0    0    0    0    0    0    0 #>   BC_351  0.00000    0    0    0    0    0    0    0    0    0    0    0    0 #>         Samples #> Tags     S8-1 S8-2 S9-1 S9-2 #>   BC_1      0    0    0    0 #>   BC_13     0    0    0    0 #>   BC_99     0    0    0    0 #>   BC_120    0    0    0    0 #>   BC_351    0    0    0    0 #> 1634 more rows ... #>"},{"path":"https://danevass.github.io/bartools/reference/plotAbundanceLines.html","id":null,"dir":"Reference","previous_headings":"","what":"Lineplot of barcode abundances in two conditions — plotAbundanceLines","title":"Lineplot of barcode abundances in two conditions — plotAbundanceLines","text":"Takes dataframe barcode counts, computes median abundance barcode two specific conditions, line plot conditions","code":""},{"path":"https://danevass.github.io/bartools/reference/plotAbundanceLines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lineplot of barcode abundances in two conditions — plotAbundanceLines","text":"","code":"plotAbundanceLines(   dgeObject,   group,   conditions,   plotType = \"DEG\",   keep = 0.9,   nBarcodes = 10,   title = \"\" )"},{"path":"https://danevass.github.io/bartools/reference/plotAbundanceLines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lineplot of barcode abundances in two conditions — plotAbundanceLines","text":"dgeObject DGEList object barcode counts. group Column name sample metadata group samples (string). conditions Names 2 conditions group column compare (vector strings). plotType (string) `DEG` plots 10 differentially abundant barcodes. `counts` plots 5 top highest abundant barcodes condition. `log2FC` plots barcodes highest absolute log2FC (number barcodes plot given nBarcodes). Default = `DEG`. keep percentage highest abundant barcode keep (decimal). Rest barcodes filtered used plots. Default = `0.9`. nBarcodes Number barcodes plot using 'log2FC' plot type (integer). Default = `10`. title Optional, plot title (string).","code":""},{"path":"https://danevass.github.io/bartools/reference/plotAbundanceLines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lineplot of barcode abundances in two conditions — plotAbundanceLines","text":"Returns lineplot","code":""},{"path":"https://danevass.github.io/bartools/reference/plotAbundanceLines.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lineplot of barcode abundances in two conditions — plotAbundanceLines","text":"plotAbundanceLines Lineplot barcode abundances two different experimental settings","code":""},{"path":"https://danevass.github.io/bartools/reference/plotAbundanceLines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lineplot of barcode abundances in two conditions — plotAbundanceLines","text":"","code":"data(test.dge) plotAbundanceLines(test.dge, group = \"group\", conditions = c(\"T0\",\"10_High_dose\"), plotType = \"counts\")"},{"path":"https://danevass.github.io/bartools/reference/plotBARtabFilterQC.html","id":null,"dir":"Reference","previous_headings":"","what":"plotBARtabFilterQC — plotBARtabFilterQC","title":"plotBARtabFilterQC — plotBARtabFilterQC","text":"Plot filtered read percentages BARtab run folder","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBARtabFilterQC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotBARtabFilterQC — plotBARtabFilterQC","text":"","code":"plotBARtabFilterQC(   dir = NULL,   recursive = T,   patternLog = \"*filter.log\",   patternValue = \"reads\",   fullNames = T,   normalised = F,   plot = T,   title = \"BARtab Filter QC\" )"},{"path":"https://danevass.github.io/bartools/reference/plotBARtabFilterQC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotBARtabFilterQC — plotBARtabFilterQC","text":"dir directory BARtab successfuly run barcode count datasets recursive Logical. TRUE recurse regex search subdirectories#' patternLog regex string specify filter stage log files patternValue grep string log files fullNames Logical. Return full names files detected regex search normalised Logical. log10 normalise counts plot Logical. Generate plots. False returns raw data title Optional. title plots.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBARtabFilterQC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotBARtabFilterQC — plotBARtabFilterQC","text":"Returns plot / dataset containing BARtab Filtering stage QC data","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBARtabMapQC.html","id":null,"dir":"Reference","previous_headings":"","what":"plotBARtabMapQC — plotBARtabMapQC","title":"plotBARtabMapQC — plotBARtabMapQC","text":"Plot mapped read percentages BARtab run folder. Shows reads least one alignment.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBARtabMapQC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotBARtabMapQC — plotBARtabMapQC","text":"","code":"plotBARtabMapQC(   dir = NULL,   recursive = T,   patternLog = \"*bowtie.log\",   fullNames = T,   plot = T,   title = \"BARtab Mapping QC\" )"},{"path":"https://danevass.github.io/bartools/reference/plotBARtabMapQC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotBARtabMapQC — plotBARtabMapQC","text":"dir directory BARtab successfuly run barcode count datasets recursive Logical. TRUE recurse regex search subdirectories#' patternLog regex string specify filter stage log files fullNames Logical. Return full names files detected regex search plot Logical. Generate plots. False returns raw data title Optional. title plots.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBARtabMapQC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotBARtabMapQC — plotBARtabMapQC","text":"Returns plot / dataset containing BARtab Filtering stage QC data","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeBoxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Boxplot of selected barcodes — plotBarcodeBoxplot","title":"Boxplot of selected barcodes — plotBarcodeBoxplot","text":"Plots boxplot counts selected barcodes DGEList object.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeBoxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boxplot of selected barcodes — plotBarcodeBoxplot","text":"","code":"plotBarcodeBoxplot(   dgeObject,   barcodes = NULL,   group = NULL,   conditions = NULL,   trans = NULL,   point = FALSE,   violin = FALSE,   returnData = FALSE,   normalizeMethod = \"CPM\" )"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeBoxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boxplot of selected barcodes — plotBarcodeBoxplot","text":"dgeObject DGEList object normalized barcode counts. barcodes Barcodes plotted (vector strings). group Optional, column name sample metadata facet data (string). conditions Optional, specific levels group plotted (vector strings). trans Optional, transformation y-axis, e.g. `log10` (string). point Whether include points (boolean). Default = `FALSE`. violin Whether include violin plots addition box plots (boolean). Default = `FALSE`. returnData Whether return data instead plot (boolean). Default = `FALSE`. normalizeMethod Method normalizing counts (string). One `CPM`, `TMM`, `TMMwsp`, `upperquartile`, `RLE` `NULL` normalization. See `edgeR::calcNormFactors()`. Default = `CPM`.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeBoxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boxplot of selected barcodes — plotBarcodeBoxplot","text":"Returns boxplot","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeBoxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boxplot of selected barcodes — plotBarcodeBoxplot","text":"","code":"data(test.dge) plotBarcodeBoxplot(test.dge, barcodes = \"BC_190202\", group = \"Treatment\", conditions = c(\"Vehicle\", \"Low_dose\", \"High_dose\"))"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeBubble.html","id":null,"dir":"Reference","previous_headings":"","what":"plotBarcodeBubble — plotBarcodeBubble","title":"plotBarcodeBubble — plotBarcodeBubble","text":"Generate proportional bubbleplots raw count object barcodes labelled specified threshold","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeBubble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotBarcodeBubble — plotBarcodeBubble","text":"","code":"plotBarcodeBubble(   dgeObject,   title = \"Proportional Bubble Plot\",   group = NULL,   displaySamples = NULL,   displayBarcodes = NULL,   proportionCutoff = 10,   colorDominant = FALSE,   labelBarcodes = TRUE,   orderBarcodes = TRUE,   legend = TRUE )"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeBubble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotBarcodeBubble — plotBarcodeBubble","text":"dgeObject DGEList object barcode counts. title Plot title (string). Default = `Proportional Bubble Plot`. group Optional, column name sample metadata group samples (string). displaySamples Optional, vector sample names display, preserves order vector (vector strings). displayBarcodes Optional, vector barcodes display (vector strings). proportionCutoff Barcodes represented percentage within sample threshold labelled (decimal). Default = `10`. colorDominant color clones frequency `proportionCutoff` others colored grey (boolean). Default = `FALSE`. labelBarcodes Label barcodes proportion larger `proportionCutoff` sample (boolean). Default = `TRUE`. orderBarcodes Order barcodes alphanumerical (boolean). SPLINTR represents abundance  original barcode library. Default `TRUE`. legend Show legend bubble sizes (boolean). Default = `TRUE`.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeBubble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotBarcodeBubble — plotBarcodeBubble","text":"Returns bubbleplot barcodes represented proportion total pool","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeBubble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plotBarcodeBubble — plotBarcodeBubble","text":"","code":"data(test.dge) plotBarcodeBubble(test.dge, proportionCutoff = 10) #> Warning: Vectorized input to `element_text()` is not officially supported. #> ℹ Results may be unexpected or may change in future versions of ggplot2."},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCorrelation.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample to sample correlation — plotBarcodeCorrelation","title":"Sample to sample correlation — plotBarcodeCorrelation","text":"Plot sample correlation barcode sets / samples Plot sample correlation barcode sets / samples","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCorrelation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample to sample correlation — plotBarcodeCorrelation","text":"","code":"plotBarcodeCorrelation(   counts,   method = \"pearson\",   upper = T,   clustered = T,   name = \"Sample Correlation\" )  plotBarcodeCorrelation(   counts,   method = \"pearson\",   upper = T,   clustered = T,   name = \"Sample Correlation\" )"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCorrelation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample to sample correlation — plotBarcodeCorrelation","text":"counts matrix/dataframe containing raw normalised counts method correlation metric use. Refer stats::cor available options upper Logical. plot upper half matrix clustered Logical. cluster rows columns matrix name title plot dgeObject DGEList object barcode counts. title Title plot (string). Default = `Sample Correlation - method`.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCorrelation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample to sample correlation — plotBarcodeCorrelation","text":"Returns heatmap sample distances using desired clustering Returns heatmap sample distances using desired clustering","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCorrelation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample to sample correlation — plotBarcodeCorrelation","text":"","code":"data(test.dge) plotBarcodeCorrelation(test.dge)  test.mat <- matrix(rnorm(10*10,mean=0,sd=2), 10, 10) plotBarcodeCorrelation(counts = test.mat, method = \"pearson\") #> Error in plotBarcodeCorrelation(counts = test.mat, method = \"pearson\"): unused argument (counts = test.mat)"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot total counts per barcode in library — plotBarcodeCounts","title":"Plot total counts per barcode in library — plotBarcodeCounts","text":"Simple plot total read counts per barcode across samples.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot total counts per barcode in library — plotBarcodeCounts","text":"","code":"plotBarcodeCounts(dgeObject, order = FALSE, log10 = FALSE)"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot total counts per barcode in library — plotBarcodeCounts","text":"dgeObject DGE object barcode counts order Order dataset decreasing abundance (boolean). Default = `FALSE`. log10 log10 transform data. Adds pseudocount 1 (boolean). Default = `FALSE`.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot total counts per barcode in library — plotBarcodeCounts","text":"Returns plot read counts per barcode (row) data frame","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot total counts per barcode in library — plotBarcodeCounts","text":"","code":"data(test.dge) plotBarcodeCounts(test.dge)  plotBarcodeCounts(test.dge, order = TRUE, log10 = TRUE)"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCumSum.html","id":null,"dir":"Reference","previous_headings":"","what":"Barcode cumulative sum plot of a list of samples against and ordered by reference sample — plotBarcodeCumSum","title":"Barcode cumulative sum plot of a list of samples against and ordered by reference sample — plotBarcodeCumSum","text":"Takes dataframe barcode cpm counts, calculate relative abundance barcode sample. , barcodes samples ordered reference sample decreasing order cumulative sum calculated sample. Cumulative sum plotted reference sample","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCumSum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barcode cumulative sum plot of a list of samples against and ordered by reference sample — plotBarcodeCumSum","text":"","code":"plotBarcodeCumSum(dgeObject, referenceSample = NULL, samples = NULL)"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCumSum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Barcode cumulative sum plot of a list of samples against and ordered by reference sample — plotBarcodeCumSum","text":"dgeObject DGE object containing CPM counts referenceSample sample compare others samples vector sample names plotted reference sample","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCumSum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Barcode cumulative sum plot of a list of samples against and ordered by reference sample — plotBarcodeCumSum","text":"Returns plot cumulative sum read counts per barcode","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCumSum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Barcode cumulative sum plot of a list of samples against and ordered by reference sample — plotBarcodeCumSum","text":"plotBarcodeCumSum Plot cumulative sum barcode CPM counts list samples ordered sample1.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCumSum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Barcode cumulative sum plot of a list of samples against and ordered by reference sample — plotBarcodeCumSum","text":"","code":"data(test.dge) plotBarcodeCumSum(test.dge, referenceSample = 'T0-1', samples = c('T0-1','S9-1', 'S8-1'))"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeDistance.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample to sample distances — plotBarcodeDistance","title":"Sample to sample distances — plotBarcodeDistance","text":"Plot sample distances barcode sets / samples Plot sample distances barcode sets / samples","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeDistance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample to sample distances — plotBarcodeDistance","text":"","code":"plotBarcodeDistance(   dgeObject,   method = \"euclidean\",   upper = TRUE,   clustered = TRUE,   title = \"Sample Distances\" )  plotBarcodeDistance(   dgeObject,   method = \"euclidean\",   upper = TRUE,   clustered = TRUE,   title = \"Sample Distances\" )"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeDistance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample to sample distances — plotBarcodeDistance","text":"dgeObject DGEList object barcode counts. method Distance metric use (string). One \"euclidean\", \"maximum\", \"manhattan\", \"canberra\", \"binary\" \"minkowski\". Refer stats::dist details. Default = `euclidean`. upper Plot upper half matrix (boolean). Default = `TRUE`. clustered Cluster rows columns matrix (boolean). Default = `TRUE`. title Title plot (string). Default = `Sample Distances - method`. counts matrix/dataframe containing raw normalised counts name title plot","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeDistance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample to sample distances — plotBarcodeDistance","text":"Returns heatmap sample distances using desired clustering Returns heatmap sample distances using desired clustering","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeDistance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample to sample distances — plotBarcodeDistance","text":"","code":"plotBarcodeDistance(test.dge$counts) #> Error in plotBarcodeDistance(test.dge$counts): Please supply a valid DGEList object as input data(test.dge) plotBarcodeDistance(test.dge)"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeHeatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot barcode heatmap — plotBarcodeHeatmap","title":"Plot barcode heatmap — plotBarcodeHeatmap","text":"Takes DGEList barcode counts, selects n abundant barcodes per sample plots heatmap. Stars indicate abundant barcodes respective sample.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeHeatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot barcode heatmap — plotBarcodeHeatmap","text":"","code":"plotBarcodeHeatmap(   dgeObject,   topN = 5,   name = \"CPM\",   showBarcodes = FALSE,   group = NULL,   colAnnot = NULL,   discrete = FALSE,   discreteThreshold = 1,   labelTopBarcodes = TRUE )"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeHeatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot barcode heatmap — plotBarcodeHeatmap","text":"dgeObject DGEList object barcode counts. topN Number top barcodes per sample show (integer). Default = `5`. name String heatmap scale name (string). Default = `CPM`. showBarcodes Show barcode names heatmap (boolean). Default = `FALSE`. group Optional, column name sample metadata group samples (string). colAnnot List vectors assigning colours level metadata. discrete Show presence/absence barcodes instead abundance (boolean). Default = `FALSE`. discreteThreshold Threshold presence barcode samples (decimal). Default = `1`. labelTopBarcodes Label top barcodes within sample (boolean). Default = `TRUE`.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeHeatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot barcode heatmap — plotBarcodeHeatmap","text":"Returns heatmap","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeHeatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot barcode heatmap — plotBarcodeHeatmap","text":"","code":"data(test.dge) plotBarcodeHeatmap(test.dge)"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeHistogram.html","id":null,"dir":"Reference","previous_headings":"","what":"plotBarcodeHistogram — plotBarcodeHistogram","title":"plotBarcodeHistogram — plotBarcodeHistogram","text":"Generate proportional stacked bar plot barcodes raw count object n frequent barcodes labelled.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeHistogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotBarcodeHistogram — plotBarcodeHistogram","text":"","code":"plotBarcodeHistogram(   dgeObject,   topN = 10,   seedColors = 1,   samples = NULL,   orderSamples = NULL,   alphaLowFreq = 1 )"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeHistogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotBarcodeHistogram — plotBarcodeHistogram","text":"dgeObject DGEList object barcode counts. topN Number frequent barcodes show legend (integer). Default = `10`. seedColors Seed sampling colors (integer). Default = `1`. samples Samples plot (vector strings). Default . orderSamples One multiple samples order barcodes (string vector strings). Default . alphaLowFreq Alpha barcodes top n barcodes (decimal). Default = `1`.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeHistogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotBarcodeHistogram — plotBarcodeHistogram","text":"Returns stacked bar plot barcode frequencies within samples","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeHistogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plotBarcodeHistogram — plotBarcodeHistogram","text":"","code":"data(test.dge) plotBarcodeHistogram(test.dge)"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodePCA.html","id":null,"dir":"Reference","previous_headings":"","what":"Barcode PCA plot — plotBarcodePCA","title":"Barcode PCA plot — plotBarcodePCA","text":"Takes DGEList object contining barcode cpm counts performs PCA. , plots first two dimensions. Modified DESeq2 package plotPCA function","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodePCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barcode PCA plot — plotBarcodePCA","text":"","code":"plotBarcodePCA(   dgeObject,   groups = NULL,   ntop = 500,   returnData = FALSE,   pcs = c(1, 2),   batch = NULL )"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodePCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Barcode PCA plot — plotBarcodePCA","text":"dgeObject DGEList object barcode counts. groups Optional, one multiple column names sample metadata color samples (string vector strings). ntop number top variable barcodes used PCA calculation (integer). Default = `500`. returnData Return data.frame PCA calculation instead plot (boolean). Default = `FALSE`. pcs Principle components plot (vector integers length 2). Default = `c(1, 2)`. batch Optional, metadata category indicating source batch effects. used limma removeBatchEffect function prior PCA.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodePCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Barcode PCA plot — plotBarcodePCA","text":"Returns plot first two principal components dataset","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodePCA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Barcode PCA plot — plotBarcodePCA","text":"plotBarcodePCA Plot first two principal components barcode dataset","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodePCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Barcode PCA plot — plotBarcodePCA","text":"","code":"data(test.dge) plotBarcodePCA(test.dge, groups = \"Treatment\", ntop = 500, returnData = FALSE, batch = NULL)"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeRegression.html","id":null,"dir":"Reference","previous_headings":"","what":"plotBarcodeRegression — plotBarcodeRegression","title":"plotBarcodeRegression — plotBarcodeRegression","text":"Generate linear regression scatterplot two sets sample counts.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeRegression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotBarcodeRegression — plotBarcodeRegression","text":"","code":"plotBarcodeRegression(   dgeObject,   sample1 = NULL,   sample2 = NULL,   title = NULL,   trendline = TRUE,   trans = NULL,   rug = FALSE )"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeRegression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotBarcodeRegression — plotBarcodeRegression","text":"dgeObject DGEList object barcode counts. sample1 Name sample 1 (string). sample2 Name sample 2 (string). title Optional, title plot (string). trendline Include linear trendline using `stat_smooth()` (boolean). Default = `TRUE`. trans Optional, name transformation object object . rug Include geom_rug density information axes (boolean). Defaule = `FALSE`.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeRegression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotBarcodeRegression — plotBarcodeRegression","text":"Returns scatterplot two samples","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeRegression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plotBarcodeRegression — plotBarcodeRegression","text":"","code":"data(test.dge) plotBarcodeRegression(test.dge, sample1 = \"T0-1\", sample2 = \"T0-2\")"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeTimeseries.html","id":null,"dir":"Reference","previous_headings":"","what":"plotBarcodeTimeseries — plotBarcodeTimeseries","title":"plotBarcodeTimeseries — plotBarcodeTimeseries","text":"Generate proportional timeseries plot raw / normalised barcode count object.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeTimeseries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotBarcodeTimeseries — plotBarcodeTimeseries","text":"","code":"plotBarcodeTimeseries(counts, name = \"\", seed = 5, top = 50)"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeTimeseries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotBarcodeTimeseries — plotBarcodeTimeseries","text":"counts dataframe containing raw counts barcodes name desired plot title seed RNG seed top number top barcodes per sample plot","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeTimeseries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotBarcodeTimeseries — plotBarcodeTimeseries","text":"Returns bubbleplot barcodes represented proportion total pool","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeTimeseries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plotBarcodeTimeseries — plotBarcodeTimeseries","text":"","code":"data(test.dge) plotBarcodeTimeseries(test.dge[,1:4], name = \"Proportional Timeseries Plot\", seed = 5) #> Using barcode as id variables"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodesPerCell.html","id":null,"dir":"Reference","previous_headings":"","what":"plotBarcodesPerCell — plotBarcodesPerCell","title":"plotBarcodesPerCell — plotBarcodesPerCell","text":"Plot number detected barcodes per cell.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodesPerCell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotBarcodesPerCell — plotBarcodesPerCell","text":"","code":"plotBarcodesPerCell(   counts,   fraction = TRUE,   aggregated = FALSE,   notDetected = \"\",   sep = \";\" )"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodesPerCell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotBarcodesPerCell — plotBarcodesPerCell","text":"counts Dataframe barcodes UMI counts per cell SingleCellExperiment Seurat object fraction Boolean, whether plot fraction number cells aggregated Counts aggregated per cell (boolean). Default = `FALSE`. notDetected Optional, string representing detected barcode. NA always treated detected. sep Separating character used aggregation (string). Default = `;`.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodesPerCell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotBarcodesPerCell — plotBarcodesPerCell","text":"Returns plot","code":""},{"path":"https://danevass.github.io/bartools/reference/plotCellsInClusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot distribution of group across clusters — plotCellsInClusters","title":"Plot distribution of group across clusters — plotCellsInClusters","text":"Takes single cell object, grouping variable, factor within group test, ident class (.e. clusters). Plots percentage raw number cells within factor present per level ident (.e. per cluster)","code":""},{"path":"https://danevass.github.io/bartools/reference/plotCellsInClusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot distribution of group across clusters — plotCellsInClusters","text":"","code":"plotCellsInClusters(   sc.obj,   group = \"barcode\",   factor = NULL,   clusters = \"seurat_clusters\",   plot.pct = T,   plot = T )"},{"path":"https://danevass.github.io/bartools/reference/plotCellsInClusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot distribution of group across clusters — plotCellsInClusters","text":"sc.obj Single cell Seurat SingleCellExperiment object containing clusters group metadata. group column metadata (string). Default = `barcode`. factor level group test enrichment per cluster, e.g. specific barcode (string). clusters column metadata defining cluster identities cell (string). Default = `seurat_clusters` plot.pct Plot percentages (`TRUE`) raw numbers (`FALSE`) (boolean). Default = `TRUE` plot Create plot (`TRUE`) return data (`FALSE`) (boolean). Default = `TRUE`.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotCellsInClusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot distribution of group across clusters — plotCellsInClusters","text":"Returns histogram underlying plot data","code":""},{"path":"https://danevass.github.io/bartools/reference/plotCellsInClusters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot distribution of group across clusters — plotCellsInClusters","text":"Plot number percentage group per level ident single cell object","code":""},{"path":"https://danevass.github.io/bartools/reference/plotCellsPerGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot of cells per barcode — plotCellsPerGroup","title":"Plot of cells per barcode — plotCellsPerGroup","text":"Takes single cell object, grouping variable, factor within group test, ident class (.e. clusters). Per level ident performs hypergeometric testing enrichment group factor","code":""},{"path":"https://danevass.github.io/bartools/reference/plotCellsPerGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot of cells per barcode — plotCellsPerGroup","text":"","code":"plotCellsPerGroup(   sc.obj = NULL,   group = NULL,   order = TRUE,   trans = NULL,   threshold = 100,   plot = TRUE,   label = TRUE,   sep = \";\" )"},{"path":"https://danevass.github.io/bartools/reference/plotCellsPerGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot of cells per barcode — plotCellsPerGroup","text":"sc.obj single cell object Seurat SingleCellExperiment format containing group metadata group column metadata sc.obj order Logical. Rank order levels group cell number trans ggplot2. continuous scales, name transformation object object . threshold threshold number cells labels group levels appear plot Logical. Plot results return data. label Logical. Label group levels cell number threshold. ggrepel installed use geom_text_repel instead geom_text sep Separating character used aggregation (string). Default = `;`.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotCellsPerGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot of cells per barcode — plotCellsPerGroup","text":"Returns plot cell number barcode test results underlying plot data","code":""},{"path":"https://danevass.github.io/bartools/reference/plotCellsPerGroup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot of cells per barcode — plotCellsPerGroup","text":"plotCellsPerGroup Plots number cells detected barcode single cell dataset","code":""},{"path":"https://danevass.github.io/bartools/reference/plotClusterEnrichment.html","id":null,"dir":"Reference","previous_headings":"","what":"Hypergeometric test for cluster enrichment, e.g. to test whether a barcode is enriched in any cluster. — plotClusterEnrichment","title":"Hypergeometric test for cluster enrichment, e.g. to test whether a barcode is enriched in any cluster. — plotClusterEnrichment","text":"Takes single cell object, grouping variable, factor within group test, ident class (.e. clusters). Per level ident performs hypergeometric testing enrichment group factor","code":""},{"path":"https://danevass.github.io/bartools/reference/plotClusterEnrichment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hypergeometric test for cluster enrichment, e.g. to test whether a barcode is enriched in any cluster. — plotClusterEnrichment","text":"","code":"plotClusterEnrichment(   sc.obj = NULL,   group = \"barcode\",   factor = NULL,   clusters = \"seurat_clusters\",   threshold = 0.01,   order = TRUE,   plot = TRUE )"},{"path":"https://danevass.github.io/bartools/reference/plotClusterEnrichment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hypergeometric test for cluster enrichment, e.g. to test whether a barcode is enriched in any cluster. — plotClusterEnrichment","text":"sc.obj Single cell Seurat SingleCellExperiment object containing clusters group metadata. group column metadata (string). Default = `barcode`. factor level group test enrichment per cluster, e.g. specific barcode (string). clusters column metadata defining cluster identities cell (string). Default = `seurat_clusters` threshold P-value threshold hypergeometric test (decimal). Default = `0.01`. order Order clusters plot -log10 P-value (boolean). Default = `TRUE`. plot Plot hypergeometric test results return plot data (boolean). Default = `TRUE`.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotClusterEnrichment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hypergeometric test for cluster enrichment, e.g. to test whether a barcode is enriched in any cluster. — plotClusterEnrichment","text":"Returns histogram hypergeometric test results underlying plot data","code":""},{"path":"https://danevass.github.io/bartools/reference/plotClusterEnrichment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hypergeometric test for cluster enrichment, e.g. to test whether a barcode is enriched in any cluster. — plotClusterEnrichment","text":"plotClusterEnrichment Hypergeometric test enrichment specific classes cells single cell RNA-seq clusters","code":""},{"path":"https://danevass.github.io/bartools/reference/plotDetectedBarcodes.html","id":null,"dir":"Reference","previous_headings":"","what":"plotDetectedBarcodes — plotDetectedBarcodes","title":"plotDetectedBarcodes — plotDetectedBarcodes","text":"Plot total number barcodes detected sample","code":""},{"path":"https://danevass.github.io/bartools/reference/plotDetectedBarcodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotDetectedBarcodes — plotDetectedBarcodes","text":"","code":"plotDetectedBarcodes(   counts,   percentile = 0.95,   plot = T,   sample.order = NULL,   group = NULL,   title = NULL )"},{"path":"https://danevass.github.io/bartools/reference/plotDetectedBarcodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotDetectedBarcodes — plotDetectedBarcodes","text":"counts DGEList dataframe containing raw normalised barcode counts percentile desired percentile value. 95th percentile default plot Logical. plot data instead returning counts table. sample.order desired ordering samples plot group grouping field dgelist$samples color samples title desired plot title","code":""},{"path":"https://danevass.github.io/bartools/reference/plotDetectedBarcodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotDetectedBarcodes — plotDetectedBarcodes","text":"Returns histogram plot number detected barcodes per sample.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotDetectedBarcodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plotDetectedBarcodes — plotDetectedBarcodes","text":"","code":"data(test.dge) plotDetectedBarcodes(test.dge, percentile = .95)  plotDetectedBarcodes(test.dge, plot = FALSE) #>    Sample Barcodes #> 1    T0-1      593 #> 2    T0-2      590 #> 3   S10-1        3 #> 4   S10-2        4 #> 5   S11-1       19 #> 6   S11-2       20 #> 7   S12-1       14 #> 8   S12-2       14 #> 9   S13-1       10 #> 10  S13-2       11 #> 11  S14-1        6 #> 12  S14-2        6 #> 13  S15-1        7 #> 14  S15-2        7 #> 15  S16-1       19 #> 16  S16-2       20 #> 17  S17-1        5 #> 18  S17-2        6 #> 19  S18-1       27 #> 20  S18-2       27 #> 21   S1-1       14 #> 22   S1-2       15 #> 23   S2-1       12 #> 24   S2-2       11 #> 25   S3-1       10 #> 26   S3-2       10 #> 27   S4-1       25 #> 28   S4-2       26 #> 29   S5-1       11 #> 30   S5-2       12 #> 31   S6-1        9 #> 32   S6-2       10 #> 33   S7-1       16 #> 34   S7-2       16 #> 35   S8-1       20 #> 36   S8-2       21 #> 37   S9-1       19 #> 38   S9-2       19"},{"path":"https://danevass.github.io/bartools/reference/plotDivIndexes.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot diversity indices across barcode samples — plotDivIndexes","title":"Plot diversity indices across barcode samples — plotDivIndexes","text":"Plots dataframe diversity indices per sample","code":""},{"path":"https://danevass.github.io/bartools/reference/plotDivIndexes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot diversity indices across barcode samples — plotDivIndexes","text":"","code":"plotDivIndexes(   dgeObject,   div = NULL,   metric = \"shannon\",   type = \"bar\",   group = NULL )"},{"path":"https://danevass.github.io/bartools/reference/plotDivIndexes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot diversity indices across barcode samples — plotDivIndexes","text":"dgeObject DGEList object barcode counts. div Optional, precomputed diversity metrics calculated `calcDivIndexes()`. metric Diversity metric plot (string). One \"shannon\", \"simpson\", \"invsimpson\" \"gini\". Default = `shannon`. type Plot bar, point box plot (string). Default = `bar`. group Optional, column name sample metadata group samples (string).","code":""},{"path":"https://danevass.github.io/bartools/reference/plotDivIndexes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot diversity indices across barcode samples — plotDivIndexes","text":"Returns plot calculated diversity index per sample","code":""},{"path":"https://danevass.github.io/bartools/reference/plotDivIndexes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot diversity indices across barcode samples — plotDivIndexes","text":"plotDivIndexes Plots common diversity indices per sample","code":""},{"path":"https://danevass.github.io/bartools/reference/plotDivIndexes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot diversity indices across barcode samples — plotDivIndexes","text":"","code":"data(test.dge) plotDivIndexes(test.dge, group=\"Treatment\", type=\"box\")"},{"path":"https://danevass.github.io/bartools/reference/plotLibraryCumSum.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative sum plot of barcode abundances in a reference library — plotLibraryCumSum","title":"Cumulative sum plot of barcode abundances in a reference library — plotLibraryCumSum","text":"Takes dataframe barcode counts, computes median abundance barcode two specific conditions, line plot conditions","code":""},{"path":"https://danevass.github.io/bartools/reference/plotLibraryCumSum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative sum plot of barcode abundances in a reference library — plotLibraryCumSum","text":"","code":"plotLibraryCumSum(barcodes, samplename = \"Library\", cutoff = 10)"},{"path":"https://danevass.github.io/bartools/reference/plotLibraryCumSum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative sum plot of barcode abundances in a reference library — plotLibraryCumSum","text":"barcodes dataframe containing raw counts barcodes samplename sample condition interest cutoff rowsum cutoff defining rows keep","code":""},{"path":"https://danevass.github.io/bartools/reference/plotLibraryCumSum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative sum plot of barcode abundances in a reference library — plotLibraryCumSum","text":"Returns cumulative sum plot desired barcode library sample","code":""},{"path":"https://danevass.github.io/bartools/reference/plotLibraryCumSum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cumulative sum plot of barcode abundances in a reference library — plotLibraryCumSum","text":"plotLibraryCumSum Plot cumulative sum barcode abundances barcode library","code":""},{"path":"https://danevass.github.io/bartools/reference/plotLibraryDiversity.html","id":null,"dir":"Reference","previous_headings":"","what":"Lineplot of barcode abundances in two conditions — plotLibraryDiversity","title":"Lineplot of barcode abundances in two conditions — plotLibraryDiversity","text":"Takes dataframe barcode counts, computes plots abundance barcode library sample","code":""},{"path":"https://danevass.github.io/bartools/reference/plotLibraryDiversity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lineplot of barcode abundances in two conditions — plotLibraryDiversity","text":"","code":"plotLibraryDiversity(barcodes, samplename = \"Library\", cutoff = 10, skew = F)"},{"path":"https://danevass.github.io/bartools/reference/plotLibraryDiversity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lineplot of barcode abundances in two conditions — plotLibraryDiversity","text":"barcodes dataframe containing raw counts barcodes samplename sample condition interest cutoff rowsum cutoff defining rows keep skew Logical. Calculate plot library skew ratio (90th percentile / 10th percentile)","code":""},{"path":"https://danevass.github.io/bartools/reference/plotLibraryDiversity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lineplot of barcode abundances in two conditions — plotLibraryDiversity","text":"Returns barcode library frequency plot","code":""},{"path":"https://danevass.github.io/bartools/reference/plotLibraryDiversity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lineplot of barcode abundances in two conditions — plotLibraryDiversity","text":"plotLibraryDiversity Lineplot barcode abundances two different experimental settings","code":""},{"path":"https://danevass.github.io/bartools/reference/plotMetrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Violin plot of selected metric per group variable — plotMetrics","title":"Violin plot of selected metric per group variable — plotMetrics","text":"Takes single cell object, grouping variable metadata variable. Plots distribution factor per level group total number cells threshold","code":""},{"path":"https://danevass.github.io/bartools/reference/plotMetrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Violin plot of selected metric per group variable — plotMetrics","text":"","code":"plotMetrics(   sc.obj = NULL,   group = NULL,   trans = NULL,   factor = NULL,   threshold = 100,   plot = TRUE )"},{"path":"https://danevass.github.io/bartools/reference/plotMetrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Violin plot of selected metric per group variable — plotMetrics","text":"sc.obj single cell object Seurat SingleCellExperiment format containing group metadata group column metadata sc.obj containing grouping information trans ggplot2. continuous scales, name transformation object object . factor metadata field plot per level group threshold threshold number cells per level group plot plot Logical. Plot results return data.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotMetrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Violin plot of selected metric per group variable — plotMetrics","text":"Returns plot cell number barcode test results underlying plot data","code":""},{"path":"https://danevass.github.io/bartools/reference/plotMetrics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Violin plot of selected metric per group variable — plotMetrics","text":"plotMetrics Plots metric distribution selected groups single cell dataset","code":""},{"path":"https://danevass.github.io/bartools/reference/plotOrderedBubble.html","id":null,"dir":"Reference","previous_headings":"","what":"plotOrderedBubble — plotOrderedBubble","title":"plotOrderedBubble — plotOrderedBubble","text":"Generate ordered proportional bubbleplots raw count object barcodes labelled specified threshold","code":""},{"path":"https://danevass.github.io/bartools/reference/plotOrderedBubble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotOrderedBubble — plotOrderedBubble","text":"","code":"plotOrderedBubble(   dgeObject,   title = \"Proportional Bubble Plot\",   orderSample = NULL,   group = NULL,   displaySamples = NULL,   displayBarcodes = NULL,   proportionCutoff = 10,   colorDominant = FALSE,   filterCutoff = NULL,   labelBarcodes = TRUE,   legend = TRUE,   pseudoCount = FALSE )"},{"path":"https://danevass.github.io/bartools/reference/plotOrderedBubble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotOrderedBubble — plotOrderedBubble","text":"dgeObject DGEList object barcode counts. title Plot title (string). Default = `Proportional Bubble Plot`. orderSample Name sample order (string). group Optional, column name sample metadata group samples (string). displaySamples Optional, vector samples display - keep order vector. displayBarcodes Optional, vector barcodes display. proportionCutoff barcodes represented percentage within sample threshold labelled (decimal). Default = `10`. colorDominant color clones frequency `proportionCutoff` others grey (boolean). Default = `FALSE`. filterCutoff Barcodes threshold `orderSample` filtered samples (boolean). Default = `TRUE`. labelBarcodes Label barcodes proportion larger proportionCutoff sample (boolean). Default = `TRUE`. legend Show legend bubble sizes (boolean). Default = `TRUE`. pseudoCount Whether add pseudo count 1 counts display barcodes absent T0 (boolean). Requires counts normalized. Default = `FALSE`.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotOrderedBubble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotOrderedBubble — plotOrderedBubble","text":"Returns bubbleplot barcodes represented proportion total pool","code":""},{"path":"https://danevass.github.io/bartools/reference/plotOrderedBubble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plotOrderedBubble — plotOrderedBubble","text":"","code":"data(test.dge) plotOrderedBubble(test.dge, orderSample = \"T0-1\", filterCutoff = 0.001, group = \"Treatment\") #> Warning: Vectorized input to `element_text()` is not officially supported. #> ℹ Results may be unexpected or may change in future versions of ggplot2."},{"path":"https://danevass.github.io/bartools/reference/plotReadCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot sample read counts — plotReadCounts","title":"Plot sample read counts — plotReadCounts","text":"Simple plot total read counts per sample","code":""},{"path":"https://danevass.github.io/bartools/reference/plotReadCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot sample read counts — plotReadCounts","text":"","code":"plotReadCounts(   dgeObject,   group = NULL,   log10 = FALSE,   legend = TRUE,   order = TRUE )"},{"path":"https://danevass.github.io/bartools/reference/plotReadCounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot sample read counts — plotReadCounts","text":"dgeObject DGEList object barcode counts. group Optional, column name sample metadata group samples (string). log10 log10 transform output (boolean). Default = `FALSE`. legend Include legend (boolean). Default = `TRUE`. order Order samples group (boolean). Default = `TRUE`.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotReadCounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot sample read counts — plotReadCounts","text":"Returns plot read counts per column (sample) data frame","code":""},{"path":"https://danevass.github.io/bartools/reference/plotReadCounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot sample read counts — plotReadCounts","text":"","code":"data(test.dge) plotReadCounts(test.dge, group = \"Treatment\")"},{"path":"https://danevass.github.io/bartools/reference/plotSampleCumSum.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the cumulative sum of barcode abundances within samples to visualize sample diversity. — plotSampleCumSum","title":"Plot the cumulative sum of barcode abundances within samples to visualize sample diversity. — plotSampleCumSum","text":"plotSampleCumSum","code":""},{"path":"https://danevass.github.io/bartools/reference/plotSampleCumSum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the cumulative sum of barcode abundances within samples to visualize sample diversity. — plotSampleCumSum","text":"","code":"plotSampleCumSum(dgeObject, samples = NULL)"},{"path":"https://danevass.github.io/bartools/reference/plotSampleCumSum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the cumulative sum of barcode abundances within samples to visualize sample diversity. — plotSampleCumSum","text":"dgeObject DGE object barcode counts samples Sample names","code":""},{"path":"https://danevass.github.io/bartools/reference/plotSampleCumSum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the cumulative sum of barcode abundances within samples to visualize sample diversity. — plotSampleCumSum","text":"Returns cumulative sum plot","code":""},{"path":"https://danevass.github.io/bartools/reference/plotUmiFilterThresholds.html","id":null,"dir":"Reference","previous_headings":"","what":"plotUmiFilterThresholds — plotUmiFilterThresholds","title":"plotUmiFilterThresholds — plotUmiFilterThresholds","text":"Plot number cells barcodes annotated given different UMI count filter thresholds","code":""},{"path":"https://danevass.github.io/bartools/reference/plotUmiFilterThresholds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotUmiFilterThresholds — plotUmiFilterThresholds","text":"","code":"plotUmiFilterThresholds(counts)"},{"path":"https://danevass.github.io/bartools/reference/plotUmiFilterThresholds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotUmiFilterThresholds — plotUmiFilterThresholds","text":"counts Dataframe barcodes UMI counts per cell","code":""},{"path":"https://danevass.github.io/bartools/reference/plotUmiFilterThresholds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotUmiFilterThresholds — plotUmiFilterThresholds","text":"Returns plot","code":""},{"path":"https://danevass.github.io/bartools/reference/plotUmiPerBarcode.html","id":null,"dir":"Reference","previous_headings":"","what":"plotUmiPerBarcode — plotUmiPerBarcode","title":"plotUmiPerBarcode — plotUmiPerBarcode","text":"Plot number UMIs supporting frequenc barcode per cell","code":""},{"path":"https://danevass.github.io/bartools/reference/plotUmiPerBarcode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotUmiPerBarcode — plotUmiPerBarcode","text":"","code":"plotUmiPerBarcode(counts, fraction = TRUE)"},{"path":"https://danevass.github.io/bartools/reference/plotUmiPerBarcode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotUmiPerBarcode — plotUmiPerBarcode","text":"counts Dataframe barcodes UMI counts per cell fraction Boolean, whether plot fraction number cells","code":""},{"path":"https://danevass.github.io/bartools/reference/plotUmiPerBarcode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotUmiPerBarcode — plotUmiPerBarcode","text":"Returns plot","code":""},{"path":"https://danevass.github.io/bartools/reference/processBarcodeLibrary.html","id":null,"dir":"Reference","previous_headings":"","what":"processBarcodeLibrary — processBarcodeLibrary","title":"processBarcodeLibrary — processBarcodeLibrary","text":"process barcode reference file raw sequencing datasets","code":""},{"path":"https://danevass.github.io/bartools/reference/processBarcodeLibrary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"processBarcodeLibrary — processBarcodeLibrary","text":"","code":"processBarcodeLibrary(   file = NULL,   samplename = \"Barcode\",   cutoff = 10,   header = FALSE,   outdir = tempdir() )"},{"path":"https://danevass.github.io/bartools/reference/processBarcodeLibrary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"processBarcodeLibrary — processBarcodeLibrary","text":"file path starcode output barcode library samplename name reference library. prefixed barcode reference cutoff rowsum cutoff defining barcodes keep reference library header Logical. input file contain header line outdir Desired output directory save library files","code":""},{"path":"https://danevass.github.io/bartools/reference/processBarcodeLibrary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"processBarcodeLibrary — processBarcodeLibrary","text":"returns data frame containing barcode read count reference","code":""},{"path":"https://danevass.github.io/bartools/reference/readBartabCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"readBartabCounts — readBartabCounts","title":"readBartabCounts — readBartabCounts","text":"Read BARtab counts table single-cell sample","code":""},{"path":"https://danevass.github.io/bartools/reference/readBartabCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"readBartabCounts — readBartabCounts","text":"","code":"readBartabCounts(countsPath)"},{"path":"https://danevass.github.io/bartools/reference/readBartabCounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"readBartabCounts — readBartabCounts","text":"countsPath Path BARtab counts.tsv file","code":""},{"path":"https://danevass.github.io/bartools/reference/readBartabCounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"readBartabCounts — readBartabCounts","text":"Returns data frame long format cell IDs, barcodes barcode UMI counts","code":""},{"path":"https://danevass.github.io/bartools/reference/test.bartab.sc.html","id":null,"dir":"Reference","previous_headings":"","what":"Test BARtab single cell barcode annotation — test.bartab.sc","title":"Test BARtab single cell barcode annotation — test.bartab.sc","text":"table cell id, barcode, UMI counts","code":""},{"path":"https://danevass.github.io/bartools/reference/test.bartab.sc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test BARtab single cell barcode annotation — test.bartab.sc","text":"","code":"test.bartab.sc"},{"path":"https://danevass.github.io/bartools/reference/test.bartab.sc.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Test BARtab single cell barcode annotation — test.bartab.sc","text":"data frame 3000 rows 3 variables:","code":""},{"path":"https://danevass.github.io/bartools/reference/test.dge.html","id":null,"dir":"Reference","previous_headings":"","what":"Test barcode DGEList object — test.dge","title":"Test barcode DGEList object — test.dge","text":"DGEList object containing raw count information 1639 hypothetical barcodes 38 hypothetical samples","code":""},{"path":"https://danevass.github.io/bartools/reference/test.dge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test barcode DGEList object — test.dge","text":"","code":"test.dge"},{"path":"https://danevass.github.io/bartools/reference/test.dge.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Test barcode DGEList object — test.dge","text":"DGEList object containing 1639 rows 38 variables:","code":""},{"path":"https://danevass.github.io/bartools/reference/test.sce.html","id":null,"dir":"Reference","previous_headings":"","what":"Test barcode SCE object — test.sce","title":"Test barcode SCE object — test.sce","text":"SingleCellExperiment object containing single cell RNA-seq data 100 cells 100 features","code":""},{"path":"https://danevass.github.io/bartools/reference/test.sce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test barcode SCE object — test.sce","text":"","code":"test.sce"},{"path":"https://danevass.github.io/bartools/reference/test.sce.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Test barcode SCE object — test.sce","text":"SCE object 100 rows 100 variables:","code":""},{"path":"https://danevass.github.io/bartools/reference/thresholdCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Threshold counts — thresholdCounts","title":"Threshold counts — thresholdCounts","text":"Filter barcodes meeting given absolute (total read count) relative (proportion based) abundance level Optionally plot number barcodes detected using threshold sample.","code":""},{"path":"https://danevass.github.io/bartools/reference/thresholdCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Threshold counts — thresholdCounts","text":"","code":"thresholdCounts(   dgeObject,   threshold = 10,   type = \"absolute\",   minSamples = 1,   plot = FALSE,   group = NULL,   order = TRUE )"},{"path":"https://danevass.github.io/bartools/reference/thresholdCounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Threshold counts — thresholdCounts","text":"dgeObject DGEList object barcode counts. threshold threshold use. type = \"relative\", must float 0 & 1. Default = `10` type Threshold type use (string). Must one \"absolute\" \"relative\". Default = `absolute`. minSamples Minimum number samples barcode must meet threshold remain dataset (integer). Default = `1`. plot Return plot instead filtered data (boolean). Default = `FALSE`. group Optional, column name sample metadata color samples (string). order Order samples group (boolean). Default = `TRUE`.","code":""},{"path":"https://danevass.github.io/bartools/reference/thresholdCounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Threshold counts — thresholdCounts","text":"Returns filtered DGEList object.","code":""},{"path":"https://danevass.github.io/bartools/reference/thresholdCounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Threshold counts — thresholdCounts","text":"","code":"data(test.dge) thresholdCounts(test.dge, type = \"absolute\", threshold = 10) #> DGEList dimensions pre-threshold #> [1] 1639   38 #> DGEList dimensions post-threshold #> [1] 1462   38 #> An object of class \"DGEList\" #> $samples #>       Sample Experiment        Group PCR_Replicate Treatment        group #> T0-1    T0-1    test_01           T0             1        T0           T0 #> T0-2    T0-2    test_01           T0             2        T0           T0 #> S10-1  S10-1    test_01 10_High_dose             1 High_dose 10_High_dose #> S10-2  S10-2    test_01 10_High_dose             2 High_dose 10_High_dose #> S11-1  S11-1    test_01   11_Vehicle             1   Vehicle   11_Vehicle #>       lib.size norm.factors Sample BC.count #> T0-1   3584606            1   T0-1     1359 #> T0-2   3349340            1   T0-2     1364 #> S10-1  4114186            1  S10-1       78 #> S10-2  4196458            1  S10-2       76 #> S11-1  2907500            1  S11-1       88 #> 33 more rows ... #>  #> $counts #>         Samples #> Tags     T0-1 T0-2 S10-1 S10-2 S11-1 S11-2 S12-1 S12-2 S13-1 S13-2 S14-1 S14-2 #>   BC_1    175   79     0     0     0     0     0     0     0     0     0     0 #>   BC_13  1458  834     0     0     0     0     0     0     0     0     0     0 #>   BC_99  1155 1554     0     0     0     0     0     0     0     0     0     0 #>   BC_120  285  184     0     0     0     0     0     0     0     0     0     0 #>   BC_426  116   46     0     0     0     0     0     0     0     0     0     0 #>         Samples #> Tags     S15-1 S15-2 S16-1 S16-2 S17-1 S17-2 S18-1 S18-2 S1-1 S1-2 S2-1 S2-2 #>   BC_1       0     0     0     0     0     0     0     0    0    0    0    0 #>   BC_13      0     0     0     0     0     0     0     0    0    0    0    0 #>   BC_99      0     0     0     0     0     0     0     0  105  205    0    0 #>   BC_120     0     0     0     0     0     0     0     0    0    0    0    0 #>   BC_426     0     0     0     0     0     0     0     0    0    0    0    0 #>         Samples #> Tags     S3-1 S3-2 S4-1 S4-2 S5-1 S5-2 S6-1 S6-2 S7-1 S7-2 S8-1 S8-2 S9-1 S9-2 #>   BC_1      0    0    0    0    0    0    0    0    0    0    0    0    0    0 #>   BC_13     0    0    0    0    0    0    0    0    0    0    0    0    0    0 #>   BC_99     0    0    0    0    0    0    0    0    0    0    0    0    0    0 #>   BC_120    0    0    0    0    0    0    0    0    0    0    0    0    0    0 #>   BC_426    0    0    0    0    0    0    0    0    0    0    0    0    0    0 #> 1457 more rows ... #>  thresholdCounts(test.dge, type = \"absolute\", threshold = 10, plot = TRUE) #> DGEList dimensions pre-threshold #> [1] 1639   38 #> DGEList dimensions post-threshold #> [1] 1462   38"},{"path":"https://danevass.github.io/bartools/news/index.html","id":"bartools-100","dir":"Changelog","previous_headings":"","what":"bartools 1.0.0","title":"bartools 1.0.0","text":"Updated function parameter inputs across whole package Updated quickstart vignette, added single-cell vignette Added functions aggregateBarcodes, filterBarcodes, plotUmiFilterThresholds, plotUmiPerBarcode, readBartabCounts, plotBarcodesPerCell single-cell data plotSampleCumSum bulk data removed deprecated plotLibraryCumSum, plotLibraryDiversity, proportionalBubbleplot","code":""},{"path":"https://danevass.github.io/bartools/news/index.html","id":"bartools-025","dir":"Changelog","previous_headings":"","what":"bartools 0.2.5","title":"bartools 0.2.5","text":"Added single cell QC plotting functions plotCellsPerGroup, plotMetrics, plotClusterEnrichment, plotCellsinClusters","code":""},{"path":"https://danevass.github.io/bartools/news/index.html","id":"bartools-024","dir":"Changelog","previous_headings":"","what":"bartools 0.2.4","title":"bartools 0.2.4","text":"Updated plotting functions plotBarcodeBoxplot, plotAbundanceLines","code":""},{"path":"https://danevass.github.io/bartools/news/index.html","id":"bartools-023","dir":"Changelog","previous_headings":"","what":"bartools 0.2.3","title":"bartools 0.2.3","text":"Removed deprecated single cell workflows package (workflow now BARtab) Updated plotting functions plotOrderedBubble, plotBarcodeBubble, plotBarcodeHeatmap","code":""},{"path":"https://danevass.github.io/bartools/news/index.html","id":"bartools-022","dir":"Changelog","previous_headings":"","what":"bartools 0.2.2","title":"bartools 0.2.2","text":"Added dose escalation test dataset package","code":""},{"path":"https://danevass.github.io/bartools/news/index.html","id":"bartools-021","dir":"Changelog","previous_headings":"","what":"bartools 0.2.1","title":"bartools 0.2.1","text":"Updated plotting functions","code":""},{"path":"https://danevass.github.io/bartools/news/index.html","id":"bartools-020","dir":"Changelog","previous_headings":"","what":"bartools 0.2.0","title":"bartools 0.2.0","text":"Updated plotDetectedBarcodes color reorder factors according user input. Updated quickstart vignette detailing complete analysis workflow.","code":""},{"path":"https://danevass.github.io/bartools/news/index.html","id":"bartools-010","dir":"Changelog","previous_headings":"","what":"bartools 0.1.0","title":"bartools 0.1.0","text":"Updated plotBarcodeTimeseries take top n barcodes. Speeds plotting focusing barcodes interest","code":""},{"path":"https://danevass.github.io/bartools/news/index.html","id":"bartools-010-1","dir":"Changelog","previous_headings":"","what":"bartools 0.1.0","title":"bartools 0.1.0","text":"Included current versions plotting functions package. Added NEWS.md file track changes package.","code":""}]
