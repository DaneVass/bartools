[{"path":[]},{"path":"https://danevass.github.io/bartools/articles/preprocessing.html","id":"getting-started","dir":"Articles","previous_headings":"Cellular Barcoding Dataset Preprocessing","what":"Getting started","title":"bartools: preprocessing datasets ","text":"first step cellular barcoding analysis extract barcode containing reads high throughput sequencing datasets count number barcode within sample. bartools package optimised use SPLINTR lineage barcode libraries (See Fennell Vassiliadis et al. Nature 2021) however functions within can adapted DNA barcoding methodologies use randomised DNA barcodes.","code":""},{"path":"https://danevass.github.io/bartools/articles/preprocessing.html","id":"the-reference-barcode-library","dir":"Articles","previous_headings":"Cellular Barcoding Dataset Preprocessing","what":"The reference barcode library","title":"bartools: preprocessing datasets ","text":"current version, bartools assumes barcoding experiment uses known reference library barcodes. Since DNA barcodes generally introduced cells using viral vectors, plasmid pool used generate barcode virus represents reference set barcodes can present experiment. primary step barcoding analysis determine barcodes present reference pool proportion. case SPLINTR, barcodes take following form: lower case sequence represents upstream downstream constant regions critical accurately retrieving barcodes genomic DNA cells. Load bartools library","code":"tgaccatgtacgattgactaNNSWSNNWSWNNSWSNNWSWNNSWSNNWSWNNSWSNNWSWNNSWSNNWSWNNSWSNNWSWtgctaatgcgtactg library(bartools) #> Loading required package: edgeR #> Loading required package: limma #> Loading required package: ggplot2"},{"path":"https://danevass.github.io/bartools/articles/preprocessing.html","id":"barcode-pre-processing","dir":"Articles","previous_headings":"Cellular Barcoding Dataset Preprocessing","what":"Barcode pre-processing","title":"bartools: preprocessing datasets ","text":"Barcode information can extracted raw fastq files summarised table counts per barcode follows Firstly define expected barcode pattern upstream downstream constant regions flank true barcodes. extract reads containing barcode pattern using extractBarcodeReads function Following barcode extraction make use previously generated library reference barcodes map extracted sequences reference using mapBarcodeReads. True barcodes align without mismatches. Reads containing sequencing errors false barcode sequences snuck extraction step filtered . bowtie reference yet generated can specify reference_fasta place bowtie_index generated automatically. mapBarcodeReads counts number occurrences barcode saves output file. can easily load examine final count data .","code":"pattern <- \"([ACTG][ACTG][GC][AT][GC][ACTG][ACTG][AT][GC][AT]){3,6}\" fastq <- system.file(\"extdata\", \"test_extract_75bp_single-end.fastq.gz\", package = \"bartools\", mustWork = T) constant <- toupper(\"tgaccatgtacgattgacta\") test.extract <- bartools::extractbartoolseads(infile = fastq,                                barcode_pattern = pattern,                               constant = constant,                                yieldSize = 1e6) test.extract test.map <- bartools::mapbartoolseads(reads = test.extract,                                       bowtie_index = \"../data/bowtie/index\",                                       mismatches = 1,                                       threads = 1,                                       prefix = \"test_map\") test.map reference.fa <- system.file(\"extdata\", \"barcode_lib_reference_test.fasta\", package = \"bartools\", mustWork = T) test.map <- bartools::mapBarcodeReads(reads = test.extract,                                       bowtie_index = NULL,                                       reference_fasta = reference.fa,                                       mismatches = 1, # maximum 3 mismatches                                       threads = 2,                                       prefix = \"test_map\") test.map test.counts <- utils::read.delim(\"./test_map_counts.csv\", header = T, sep = \",\", row.names = 1) test.counts %>% tibble::rownames_to_column() %>% dplyr::arrange(dplyr::desc(mapped))"},{"path":"https://danevass.github.io/bartools/articles/preprocessing.html","id":"alternative-pre-processing-workflow-using-bartab","dir":"Articles","previous_headings":"Cellular Barcoding Dataset Preprocessing","what":"Alternative pre-processing workflow using BARtab","title":"bartools: preprocessing datasets ","text":"large numbers samples can cumbersome time consuming process raw count data within R shown . efficient process samples generate count tables using pipeline can distributed across HPC infrastructure developed BARtab, Nextflow pipeline preprocessing DNA barcoding datasets bulk single-cell experiments. pipeline associated running instructions can found https://github.com/DaneVass/BARtab.","code":""},{"path":"https://danevass.github.io/bartools/articles/preprocessing.html","id":"session-info","dir":"Articles","previous_headings":"Cellular Barcoding Dataset Preprocessing","what":"Session Info","title":"bartools: preprocessing datasets ","text":"","code":"sessionInfo() #> R version 4.2.2 (2022-10-31) #> Platform: aarch64-apple-darwin20 (64-bit) #> Running under: macOS Ventura 13.1 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRblas.0.dylib #> LAPACK: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRlapack.dylib #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] bartools_0.2.3 ggplot2_3.4.2  edgeR_3.40.2   limma_3.54.2   #>  #> loaded via a namespace (and not attached): #>  [1] locfit_1.5-9.8    tidyselect_1.2.0  xfun_0.39         bslib_0.5.0       #>  [5] purrr_1.0.1       splines_4.2.2     lattice_0.21-8    colorspace_2.1-0  #>  [9] vctrs_0.6.3       generics_0.1.3    htmltools_0.5.5   mgcv_1.9-0        #> [13] yaml_2.3.7        utf8_1.2.3        rlang_1.1.1       pkgdown_2.0.7     #> [17] jquerylib_0.1.4   pillar_1.9.0      glue_1.6.2        withr_2.5.0       #> [21] lifecycle_1.0.3   stringr_1.5.0     munsell_0.5.0     gtable_0.3.3      #> [25] ragg_1.2.5        memoise_2.0.1     evaluate_0.21     knitr_1.43        #> [29] permute_0.9-7     fastmap_1.1.1     parallel_4.2.2    fansi_1.0.4       #> [33] Rcpp_1.0.11       scales_1.2.1      cachem_1.0.8      vegan_2.6-4       #> [37] desc_1.4.2        jsonlite_1.8.7    ineq_0.2-13       systemfonts_1.0.4 #> [41] fs_1.6.2          textshaping_0.3.6 digest_0.6.33     stringi_1.7.12    #> [45] dplyr_1.1.2       grid_4.2.2        rprojroot_2.0.3   cli_3.6.1         #> [49] tools_4.2.2       magrittr_2.0.3    sass_0.4.6        tibble_3.2.1      #> [53] cluster_2.1.4     pkgconfig_2.0.3   Matrix_1.6-0      MASS_7.3-60       #> [57] rmarkdown_2.23    rstudioapi_0.15.0 R6_2.5.1          nlme_3.1-162      #> [61] compiler_4.2.2"},{"path":"https://danevass.github.io/bartools/articles/quickstart.html","id":"bartools-quickstart-guide","dir":"Articles","previous_headings":"","what":"Bartools Quickstart Guide","title":"bartools: quickstart guide","text":"Load bartools library","code":"library(bartools) ## Loading required package: edgeR ## Loading required package: limma ## Loading required package: ggplot2"},{"path":"https://danevass.github.io/bartools/articles/quickstart.html","id":"importing-dna-barcode-count-data","dir":"Articles","previous_headings":"Bartools Quickstart Guide","what":"1. Importing DNA barcode count data","title":"bartools: quickstart guide","text":"Raw barcode count data can thought similarly raw integer-based count data count based experiments RNA-sequencing. data types edgeR package provides efficient DGEList object structure store sample counts associated metadata. bartools makes use object structure store process DNA barcode counts.","code":""},{"path":"https://danevass.github.io/bartools/articles/quickstart.html","id":"an-example-barcoding-experiment","dir":"Articles","previous_headings":"Bartools Quickstart Guide > 1. Importing DNA barcode count data","what":"An example barcoding experiment","title":"bartools: quickstart guide","text":"section make use hypothetical DNA barcoding dataset based recent unpublished data Dawson lab investigating response acute myeloid leukaemia (AML) cells novel class MYST acetyltransferase inhibitor described recently MacPherson et al. Nature 2019. AML cells cultured vitro, barcoded using lentiviral based barcoding library called SPLINTR, transplanted three groups C57BL/6J mice daily dosing MYST inhibitor low high dose corresponding vehicle control. Barcode samples harvested bone marrow moribund mice sequenced technical replicate replicate. follow along vignette raw counts tables sample metadata included bartools package.","code":"data(test.dge)"},{"path":"https://danevass.github.io/bartools/articles/quickstart.html","id":"generating-a-dgelist-object-from-sample-counts-and-metadata","dir":"Articles","previous_headings":"Bartools Quickstart Guide > 1. Importing DNA barcode count data","what":"Generating a DGEList object from sample counts and metadata","title":"bartools: quickstart guide","text":"Counts objects defined can specified sample metadata sheet shown . easiest way generate DGEList object containing count information metadata interest set barcode sequencing samples. example process shown . Load counts specified samplesheet DGEList object results creation DGEList object containing counts metadata information sample","code":"samplesheet <- read.csv(system.file(\"extdata\", \"test_sampletable.csv\", package = \"bartools\", mustWork = T), header = T, stringsAsFactors = F) samplesheet dge <- edgeR::readDGE(files = samplesheet, group = samplesheet$treatment, labels = samplesheet$sample, header = T) data(test.dge) test.dge ## An object of class \"DGEList\" ## $samples ##       Sample Experiment        Group PCR_Replicate Treatment        group ## T0-1    T0-1    test_01           T0             1        T0           T0 ## T0-2    T0-2    test_01           T0             2        T0           T0 ## S10-1  S10-1    test_01 10_High_dose             1 High_dose 10_High_dose ## S10-2  S10-2    test_01 10_High_dose             2 High_dose 10_High_dose ## S11-1  S11-1    test_01   11_Vehicle             1   Vehicle   11_Vehicle ##       lib.size norm.factors ## T0-1   3584606            1 ## T0-2   3349340            1 ## S10-1  4114186            1 ## S10-2  4196458            1 ## S11-1  2907500            1 ## 33 more rows ... ##  ## $counts ##         Samples ## Tags     T0-1 T0-2 S10-1 S10-2 S11-1 S11-2 S12-1 S12-2 S13-1 S13-2 S14-1 S14-2 ##   BC_1    175   79     0     0     0     0     0     0     0     0     0     0 ##   BC_13  1458  834     0     0     0     0     0     0     0     0     0     0 ##   BC_99  1155 1554     0     0     0     0     0     0     0     0     0     0 ##   BC_120  285  184     0     0     0     0     0     0     0     0     0     0 ##   BC_351    0    0     0     0     0     0     0     0     0     0     0     0 ##         Samples ## Tags     S15-1 S15-2 S16-1 S16-2 S17-1 S17-2 S18-1 S18-2 S1-1 S1-2 S2-1 S2-2 ##   BC_1       0     0     0     0     0     0     0     0    0    0    0    0 ##   BC_13      0     0     0     0     0     0     0     0    0    0    0    0 ##   BC_99      0     0     0     0     0     0     0     0  105  205    0    0 ##   BC_120     0     0     0     0     0     0     0     0    0    0    0    0 ##   BC_351     0     0     0     0     0     0     0     0    0    0    0    0 ##         Samples ## Tags     S3-1 S3-2 S4-1 S4-2 S5-1 S5-2 S6-1 S6-2 S7-1 S7-2 S8-1 S8-2 S9-1 S9-2 ##   BC_1      0    0    0    0    0    0    0    0    0    0    0    0    0    0 ##   BC_13     0    0    0    0    0    0    0    0    0    0    0    0    0    0 ##   BC_99     0    0    0    0    0    0    0    0    0    0    0    0    0    0 ##   BC_120    0    0    0    0    0    0    0    0    0    0    0    0    0    0 ##   BC_351    0    0    0    0    0    0    0    0    0    0    0    0    0    0 ## 1634 more rows ..."},{"path":[]},{"path":"https://danevass.github.io/bartools/articles/quickstart.html","id":"data-qc","dir":"Articles","previous_headings":"Bartools Quickstart Guide > 2. Data QC and Normalisation","what":"Data QC","title":"bartools: quickstart guide","text":"first want ensure working clean data. remove barcodes counts across samples. normalise samples sequencing depth can plot raw normalised sequencing depth get idea depth discrepancies PCR replicates  lentiviral based barcoding experiments, one, common library exhibit degree skewness based cloning method. means barcodes represented library others greater chance transduced multiple cells. experiments assume individual barcode transduced one cell, cell transduced one barcode.ensured using low multiplicity infection (MOI) transduction likelihood cell transduced one barcode containing virions follows Poisson distribution. mind, also can useful check total counts per barcode identify bias counts sample vs. frequency barcode reference library. plot individual barcodes x-axis ordered based frequency library pool. increased number counts per barcode toward left hand side plot suggestive transduction bias, meaning reads average attributed abundant barcodes library. , likely multiple cells transduced barcode. don’t see suggesting problem experiment.","code":"# Remove rows with no data keeprows = rowSums(test.dge$counts) >= 1 dge.filtered <- test.dge[keeprows,] dge.filtered.counts <- dge.filtered$counts dim(dge.filtered.counts) ## [1] 1490   38 # Normalise each sample to counts per million dge.cpmnorm <- normaliseCounts(dge.filtered, method = \"cpm\", threshold = 1) ## Error in normaliseCounts(dge.filtered, method = \"cpm\", threshold = 1): method argument must be one of CPM, RLE, TMM, upperquartile or TMMwsp # raw counts per sample plotReadCounts(dge.filtered.counts, group = dge.filtered$samples$Treatment) # normalised counts per sample plotReadCounts(dge.cpmnorm, group = dge.filtered$samples$Treatment) ## Error in is.data.frame(x): object 'dge.cpmnorm' not found # plot detected barcodes plotBarcodeCounts(dge.cpmnorm, log10 = F) ## Error in is.data.frame(x): object 'dge.cpmnorm' not found plotBarcodeCounts(dge.cpmnorm, log10 = T) ## Error in is.data.frame(x): object 'dge.cpmnorm' not found"},{"path":"https://danevass.github.io/bartools/articles/quickstart.html","id":"check-correlation-between-pcr-replicates","dir":"Articles","previous_headings":"Bartools Quickstart Guide > 2. Data QC and Normalisation","what":"Check correlation between PCR replicates","title":"bartools: quickstart guide","text":"also important ensure individual samples sequenced appropriate depth ensures entire barcode repertoire present sample captured data. Sequencing technical duplicates sample generated library PCR stage good way ensure . experiment 9 samples total, two PCR technical replicates. correlate barcode distributions pair technical replicates.                    fit linear model technical replicates per sample plot regression line. Note expect high correlation PCR duplicates barcode pool. can easily get correlation values replicates","code":"samps <- unique(test.dge$samples$group) lapply(samps, function(x){   df <- test.dge[,test.dge$samples$group %in% as.character(x)]   plotBarcodeRegression(df, samp1 = colnames(df)[[1]], samp2 = colnames(df)[[2]]) }) ## [[1]] ## `geom_smooth()` using formula = 'y ~ x' ##  ## [[2]] ## `geom_smooth()` using formula = 'y ~ x' ##  ## [[3]] ## `geom_smooth()` using formula = 'y ~ x' ##  ## [[4]] ## `geom_smooth()` using formula = 'y ~ x' ##  ## [[5]] ## `geom_smooth()` using formula = 'y ~ x' ##  ## [[6]] ## `geom_smooth()` using formula = 'y ~ x' ##  ## [[7]] ## `geom_smooth()` using formula = 'y ~ x' ##  ## [[8]] ## `geom_smooth()` using formula = 'y ~ x' ##  ## [[9]] ## `geom_smooth()` using formula = 'y ~ x' ##  ## [[10]] ## `geom_smooth()` using formula = 'y ~ x' ##  ## [[11]] ## `geom_smooth()` using formula = 'y ~ x' ##  ## [[12]] ## `geom_smooth()` using formula = 'y ~ x' ##  ## [[13]] ## `geom_smooth()` using formula = 'y ~ x' ##  ## [[14]] ## `geom_smooth()` using formula = 'y ~ x' ##  ## [[15]] ## `geom_smooth()` using formula = 'y ~ x' ##  ## [[16]] ## `geom_smooth()` using formula = 'y ~ x' ##  ## [[17]] ## `geom_smooth()` using formula = 'y ~ x' ##  ## [[18]] ## `geom_smooth()` using formula = 'y ~ x' ##  ## [[19]] ## `geom_smooth()` using formula = 'y ~ x' corrs <- calcReplicateCorr(test.dge, group = test.dge$samples$Group, corr.thresh = 0.9) ## Warning in colnames(dge$samples) == group: longer object length is not a ## multiple of shorter object length ## Error in table(dge$samples[, group.pos]): nothing to tabulate corrs ## Error in eval(expr, envir, enclos): object 'corrs' not found which(corrs < 0.9) ## Error in which(corrs < 0.9): object 'corrs' not found"},{"path":"https://danevass.github.io/bartools/articles/quickstart.html","id":"collapse-pcr-replicates-in-object","dir":"Articles","previous_headings":"Bartools Quickstart Guide > 2. Data QC and Normalisation","what":"Collapse PCR replicates in object","title":"bartools: quickstart guide","text":"Now know samples good quality can merge PCR replicate information. point onward good idea collapse PCR replicates. take average PCR technical replicates within sample result clean barcode sequencing dataset ready investigation visualisation.","code":"dim(dge.filtered) ## [1] 1490   38 dge.filtered.collapsed <- collapseReplicates(dge.filtered, groupby = dge.filtered$samples$Group, by = \"mean\", show_reps = F) dim(dge.filtered.collapsed) ## [1] 1490   19 head(dge.filtered.collapsed) ## An object of class \"DGEList\" ## $samples ##              Sample Experiment        Group PCR_Replicate Treatment ## 1_High_dose    S1-1    test_01  1_High_dose             1 High_dose ## 10_High_dose  S10-1    test_01 10_High_dose             1 High_dose ## 11_Vehicle    S11-1    test_01   11_Vehicle             1   Vehicle ## 12_Vehicle    S12-1    test_01   12_Vehicle             1   Vehicle ## 13_Low_dose   S13-1    test_01  13_Low_dose             1  Low_dose ##                     group lib.size norm.factors ## 1_High_dose   1_High_dose  3447629            1 ## 10_High_dose 10_High_dose  4114186            1 ## 11_Vehicle     11_Vehicle  2907500            1 ## 12_Vehicle     12_Vehicle  4202337            1 ## 13_Low_dose   13_Low_dose  4513559            1 ## 14 more rows ... ##  ## $counts ##         Samples ## Tags     1_High_dose 10_High_dose 11_Vehicle 12_Vehicle 13_Low_dose 14_Low_dose ##   BC_1             0            0          0          0           0           0 ##   BC_13            0            0          0          0           0           0 ##   BC_99          155            0          0          0           0           0 ##   BC_120           0            0          0          0           0           0 ##   BC_426           0            0          0          0           0           0 ##   BC_430           0            0          0          0           0           0 ##         Samples ## Tags     15_Low_dose 16_Low_dose 17_High_dose 18_Vehicle 2_High_dose ##   BC_1             0           0            0          0           0 ##   BC_13            0           0            0          0           0 ##   BC_99            0           0            0          0           0 ##   BC_120           0           0            0          0           0 ##   BC_426           0           0            0          0           0 ##   BC_430           0           0            0        413           0 ##         Samples ## Tags     3_High_dose 4_Vehicle 5_Low_dose 6_High_dose 7_Vehicle 8_Vehicle ##   BC_1             0         0          0           0         0         0 ##   BC_13            0         0          0           0         0         0 ##   BC_99            0         0          0           0         0         0 ##   BC_120           0         0          0           0         0         0 ##   BC_426           0         0          0           0         0         0 ##   BC_430           0        13          0           0         0         0 ##         Samples ## Tags     9_Low_dose   T0 ##   BC_1            0  127 ##   BC_13           0 1146 ##   BC_99           0 1354 ##   BC_120          0  234 ##   BC_426          0   81 ##   BC_430          0 1022"},{"path":"https://danevass.github.io/bartools/articles/quickstart.html","id":"visualisation","dir":"Articles","previous_headings":"Bartools Quickstart Guide","what":"3. Visualisation","title":"bartools: quickstart guide","text":"bartools includes range visualisation options examining barcode-seq datasets.","code":""},{"path":"https://danevass.github.io/bartools/articles/quickstart.html","id":"bubble-plot","dir":"Articles","previous_headings":"Bartools Quickstart Guide > 3. Visualisation","what":"Bubble plot","title":"bartools: quickstart guide","text":"Sometimes visual depiction data suitable. barcodes/tags represented bubbles aligned single plane. size bubbles reflects percentage abundance barcode within sample  Bubbleplots can also ordered according particular sample can help visual representation large vs small clones. Barcodes fail meet defined abundance threshold sample can greyed ","code":"plotBarcodeBubble(dge.filtered.collapsed$counts, proportion.cutoff = 10, labels = T) plotOrderedBubble(dge.filtered.collapsed$counts, proportion.cutoff = 10, labels = T, orderSample = \"T0\", colorDominant = T) ## Error in methods::is(counts): object 'counts' not found plotOrderedBubble(dge.filtered.collapsed$counts, proportion.cutoff = 10, labels = T, orderSample = \"T0\", colorDominant = F) ## Error in methods::is(counts): object 'counts' not found"},{"path":"https://danevass.github.io/bartools/articles/quickstart.html","id":"barcode-plot","dir":"Articles","previous_headings":"Bartools Quickstart Guide > 3. Visualisation","what":"Barcode Plot","title":"bartools: quickstart guide","text":"Alternatively, can focus abundant barcodes within set samples easily observe change frequency course experiment.","code":"plotBarcodeHistogram(dge.filtered.collapsed$counts,                       sample = dge.filtered.collapsed$samples$Group[[1]],                       top = 50)"},{"path":"https://danevass.github.io/bartools/articles/quickstart.html","id":"timeseries-plots","dir":"Articles","previous_headings":"Bartools Quickstart Guide > 3. Visualisation","what":"Timeseries Plots","title":"bartools: quickstart guide","text":"timecourse experiments useful visualise kinetics barcode diversity changes time. instance can use plotBarcodeTimeseries get idea relative abundance top n barcodes sample relative others.","code":"plotBarcodeTimeseries(dge.filtered.collapsed, top = 5) ## Using barcode as id variables"},{"path":"https://danevass.github.io/bartools/articles/quickstart.html","id":"principal-components-analysis","dir":"Articles","previous_headings":"Bartools Quickstart Guide > 3. Visualisation","what":"Principal Components Analysis","title":"bartools: quickstart guide","text":"global level PCA analysis good way get high level understanding similarities differences samples.","code":"plotBarcodePCA(dge.filtered.collapsed, intgroup = \"Treatment\") plotBarcodePCA(dge.filtered.collapsed[,dge.filtered.collapsed$samples$Treatment %in% c(\"T0\",\"Vehicle\",\"High_dose\")], intgroup = \"Treatment\")"},{"path":"https://danevass.github.io/bartools/articles/quickstart.html","id":"heatmaps","dir":"Articles","previous_headings":"Bartools Quickstart Guide > 3. Visualisation","what":"Heatmaps","title":"bartools: quickstart guide","text":"Another method comparing abundance across samples using heatmap. barcodes ranked among top n abundant within sample indicated asterix. heatmap shows high dose samples generally distinct low dose vehicle group.","code":"plotBarcodeHeatmap(cpm(dge.filtered.collapsed$counts), N = 5)"},{"path":"https://danevass.github.io/bartools/articles/quickstart.html","id":"analysing-composition-and-diversity","dir":"Articles","previous_headings":"Bartools Quickstart Guide","what":"4. Analysing Composition and Diversity","title":"bartools: quickstart guide","text":"important able visualise data also understand relationships barcodes/tags data level","code":""},{"path":"https://danevass.github.io/bartools/articles/quickstart.html","id":"identify-compositional-bias-within-samples","dir":"Articles","previous_headings":"Bartools Quickstart Guide > 4. Analysing Composition and Diversity","what":"Identify compositional bias within samples","title":"bartools: quickstart guide","text":"plots give global visualisation abundance barcode within sample however compositional makeup can obscured visualising data way. can helpful examine fraction barcodes comprise sample. plots calculate cumulative sum sample relation samples defined user.","code":"plotBarcodeCumSum(dge.filtered.collapsed$counts, sample1 = \"T0\", samples = colnames(dge.filtered.collapsed$counts)[1:5])"},{"path":"https://danevass.github.io/bartools/articles/quickstart.html","id":"identifying-abundant-barcodes-within-samples","dir":"Articles","previous_headings":"Bartools Quickstart Guide > 4. Analysing Composition and Diversity","what":"Identifying abundant barcodes within samples","title":"bartools: quickstart guide","text":"important able determine barcodes abundant wihtin sample. Bartools allows easily calculated according abundance threshold. can use specific plots visualise dominance specific barcodes within across samples. plots show top barcodes T0 sample essentially extinguished high dose treatment","code":"top.bc <- getDominantBarcodes(dge.filtered.collapsed, pct.thresh = 5) top.bc ## $`1_High_dose` ## [1] \"BC_79755\"  \"BC_102160\" \"BC_59493\"  \"BC_23361\"  \"BC_53234\"  \"BC_400391\" ##  ## $`10_High_dose` ## [1] \"BC_8419\"   \"BC_124796\" ##  ## $`11_Vehicle` ## [1] \"BC_53234\"  \"BC_205581\" \"BC_90135\"  \"BC_172626\" \"BC_58978\"  ##  ## $`12_Vehicle` ## [1] \"BC_389078\" \"BC_159570\" \"BC_135438\" \"BC_500780\" \"BC_79755\"  ##  ## $`13_Low_dose` ## [1] \"BC_8419\"   \"BC_124796\" \"BC_102160\" \"BC_257382\" ##  ## $`14_Low_dose` ## [1] \"BC_90135\"  \"BC_388103\" \"BC_31610\"  ##  ## $`15_Low_dose` ## [1] \"BC_1478\"   \"BC_94579\"  \"BC_124796\" \"BC_8419\"   ##  ## $`16_Low_dose` ## [1] \"BC_53234\"  \"BC_79755\"  \"BC_140320\" \"BC_31610\"  \"BC_248880\" \"BC_1478\"   ##  ## $`17_High_dose` ## [1] \"BC_183691\" \"BC_90135\"  \"BC_400391\" ##  ## $`18_Vehicle` ## [1] \"BC_49397\"  \"BC_91412\"  \"BC_159570\" \"BC_62602\"  \"BC_93485\"  \"BC_70225\"  ##  ## $`2_High_dose` ## [1] \"BC_248880\" \"BC_65104\"  \"BC_9141\"   \"BC_1478\"   \"BC_31610\"  \"BC_79755\"  ##  ## $`3_High_dose` ## [1] \"BC_79755\"  \"BC_142024\" \"BC_102160\" \"BC_183691\" ##  ## $`4_Vehicle` ## [1] \"BC_53234\"  \"BC_58978\"  \"BC_62602\"  \"BC_68847\"  \"BC_140320\" \"BC_79755\"  ##  ## $`5_Low_dose` ## [1] \"BC_561471\" \"BC_118640\" \"BC_59493\"  \"BC_1607\"   \"BC_31610\"  ##  ## $`6_High_dose` ## [1] \"BC_79755\"  \"BC_8419\"   \"BC_124796\" \"BC_4564\"   ##  ## $`7_Vehicle` ## [1] \"BC_53234\"  \"BC_54442\"  \"BC_142024\" \"BC_140320\" \"BC_93485\"  ##  ## $`8_Vehicle` ## [1] \"BC_142024\" \"BC_90135\"  \"BC_58978\"  \"BC_93485\"  ##  ## $`9_Low_dose` ## [1] \"BC_79755\"  \"BC_4198\"   \"BC_81579\"  \"BC_118640\" \"BC_560839\" \"BC_345889\" ## [7] \"BC_400391\" ##  ## $T0 ## [1] \"BC_245016\" \"BC_121651\" plotBarcodeBoxplot(dge.filtered.collapsed, barcodes = top.bc$T0, condition = c(\"T0\", \"Low_dose\", \"High_dose\")) ## multiple barcodes given. No metadata group"},{"path":"https://danevass.github.io/bartools/articles/quickstart.html","id":"calculating-and-plotting-percentile-abundance-","dir":"Articles","previous_headings":"Bartools Quickstart Guide > 4. Analysing Composition and Diversity","what":"Calculating and plotting percentile abundance.","title":"bartools: quickstart guide","text":"graphs demonstrate relatively barcodes can sometimes comprise majority sample’s clonality, particularly following selective event drug treatment. useful formally analyse based desired percentile threshold. common threshold 95th percentile. can eliminate small barcodes comprise tail dataset give sense many clones truly comprise sample   plots show clones comprise majority dataset per mouse. Also, generally fewer clones present high dose group compared vehicle low dose groups.","code":"calcPercentileBarcodes(dge.filtered.collapsed, percentile = 0.95) ## $NumBarcodes ##          Sample NumBarcodes ## 1   1_High_dose          15 ## 2  10_High_dose           3 ## 3    11_Vehicle          19 ## 4    12_Vehicle          14 ## 5   13_Low_dose          11 ## 6   14_Low_dose           6 ## 7   15_Low_dose           7 ## 8   16_Low_dose          19 ## 9  17_High_dose           5 ## 10   18_Vehicle          27 ## 11  2_High_dose          12 ## 12  3_High_dose          10 ## 13    4_Vehicle          25 ## 14   5_Low_dose          11 ## 15  6_High_dose           9 ## 16    7_Vehicle          16 ## 17    8_Vehicle          21 ## 18   9_Low_dose          19 ## 19           T0         596 ##  ## $TopBarcodes ## $TopBarcodes$`1_High_dose` ##  [1] \"BC_79755\"  \"BC_102160\" \"BC_59493\"  \"BC_23361\"  \"BC_53234\"  \"BC_400391\" ##  [7] \"BC_142112\" \"BC_94511\"  \"BC_68847\"  \"BC_142024\" \"BC_23241\"  \"BC_47310\"  ## [13] \"BC_9141\"   \"BC_5472\"   \"BC_65104\"  ##  ## $TopBarcodes$`10_High_dose` ## [1] \"BC_8419\"   \"BC_124796\" \"BC_102160\" ##  ## $TopBarcodes$`11_Vehicle` ##  [1] \"BC_53234\"  \"BC_205581\" \"BC_90135\"  \"BC_172626\" \"BC_58978\"  \"BC_79755\"  ##  [7] \"BC_159570\" \"BC_118640\" \"BC_31610\"  \"BC_635211\" \"BC_257382\" \"BC_324711\" ## [13] \"BC_1607\"   \"BC_4531\"   \"BC_327422\" \"BC_297704\" \"BC_194823\" \"BC_415460\" ## [19] \"BC_140320\" ##  ## $TopBarcodes$`12_Vehicle` ##  [1] \"BC_389078\" \"BC_159570\" \"BC_135438\" \"BC_500780\" \"BC_79755\"  \"BC_31610\"  ##  [7] \"BC_49629\"  \"BC_118640\" \"BC_47726\"  \"BC_78349\"  \"BC_58978\"  \"BC_245016\" ## [13] \"BC_1607\"   \"BC_329679\" ##  ## $TopBarcodes$`13_Low_dose` ##  [1] \"BC_8419\"   \"BC_124796\" \"BC_102160\" \"BC_257382\" \"BC_172626\" \"BC_345889\" ##  [7] \"BC_53234\"  \"BC_5472\"   \"BC_79755\"  \"BC_205581\" \"BC_17608\"  ##  ## $TopBarcodes$`14_Low_dose` ## [1] \"BC_90135\"  \"BC_388103\" \"BC_31610\"  \"BC_58978\"  \"BC_292962\" \"BC_159570\" ##  ## $TopBarcodes$`15_Low_dose` ## [1] \"BC_1478\"   \"BC_94579\"  \"BC_124796\" \"BC_8419\"   \"BC_316204\" \"BC_400391\" ## [7] \"BC_23241\"  ##  ## $TopBarcodes$`16_Low_dose` ##  [1] \"BC_53234\"  \"BC_79755\"  \"BC_140320\" \"BC_31610\"  \"BC_248880\" \"BC_1478\"   ##  [7] \"BC_17608\"  \"BC_257382\" \"BC_345889\" \"BC_94511\"  \"BC_142112\" \"BC_142024\" ## [13] \"BC_91412\"  \"BC_58978\"  \"BC_190202\" \"BC_4198\"   \"BC_68847\"  \"BC_389078\" ## [19] \"BC_47726\"  ##  ## $TopBarcodes$`17_High_dose` ## [1] \"BC_183691\" \"BC_90135\"  \"BC_400391\" \"BC_31610\"  \"BC_68847\"  ##  ## $TopBarcodes$`18_Vehicle` ##  [1] \"BC_49397\"  \"BC_91412\"  \"BC_159570\" \"BC_62602\"  \"BC_93485\"  \"BC_70225\"  ##  [7] \"BC_79755\"  \"BC_4564\"   \"BC_124796\" \"BC_58978\"  \"BC_8419\"   \"BC_149935\" ## [13] \"BC_68847\"  \"BC_90135\"  \"BC_4173\"   \"BC_4469\"   \"BC_172626\" \"BC_31610\"  ## [19] \"BC_383329\" \"BC_55960\"  \"BC_62970\"  \"BC_102160\" \"BC_244320\" \"BC_400391\" ## [25] \"BC_135438\" \"BC_203989\" \"BC_133178\" ##  ## $TopBarcodes$`2_High_dose` ##  [1] \"BC_248880\" \"BC_65104\"  \"BC_9141\"   \"BC_1478\"   \"BC_31610\"  \"BC_79755\"  ##  [7] \"BC_388103\" \"BC_257382\" \"BC_68618\"  \"BC_102160\" \"BC_4531\"   \"BC_90135\"  ##  ## $TopBarcodes$`3_High_dose` ##  [1] \"BC_79755\"  \"BC_142024\" \"BC_102160\" \"BC_183691\" \"BC_59493\"  \"BC_345889\" ##  [7] \"BC_23361\"  \"BC_70225\"  \"BC_30946\"  \"BC_159570\" ##  ## $TopBarcodes$`4_Vehicle` ##  [1] \"BC_53234\"  \"BC_58978\"  \"BC_62602\"  \"BC_68847\"  \"BC_140320\" \"BC_79755\"  ##  [7] \"BC_327422\" \"BC_36103\"  \"BC_102160\" \"BC_81579\"  \"BC_118640\" \"BC_135438\" ## [13] \"BC_205581\" \"BC_1607\"   \"BC_4564\"   \"BC_91412\"  \"BC_229324\" \"BC_560839\" ## [19] \"BC_159570\" \"BC_468335\" \"BC_49397\"  \"BC_203989\" \"BC_124796\" \"BC_8419\"   ## [25] \"BC_190202\" ##  ## $TopBarcodes$`5_Low_dose` ##  [1] \"BC_561471\" \"BC_118640\" \"BC_59493\"  \"BC_1607\"   \"BC_31610\"  \"BC_23361\"  ##  [7] \"BC_159570\" \"BC_93485\"  \"BC_468335\" \"BC_81579\"  \"BC_257382\" ##  ## $TopBarcodes$`6_High_dose` ## [1] \"BC_79755\"  \"BC_8419\"   \"BC_124796\" \"BC_4564\"   \"BC_400391\" \"BC_31610\"  ## [7] \"BC_1478\"   \"BC_90135\"  \"BC_388103\" ##  ## $TopBarcodes$`7_Vehicle` ##  [1] \"BC_53234\"  \"BC_54442\"  \"BC_142024\" \"BC_140320\" \"BC_93485\"  \"BC_124796\" ##  [7] \"BC_23544\"  \"BC_8419\"   \"BC_324711\" \"BC_159570\" \"BC_58978\"  \"BC_90135\"  ## [13] \"BC_345889\" \"BC_4564\"   \"BC_102160\" \"BC_400391\" ##  ## $TopBarcodes$`8_Vehicle` ##  [1] \"BC_142024\" \"BC_90135\"  \"BC_58978\"  \"BC_93485\"  \"BC_363879\" \"BC_4531\"   ##  [7] \"BC_205581\" \"BC_118640\" \"BC_79755\"  \"BC_31610\"  \"BC_1607\"   \"BC_82758\"  ## [13] \"BC_194823\" \"BC_389078\" \"BC_251167\" \"BC_68847\"  \"BC_77209\"  \"BC_102160\" ## [19] \"BC_4173\"   \"BC_4564\"   \"BC_94579\"  ##  ## $TopBarcodes$`9_Low_dose` ##  [1] \"BC_79755\"  \"BC_4198\"   \"BC_81579\"  \"BC_118640\" \"BC_560839\" \"BC_345889\" ##  [7] \"BC_400391\" \"BC_1607\"   \"BC_319105\" \"BC_35704\"  \"BC_205581\" \"BC_90135\"  ## [13] \"BC_124796\" \"BC_142024\" \"BC_8419\"   \"BC_561471\" \"BC_19146\"  \"BC_68847\"  ## [19] \"BC_78912\"  ##  ## $TopBarcodes$T0 ##   [1] \"BC_245016\" \"BC_121651\" \"BC_420967\" \"BC_108059\" \"BC_323670\" \"BC_9141\"   ##   [7] \"BC_331193\" \"BC_119418\" \"BC_65104\"  \"BC_17570\"  \"BC_35704\"  \"BC_92942\"  ##  [13] \"BC_383329\" \"BC_1396\"   \"BC_83680\"  \"BC_24510\"  \"BC_55858\"  \"BC_38589\"  ##  [19] \"BC_137495\" \"BC_446739\" \"BC_69627\"  \"BC_313129\" \"BC_171385\" \"BC_280320\" ##  [25] \"BC_12367\"  \"BC_221975\" \"BC_15782\"  \"BC_310257\" \"BC_3618\"   \"BC_67201\"  ##  [31] \"BC_107789\" \"BC_36103\"  \"BC_2596\"   \"BC_215831\" \"BC_43535\"  \"BC_69641\"  ##  [37] \"BC_13611\"  \"BC_16618\"  \"BC_588849\" \"BC_294188\" \"BC_22306\"  \"BC_141060\" ##  [43] \"BC_249402\" \"BC_428803\" \"BC_344050\" \"BC_25084\"  \"BC_46538\"  \"BC_175651\" ##  [49] \"BC_206193\" \"BC_205581\" \"BC_403084\" \"BC_56819\"  \"BC_400391\" \"BC_16956\"  ##  [55] \"BC_219379\" \"BC_19146\"  \"BC_172626\" \"BC_18278\"  \"BC_43128\"  \"BC_47439\"  ##  [61] \"BC_148563\" \"BC_114027\" \"BC_325065\" \"BC_62602\"  \"BC_58978\"  \"BC_252374\" ##  [67] \"BC_68847\"  \"BC_262618\" \"BC_111272\" \"BC_224300\" \"BC_476380\" \"BC_289383\" ##  [73] \"BC_50136\"  \"BC_202891\" \"BC_276866\" \"BC_521149\" \"BC_21018\"  \"BC_550404\" ##  [79] \"BC_162898\" \"BC_255436\" \"BC_458543\" \"BC_168818\" \"BC_176946\" \"BC_425129\" ##  [85] \"BC_204266\" \"BC_103528\" \"BC_175871\" \"BC_83707\"  \"BC_64584\"  \"BC_105387\" ##  [91] \"BC_11643\"  \"BC_34617\"  \"BC_227720\" \"BC_72619\"  \"BC_516753\" \"BC_168530\" ##  [97] \"BC_2040\"   \"BC_556149\" \"BC_376665\" \"BC_18345\"  \"BC_249161\" \"BC_345717\" ## [103] \"BC_114040\" \"BC_24159\"  \"BC_41692\"  \"BC_248159\" \"BC_236596\" \"BC_166467\" ## [109] \"BC_54442\"  \"BC_206263\" \"BC_363714\" \"BC_56338\"  \"BC_16754\"  \"BC_30946\"  ## [115] \"BC_503475\" \"BC_11277\"  \"BC_612467\" \"BC_67854\"  \"BC_43673\"  \"BC_160057\" ## [121] \"BC_32325\"  \"BC_7405\"   \"BC_118831\" \"BC_418545\" \"BC_120596\" \"BC_5256\"   ## [127] \"BC_39281\"  \"BC_258799\" \"BC_29284\"  \"BC_85441\"  \"BC_103714\" \"BC_37062\"  ## [133] \"BC_140320\" \"BC_20263\"  \"BC_46524\"  \"BC_321677\" \"BC_172412\" \"BC_139928\" ## [139] \"BC_203520\" \"BC_105732\" \"BC_173736\" \"BC_13395\"  \"BC_11391\"  \"BC_142999\" ## [145] \"BC_172238\" \"BC_79026\"  \"BC_43123\"  \"BC_128266\" \"BC_355420\" \"BC_415373\" ## [151] \"BC_129519\" \"BC_3733\"   \"BC_93485\"  \"BC_40856\"  \"BC_42612\"  \"BC_289568\" ## [157] \"BC_10454\"  \"BC_38398\"  \"BC_160158\" \"BC_32680\"  \"BC_135438\" \"BC_346124\" ## [163] \"BC_146666\" \"BC_42178\"  \"BC_53234\"  \"BC_356531\" \"BC_389078\" \"BC_635211\" ## [169] \"BC_183401\" \"BC_132225\" \"BC_229995\" \"BC_102205\" \"BC_47726\"  \"BC_564039\" ## [175] \"BC_40516\"  \"BC_45955\"  \"BC_113839\" \"BC_102803\" \"BC_42310\"  \"BC_8835\"   ## [181] \"BC_91412\"  \"BC_15740\"  \"BC_173674\" \"BC_44599\"  \"BC_324711\" \"BC_519985\" ## [187] \"BC_77030\"  \"BC_350464\" \"BC_235128\" \"BC_151544\" \"BC_33699\"  \"BC_474982\" ## [193] \"BC_210529\" \"BC_217211\" \"BC_221056\" \"BC_187025\" \"BC_320233\" \"BC_7122\"   ## [199] \"BC_87047\"  \"BC_76947\"  \"BC_63846\"  \"BC_560839\" \"BC_65130\"  \"BC_2294\"   ## [205] \"BC_102160\" \"BC_273124\" \"BC_161563\" \"BC_389742\" \"BC_521485\" \"BC_145719\" ## [211] \"BC_373901\" \"BC_162119\" \"BC_189813\" \"BC_17608\"  \"BC_324953\" \"BC_320752\" ## [217] \"BC_283335\" \"BC_67965\"  \"BC_2865\"   \"BC_242383\" \"BC_227308\" \"BC_346627\" ## [223] \"BC_67233\"  \"BC_672202\" \"BC_8324\"   \"BC_211828\" \"BC_410172\" \"BC_495859\" ## [229] \"BC_35659\"  \"BC_199881\" \"BC_44600\"  \"BC_377226\" \"BC_147006\" \"BC_41523\"  ## [235] \"BC_336794\" \"BC_26769\"  \"BC_244320\" \"BC_183112\" \"BC_14377\"  \"BC_7299\"   ## [241] \"BC_53380\"  \"BC_10347\"  \"BC_164378\" \"BC_806\"    \"BC_20557\"  \"BC_57621\"  ## [247] \"BC_389087\" \"BC_100344\" \"BC_408928\" \"BC_156353\" \"BC_154990\" \"BC_228994\" ## [253] \"BC_33764\"  \"BC_23522\"  \"BC_4564\"   \"BC_78349\"  \"BC_10808\"  \"BC_201293\" ## [259] \"BC_81309\"  \"BC_45652\"  \"BC_123791\" \"BC_214604\" \"BC_2206\"   \"BC_14492\"  ## [265] \"BC_146146\" \"BC_6093\"   \"BC_421415\" \"BC_58144\"  \"BC_167638\" \"BC_366637\" ## [271] \"BC_207651\" \"BC_154519\" \"BC_4733\"   \"BC_19353\"  \"BC_326596\" \"BC_1764\"   ## [277] \"BC_86358\"  \"BC_101581\" \"BC_23241\"  \"BC_138900\" \"BC_11270\"  \"BC_64945\"  ## [283] \"BC_37363\"  \"BC_638624\" \"BC_195246\" \"BC_121663\" \"BC_672021\" \"BC_194823\" ## [289] \"BC_206798\" \"BC_521264\" \"BC_12191\"  \"BC_130431\" \"BC_462254\" \"BC_4531\"   ## [295] \"BC_22999\"  \"BC_64931\"  \"BC_214878\" \"BC_9340\"   \"BC_350335\" \"BC_150291\" ## [301] \"BC_196282\" \"BC_95934\"  \"BC_211811\" \"BC_587139\" \"BC_199093\" \"BC_147380\" ## [307] \"BC_228018\" \"BC_116921\" \"BC_514247\" \"BC_380559\" \"BC_141246\" \"BC_218093\" ## [313] \"BC_88464\"  \"BC_157906\" \"BC_145403\" \"BC_73098\"  \"BC_61489\"  \"BC_77101\"  ## [319] \"BC_266451\" \"BC_138737\" \"BC_201372\" \"BC_654016\" \"BC_444573\" \"BC_53219\"  ## [325] \"BC_57692\"  \"BC_175957\" \"BC_12418\"  \"BC_357846\" \"BC_14810\"  \"BC_49226\"  ## [331] \"BC_175198\" \"BC_49044\"  \"BC_539228\" \"BC_527469\" \"BC_181957\" \"BC_181554\" ## [337] \"BC_91989\"  \"BC_353112\" \"BC_130861\" \"BC_55675\"  \"BC_10293\"  \"BC_617554\" ## [343] \"BC_346761\" \"BC_302238\" \"BC_426662\" \"BC_77187\"  \"BC_19610\"  \"BC_171953\" ## [349] \"BC_217320\" \"BC_446649\" \"BC_29208\"  \"BC_93884\"  \"BC_20573\"  \"BC_146322\" ## [355] \"BC_221691\" \"BC_261055\" \"BC_3583\"   \"BC_9626\"   \"BC_6304\"   \"BC_354350\" ## [361] \"BC_13093\"  \"BC_203989\" \"BC_114257\" \"BC_234390\" \"BC_249649\" \"BC_88099\"  ## [367] \"BC_322542\" \"BC_351660\" \"BC_52081\"  \"BC_225019\" \"BC_596629\" \"BC_15448\"  ## [373] \"BC_528062\" \"BC_2430\"   \"BC_324042\" \"BC_587343\" \"BC_67374\"  \"BC_14484\"  ## [379] \"BC_83816\"  \"BC_141114\" \"BC_318282\" \"BC_11055\"  \"BC_45402\"  \"BC_79755\"  ## [385] \"BC_357977\" \"BC_415903\" \"BC_115436\" \"BC_43206\"  \"BC_50222\"  \"BC_655329\" ## [391] \"BC_147556\" \"BC_182320\" \"BC_31779\"  \"BC_9322\"   \"BC_162322\" \"BC_296283\" ## [397] \"BC_381245\" \"BC_283541\" \"BC_67247\"  \"BC_4198\"   \"BC_31196\"  \"BC_11152\"  ## [403] \"BC_61500\"  \"BC_90135\"  \"BC_47310\"  \"BC_292962\" \"BC_82595\"  \"BC_26258\"  ## [409] \"BC_99\"     \"BC_94579\"  \"BC_35283\"  \"BC_238577\" \"BC_49397\"  \"BC_363879\" ## [415] \"BC_309303\" \"BC_12410\"  \"BC_231962\" \"BC_7691\"   \"BC_147063\" \"BC_302454\" ## [421] \"BC_92584\"  \"BC_31185\"  \"BC_110945\" \"BC_144061\" \"BC_75688\"  \"BC_70909\"  ## [427] \"BC_238160\" \"BC_491991\" \"BC_149347\" \"BC_195887\" \"BC_125634\" \"BC_1593\"   ## [433] \"BC_57794\"  \"BC_207333\" \"BC_228333\" \"BC_316483\" \"BC_169627\" \"BC_52856\"  ## [439] \"BC_129559\" \"BC_67370\"  \"BC_21535\"  \"BC_515934\" \"BC_329007\" \"BC_275321\" ## [445] \"BC_444761\" \"BC_13\"     \"BC_516611\" \"BC_154696\" \"BC_129768\" \"BC_159570\" ## [451] \"BC_103862\" \"BC_268745\" \"BC_9747\"   \"BC_194092\" \"BC_2791\"   \"BC_176231\" ## [457] \"BC_57582\"  \"BC_50311\"  \"BC_48168\"  \"BC_330625\" \"BC_413271\" \"BC_322219\" ## [463] \"BC_179919\" \"BC_56489\"  \"BC_257382\" \"BC_120505\" \"BC_472019\" \"BC_282868\" ## [469] \"BC_164652\" \"BC_124624\" \"BC_355439\" \"BC_563624\" \"BC_430\"    \"BC_15707\"  ## [475] \"BC_1977\"   \"BC_17509\"  \"BC_345889\" \"BC_473006\" \"BC_567519\" \"BC_26384\"  ## [481] \"BC_28938\"  \"BC_245600\" \"BC_145103\" \"BC_81579\"  \"BC_10190\"  \"BC_248582\" ## [487] \"BC_142112\" \"BC_576338\" \"BC_288976\" \"BC_90599\"  \"BC_255928\" \"BC_454109\" ## [493] \"BC_220827\" \"BC_35633\"  \"BC_33035\"  \"BC_62970\"  \"BC_381050\" \"BC_14452\"  ## [499] \"BC_189854\" \"BC_329679\" \"BC_66948\"  \"BC_82758\"  \"BC_84350\"  \"BC_228451\" ## [505] \"BC_186267\" \"BC_257523\" \"BC_20281\"  \"BC_170233\" \"BC_15652\"  \"BC_41280\"  ## [511] \"BC_276301\" \"BC_25609\"  \"BC_182092\" \"BC_186401\" \"BC_37116\"  \"BC_14380\"  ## [517] \"BC_259621\" \"BC_171345\" \"BC_278096\" \"BC_567514\" \"BC_44350\"  \"BC_131019\" ## [523] \"BC_297704\" \"BC_165975\" \"BC_451991\" \"BC_370968\" \"BC_80020\"  \"BC_212837\" ## [529] \"BC_4173\"   \"BC_97874\"  \"BC_2762\"   \"BC_143062\" \"BC_35459\"  \"BC_115038\" ## [535] \"BC_6453\"   \"BC_163063\" \"BC_28077\"  \"BC_23918\"  \"BC_389378\" \"BC_222891\" ## [541] \"BC_250471\" \"BC_56792\"  \"BC_229036\" \"BC_170407\" \"BC_154806\" \"BC_38465\"  ## [547] \"BC_337697\" \"BC_230643\" \"BC_164579\" \"BC_146760\" \"BC_59243\"  \"BC_557872\" ## [553] \"BC_652798\" \"BC_127999\" \"BC_4061\"   \"BC_22263\"  \"BC_22981\"  \"BC_66747\"  ## [559] \"BC_8838\"   \"BC_23213\"  \"BC_49060\"  \"BC_29053\"  \"BC_535770\" \"BC_345175\" ## [565] \"BC_7076\"   \"BC_29984\"  \"BC_153858\" \"BC_5615\"   \"BC_26097\"  \"BC_147873\" ## [571] \"BC_19557\"  \"BC_19612\"  \"BC_14131\"  \"BC_100070\" \"BC_190202\" \"BC_125776\" ## [577] \"BC_388103\" \"BC_29222\"  \"BC_509872\" \"BC_561471\" \"BC_57889\"  \"BC_168163\" ## [583] \"BC_18218\"  \"BC_294271\" \"BC_65912\"  \"BC_4165\"   \"BC_345888\" \"BC_8159\"   ## [589] \"BC_1534\"   \"BC_15172\"  \"BC_78760\"  \"BC_23363\"  \"BC_427925\" \"BC_65621\"  ## [595] \"BC_41997\"  \"BC_109658\" ##  ##  ## $TopBarcodeCounts ## $TopBarcodeCounts$`1_High_dose` ##           1_High_dose ## BC_79755      1107678 ## BC_102160      761271 ## BC_59493       435329 ## BC_23361       232003 ## BC_53234       222954 ## BC_400391      192477 ## BC_142112      187155 ## BC_94511       128591 ## BC_68847        62744 ## BC_142024       61392 ## BC_23241        49611 ## BC_47310        34916 ## BC_9141         34887 ## BC_5472         32110 ## BC_65104        31160 ##  ## $TopBarcodeCounts$`10_High_dose` ##           10_High_dose ## BC_8419        1993924 ## BC_124796      1680405 ## BC_102160       206154 ##  ## $TopBarcodeCounts$`11_Vehicle` ##           11_Vehicle ## BC_53234      676539 ## BC_205581     486994 ## BC_90135      325817 ## BC_172626     241604 ## BC_58978      182366 ## BC_79755      111942 ## BC_159570     105098 ## BC_118640      65182 ## BC_31610       63582 ## BC_635211      63026 ## BC_257382      60037 ## BC_324711      55954 ## BC_1607        55929 ## BC_4531        54568 ## BC_327422      32704 ## BC_297704      25038 ## BC_194823      24130 ## BC_415460      20811 ## BC_140320      17939 ##  ## $TopBarcodeCounts$`12_Vehicle` ##           12_Vehicle ## BC_389078    1405728 ## BC_159570     586842 ## BC_135438     260286 ## BC_500780     240675 ## BC_79755      227341 ## BC_31610      178619 ## BC_49629      137913 ## BC_118640     126942 ## BC_47726      123364 ## BC_78349      122342 ## BC_58978      106717 ## BC_245016     103055 ## BC_1607       101604 ## BC_329679      76624 ##  ## $TopBarcodeCounts$`13_Low_dose` ##           13_Low_dose ## BC_8419       1104437 ## BC_124796     1074874 ## BC_102160      790394 ## BC_257382      746244 ## BC_172626      109387 ## BC_345889       81047 ## BC_53234        69197 ## BC_5472         53875 ## BC_79755        53474 ## BC_205581       40089 ## BC_17608        39223 ##  ## $TopBarcodeCounts$`14_Low_dose` ##           14_Low_dose ## BC_90135      1914931 ## BC_388103     1415098 ## BC_31610       305126 ## BC_58978       173933 ## BC_292962      126389 ## BC_159570       79752 ##  ## $TopBarcodeCounts$`15_Low_dose` ##           15_Low_dose ## BC_1478       1163226 ## BC_94579       953114 ## BC_124796      492547 ## BC_8419        483327 ## BC_316204       95554 ## BC_400391       64143 ## BC_23241        43129 ##  ## $TopBarcodeCounts$`16_Low_dose` ##           16_Low_dose ## BC_53234       961560 ## BC_79755       689442 ## BC_140320      613980 ## BC_31610       353626 ## BC_248880      304109 ## BC_1478        286142 ## BC_17608       217539 ## BC_257382      191984 ## BC_345889      189430 ## BC_94511       141895 ## BC_142112      139280 ## BC_142024      111530 ## BC_91412        96804 ## BC_58978        76756 ## BC_190202       66260 ## BC_4198         51301 ## BC_68847        50082 ## BC_389078       40573 ## BC_47726        37815 ##  ## $TopBarcodeCounts$`17_High_dose` ##           17_High_dose ## BC_183691      2717363 ## BC_90135       1592156 ## BC_400391       596410 ## BC_31610        211787 ## BC_68847        152083 ##  ## $TopBarcodeCounts$`18_Vehicle` ##           18_Vehicle ## BC_49397      790751 ## BC_91412      431176 ## BC_159570     426867 ## BC_62602      276110 ## BC_93485      261381 ## BC_70225      254975 ## BC_79755      209422 ## BC_4564       153377 ## BC_124796     138207 ## BC_58978      129417 ## BC_8419       129121 ## BC_149935     116170 ## BC_68847      115439 ## BC_90135      110019 ## BC_4173       104414 ## BC_4469       100734 ## BC_172626      95167 ## BC_31610       91203 ## BC_383329      79083 ## BC_55960       77254 ## BC_62970       60999 ## BC_102160      54950 ## BC_244320      41598 ## BC_400391      37075 ## BC_135438      32576 ## BC_203989      23509 ## BC_133178      20108 ##  ## $TopBarcodeCounts$`2_High_dose` ##           2_High_dose ## BC_248880     1596729 ## BC_65104      1180121 ## BC_9141       1139782 ## BC_1478        706185 ## BC_31610       644411 ## BC_79755       385647 ## BC_388103      175121 ## BC_257382      160815 ## BC_68618        87664 ## BC_102160       62632 ## BC_4531         43062 ## BC_90135        35085 ##  ## $TopBarcodeCounts$`3_High_dose` ##           3_High_dose ## BC_79755      2325114 ## BC_142024      631337 ## BC_102160      500221 ## BC_183691      230313 ## BC_59493       179949 ## BC_345889       98351 ## BC_23361        87369 ## BC_70225        61458 ## BC_30946        55306 ## BC_159570       53497 ##  ## $TopBarcodeCounts$`4_Vehicle` ##           4_Vehicle ## BC_53234     600113 ## BC_58978     283022 ## BC_62602     231169 ## BC_68847     191550 ## BC_140320    184096 ## BC_79755     173832 ## BC_327422    164339 ## BC_36103     150193 ## BC_102160    122425 ## BC_81579     118058 ## BC_118640    110948 ## BC_135438     95015 ## BC_205581     82397 ## BC_1607       78418 ## BC_4564       76796 ## BC_91412      75495 ## BC_229324     51708 ## BC_560839     51599 ## BC_159570     51597 ## BC_468335     50798 ## BC_49397      41726 ## BC_203989     38296 ## BC_124796     31384 ## BC_8419       26856 ## BC_190202     22301 ##  ## $TopBarcodeCounts$`5_Low_dose` ##           5_Low_dose ## BC_561471    2049491 ## BC_118640     306629 ## BC_59493      257272 ## BC_1607       242144 ## BC_31610      176241 ## BC_23361      128368 ## BC_159570      45318 ## BC_93485       30275 ## BC_468335      25238 ## BC_81579       24984 ## BC_257382      24269 ##  ## $TopBarcodeCounts$`6_High_dose` ##           6_High_dose ## BC_79755      1313507 ## BC_8419       1120457 ## BC_124796     1013931 ## BC_4564        461928 ## BC_400391       93601 ## BC_31610        43251 ## BC_1478         33933 ## BC_90135        32480 ## BC_388103       29467 ##  ## $TopBarcodeCounts$`7_Vehicle` ##           7_Vehicle ## BC_53234     903928 ## BC_54442     695015 ## BC_142024    453623 ## BC_140320    340812 ## BC_93485     313117 ## BC_124796    187546 ## BC_23544     176555 ## BC_8419      171530 ## BC_324711    157126 ## BC_159570    110265 ## BC_58978      96686 ## BC_90135      88718 ## BC_345889     57693 ## BC_4564       56267 ## BC_102160     50723 ## BC_400391     40763 ##  ## $TopBarcodeCounts$`8_Vehicle` ##           8_Vehicle ## BC_142024   1166326 ## BC_90135     662506 ## BC_58978     308475 ## BC_93485     241349 ## BC_363879    186351 ## BC_4531      138174 ## BC_205581    128351 ## BC_118640    125295 ## BC_79755     112885 ## BC_31610      90763 ## BC_1607       89905 ## BC_82758      70527 ## BC_194823     48711 ## BC_389078     45367 ## BC_251167     45299 ## BC_68847      41855 ## BC_77209      39896 ## BC_102160     31578 ## BC_4173       25818 ## BC_4564       22920 ## BC_94579      20012 ##  ## $TopBarcodeCounts$`9_Low_dose` ##           9_Low_dose ## BC_79755      681795 ## BC_4198       416270 ## BC_81579      227482 ## BC_118640     194256 ## BC_560839     189001 ## BC_345889     175817 ## BC_400391     171811 ## BC_1607       128762 ## BC_319105     107294 ## BC_35704       99211 ## BC_205581      92979 ## BC_90135       56017 ## BC_124796      52960 ## BC_142024      44150 ## BC_8419        41231 ## BC_561471      35822 ## BC_19146       29471 ## BC_68847       28059 ## BC_78912       19369 ##  ## $TopBarcodeCounts$T0 ##               T0 ## BC_245016 229791 ## BC_121651 217035 ## BC_420967 135919 ## BC_108059 104092 ## BC_323670  88710 ## BC_9141    71948 ## BC_331193  58746 ## BC_119418  50353 ## BC_65104   44928 ## BC_17570   44319 ## BC_35704   42046 ## BC_92942   40055 ## BC_383329  38560 ## BC_1396    36561 ## BC_83680   36463 ## BC_24510   35588 ## BC_55858   32109 ## BC_38589   30544 ## BC_137495  27922 ## BC_446739  26850 ## BC_69627   26818 ## BC_313129  23810 ## BC_171385  23135 ## BC_280320  22617 ## BC_12367   22481 ## BC_221975  21723 ## BC_15782   21679 ## BC_310257  19781 ## BC_3618    17819 ## BC_67201   17468 ## BC_107789  17251 ## BC_36103   15445 ## BC_2596    15022 ## BC_215831  14165 ## BC_43535   13541 ## BC_69641   13517 ## BC_13611   13429 ## BC_16618   13410 ## BC_588849  13050 ## BC_294188  12892 ## BC_22306   12639 ## BC_141060  12371 ## BC_249402  12341 ## BC_428803  11779 ## BC_344050  11654 ## BC_25084   11583 ## BC_46538   11346 ## BC_175651  11293 ## BC_206193  11236 ## BC_205581  10974 ## BC_403084  10962 ## BC_56819   10940 ## BC_400391  10850 ## BC_16956   10763 ## BC_219379  10737 ## BC_19146   10234 ## BC_172626   9948 ## BC_18278    9561 ## BC_43128    9537 ## BC_47439    9501 ## BC_148563   9476 ## BC_114027   9237 ## BC_325065   9181 ## BC_62602    9167 ## BC_58978    9000 ## BC_252374   8738 ## BC_68847    8599 ## BC_262618   8455 ## BC_111272   8364 ## BC_224300   8275 ## BC_476380   8220 ## BC_289383   8174 ## BC_50136    8154 ## BC_202891   8124 ## BC_276866   8112 ## BC_521149   8104 ## BC_21018    7902 ## BC_550404   7724 ## BC_162898   7650 ## BC_255436   7647 ## BC_458543   7621 ## BC_168818   7611 ## BC_176946   7577 ## BC_425129   7376 ## BC_204266   7372 ## BC_103528   7202 ## BC_175871   7145 ## BC_83707    7076 ## BC_64584    7057 ## BC_105387   6847 ## BC_11643    6519 ## BC_34617    6449 ## BC_227720   6426 ## BC_72619    6404 ## BC_516753   6327 ## BC_168530   6204 ## BC_2040     6176 ## BC_556149   6128 ## BC_376665   6061 ## BC_18345    5987 ## BC_249161   5846 ## BC_345717   5778 ## BC_114040   5767 ## BC_24159    5744 ## BC_41692    5676 ## BC_248159   5671 ## BC_236596   5595 ## BC_166467   5526 ## BC_54442    5514 ## BC_206263   5499 ## BC_363714   5403 ## BC_56338    5073 ## BC_16754    5025 ## BC_30946    5005 ## BC_503475   4938 ## BC_11277    4875 ## BC_612467   4863 ## BC_67854    4809 ## BC_43673    4805 ## BC_160057   4794 ## BC_32325    4782 ## BC_7405     4719 ## BC_118831   4679 ## BC_418545   4661 ## BC_120596   4648 ## BC_5256     4643 ## BC_39281    4628 ## BC_258799   4591 ## BC_29284    4553 ## BC_85441    4534 ## BC_103714   4532 ## BC_37062    4505 ## BC_140320   4505 ## BC_20263    4464 ## BC_46524    4425 ## BC_321677   4409 ## BC_172412   4394 ## BC_139928   4370 ## BC_203520   4366 ## BC_105732   4315 ## BC_173736   4310 ## BC_13395    4244 ## BC_11391    4182 ## BC_142999   4102 ## BC_172238   4071 ## BC_79026    4055 ## BC_43123    4027 ## BC_128266   4010 ## BC_355420   3989 ## BC_415373   3989 ## BC_129519   3975 ## BC_3733     3965 ## BC_93485    3963 ## BC_40856    3941 ## BC_42612    3934 ## BC_289568   3933 ## BC_10454    3890 ## BC_38398    3876 ## BC_160158   3828 ## BC_32680    3822 ## BC_135438   3785 ## BC_346124   3761 ## BC_146666   3735 ## BC_42178    3703 ## BC_53234    3698 ## BC_356531   3677 ## BC_389078   3674 ## BC_635211   3668 ## BC_183401   3652 ## BC_132225   3650 ## BC_229995   3579 ## BC_102205   3564 ## BC_47726    3537 ## BC_564039   3502 ## BC_40516    3499 ## BC_45955    3495 ## BC_113839   3469 ## BC_102803   3468 ## BC_42310    3435 ## BC_8835     3425 ## BC_91412    3394 ## BC_15740    3388 ## BC_173674   3386 ## BC_44599    3373 ## BC_324711   3368 ## BC_519985   3294 ## BC_77030    3285 ## BC_350464   3253 ## BC_235128   3226 ## BC_151544   3214 ## BC_33699    3181 ## BC_474982   3168 ## BC_210529   3162 ## BC_217211   3130 ## BC_221056   3130 ## BC_187025   3128 ## BC_320233   3119 ## BC_7122     3112 ## BC_87047    3102 ## BC_76947    3053 ## BC_63846    3009 ## BC_560839   2990 ## BC_65130    2989 ## BC_2294     2986 ## BC_102160   2954 ## BC_273124   2945 ## BC_161563   2940 ## BC_389742   2920 ## BC_521485   2920 ## BC_145719   2911 ## BC_373901   2905 ## BC_162119   2891 ## BC_189813   2890 ## BC_17608    2878 ## BC_324953   2871 ## BC_320752   2863 ## BC_283335   2856 ## BC_67965    2840 ## BC_2865     2822 ## BC_242383   2817 ## BC_227308   2815 ## BC_346627   2779 ## BC_67233    2767 ## BC_672202   2748 ## BC_8324     2739 ## BC_211828   2737 ## BC_410172   2726 ## BC_495859   2711 ## BC_35659    2695 ## BC_199881   2675 ## BC_44600    2666 ## BC_377226   2649 ## BC_147006   2639 ## BC_41523    2631 ## BC_336794   2621 ## BC_26769    2607 ## BC_244320   2607 ## BC_183112   2600 ## BC_14377    2590 ## BC_7299     2571 ## BC_53380    2558 ## BC_10347    2543 ## BC_164378   2532 ## BC_806      2530 ## BC_20557    2523 ## BC_57621    2521 ## BC_389087   2510 ## BC_100344   2483 ## BC_408928   2456 ## BC_156353   2437 ## BC_154990   2422 ## BC_228994   2422 ## BC_33764    2417 ## BC_23522    2415 ## BC_4564     2388 ## BC_78349    2381 ## BC_10808    2376 ## BC_201293   2355 ## BC_81309    2350 ## BC_45652    2344 ## BC_123791   2325 ## BC_214604   2325 ## BC_2206     2300 ## BC_14492    2283 ## BC_146146   2282 ## BC_6093     2271 ## BC_421415   2269 ## BC_58144    2264 ## BC_167638   2253 ## BC_366637   2253 ## BC_207651   2252 ## BC_154519   2237 ## BC_4733     2236 ## BC_19353    2226 ## BC_326596   2225 ## BC_1764     2173 ## BC_86358    2169 ## BC_101581   2156 ## BC_23241    2151 ## BC_138900   2149 ## BC_11270    2143 ## BC_64945    2139 ## BC_37363    2131 ## BC_638624   2120 ## BC_195246   2112 ## BC_121663   2104 ## BC_672021   2092 ## BC_194823   2090 ## BC_206798   2069 ## BC_521264   2068 ## BC_12191    2065 ## BC_130431   2055 ## BC_462254   2048 ## BC_4531     2034 ## BC_22999    2032 ## BC_64931    2030 ## BC_214878   2028 ## BC_9340     2024 ## BC_350335   2022 ## BC_150291   2015 ## BC_196282   1997 ## BC_95934    1991 ## BC_211811   1981 ## BC_587139   1952 ## BC_199093   1951 ## BC_147380   1942 ## BC_228018   1942 ## BC_116921   1940 ## BC_514247   1938 ## BC_380559   1931 ## BC_141246   1919 ## BC_218093   1914 ## BC_88464    1912 ## BC_157906   1906 ## BC_145403   1881 ## BC_73098    1878 ## BC_61489    1876 ## BC_77101    1863 ## BC_266451   1849 ## BC_138737   1834 ## BC_201372   1833 ## BC_654016   1816 ## BC_444573   1811 ## BC_53219    1808 ## BC_57692    1792 ## BC_175957   1786 ## BC_12418    1777 ## BC_357846   1775 ## BC_14810    1760 ## BC_49226    1752 ## BC_175198   1746 ## BC_49044    1744 ## BC_539228   1743 ## BC_527469   1740 ## BC_181957   1739 ## BC_181554   1738 ## BC_91989    1731 ## BC_353112   1729 ## BC_130861   1727 ## BC_55675    1723 ## BC_10293    1690 ## BC_617554   1682 ## BC_346761   1681 ## BC_302238   1676 ## BC_426662   1675 ## BC_77187    1669 ## BC_19610    1655 ## BC_171953   1655 ## BC_217320   1654 ## BC_446649   1642 ## BC_29208    1632 ## BC_93884    1629 ## BC_20573    1627 ## BC_146322   1627 ## BC_221691   1620 ## BC_261055   1610 ## BC_3583     1607 ## BC_9626     1597 ## BC_6304     1592 ## BC_354350   1589 ## BC_13093    1586 ## BC_203989   1584 ## BC_114257   1577 ## BC_234390   1563 ## BC_249649   1563 ## BC_88099    1560 ## BC_322542   1550 ## BC_351660   1549 ## BC_52081    1544 ## BC_225019   1536 ## BC_596629   1523 ## BC_15448    1522 ## BC_528062   1522 ## BC_2430     1518 ## BC_324042   1514 ## BC_587343   1514 ## BC_67374    1512 ## BC_14484    1496 ## BC_83816    1487 ## BC_141114   1487 ## BC_318282   1487 ## BC_11055    1484 ## BC_45402    1472 ## BC_79755    1472 ## BC_357977   1466 ## BC_415903   1465 ## BC_115436   1461 ## BC_43206    1458 ## BC_50222    1458 ## BC_655329   1444 ## BC_147556   1443 ## BC_182320   1438 ## BC_31779    1437 ## BC_9322     1436 ## BC_162322   1428 ## BC_296283   1425 ## BC_381245   1422 ## BC_283541   1418 ## BC_67247    1411 ## BC_4198     1409 ## BC_31196    1407 ## BC_11152    1404 ## BC_61500    1398 ## BC_90135    1379 ## BC_47310    1378 ## BC_292962   1373 ## BC_82595    1361 ## BC_26258    1360 ## BC_99       1354 ## BC_94579    1351 ## BC_35283    1345 ## BC_238577   1339 ## BC_49397    1323 ## BC_363879   1323 ## BC_309303   1307 ## BC_12410    1304 ## BC_231962   1301 ## BC_7691     1300 ## BC_147063   1293 ## BC_302454   1290 ## BC_92584    1281 ## BC_31185    1273 ## BC_110945   1266 ## BC_144061   1266 ## BC_75688    1264 ## BC_70909    1244 ## BC_238160   1229 ## BC_491991   1228 ## BC_149347   1222 ## BC_195887   1219 ## BC_125634   1217 ## BC_1593     1213 ## BC_57794    1213 ## BC_207333   1212 ## BC_228333   1211 ## BC_316483   1202 ## BC_169627   1201 ## BC_52856    1196 ## BC_129559   1188 ## BC_67370    1175 ## BC_21535    1174 ## BC_515934   1173 ## BC_329007   1172 ## BC_275321   1169 ## BC_444761   1166 ## BC_13       1146 ## BC_516611   1146 ## BC_154696   1145 ## BC_129768   1140 ## BC_159570   1140 ## BC_103862   1135 ## BC_268745   1128 ## BC_9747     1126 ## BC_194092   1118 ## BC_2791     1116 ## BC_176231   1110 ## BC_57582    1109 ## BC_50311    1103 ## BC_48168    1099 ## BC_330625   1095 ## BC_413271   1091 ## BC_322219   1080 ## BC_179919   1079 ## BC_56489    1077 ## BC_257382   1074 ## BC_120505   1046 ## BC_472019   1044 ## BC_282868   1038 ## BC_164652   1033 ## BC_124624   1031 ## BC_355439   1030 ## BC_563624   1029 ## BC_430      1022 ## BC_15707    1012 ## BC_1977     1010 ## BC_17509    1008 ## BC_345889   1007 ## BC_473006   1005 ## BC_567519   1002 ## BC_26384     996 ## BC_28938     995 ## BC_245600    992 ## BC_145103    991 ## BC_81579     990 ## BC_10190     987 ## BC_248582    983 ## BC_142112    982 ## BC_576338    976 ## BC_288976    972 ## BC_90599     968 ## BC_255928    968 ## BC_454109    958 ## BC_220827    948 ## BC_35633     943 ## BC_33035     937 ## BC_62970     935 ## BC_381050    935 ## BC_14452     933 ## BC_189854    931 ## BC_329679    931 ## BC_66948     930 ## BC_82758     927 ## BC_84350     922 ## BC_228451    921 ## BC_186267    917 ## BC_257523    917 ## BC_20281     916 ## BC_170233    915 ## BC_15652     910 ## BC_41280     910 ## BC_276301    908 ## BC_25609     906 ## BC_182092    895 ## BC_186401    892 ## BC_37116     890 ## BC_14380     887 ## BC_259621    886 ## BC_171345    872 ## BC_278096    872 ## BC_567514    870 ## BC_44350     863 ## BC_131019    861 ## BC_297704    857 ## BC_165975    855 ## BC_451991    855 ## BC_370968    850 ## BC_80020     845 ## BC_212837    845 ## BC_4173      843 ## BC_97874     836 ## BC_2762      834 ## BC_143062    832 ## BC_35459     830 ## BC_115038    826 ## BC_6453      825 ## BC_163063    824 ## BC_28077     821 ## BC_23918     816 ## BC_389378    814 ## BC_222891    812 ## BC_250471    808 ## BC_56792     805 ## BC_229036    803 ## BC_170407    800 ## BC_154806    798 ## BC_38465     797 ## BC_337697    797 ## BC_230643    795 ## BC_164579    794 ## BC_146760    792 ## BC_59243     791 ## BC_557872    789 ## BC_652798    783 ## BC_127999    782 ## BC_4061      779 ## BC_22263     779 ## BC_22981     778 ## BC_66747     778 ## BC_8838      775 ## BC_23213     770 ## BC_49060     770 ## BC_29053     768 ## BC_535770    762 ## BC_345175    758 ## BC_7076      755 ## BC_29984     749 ## BC_153858    748 ## BC_5615      747 ## BC_26097     744 ## BC_147873    742 ## BC_19557     741 ## BC_19612     740 ## BC_14131     737 ## BC_100070    735 ## BC_190202    734 ## BC_125776    733 ## BC_388103    733 ## BC_29222     728 ## BC_509872    727 ## BC_561471    724 ## BC_57889     719 ## BC_168163    716 ## BC_18218     705 ## BC_294271    705 ## BC_65912     699 ## BC_4165      695 ## BC_345888    691 ## BC_8159      687 ## BC_1534      686 ## BC_15172     686 ## BC_78760     686 ## BC_23363     685 ## BC_427925    685 ## BC_65621     682 ## BC_41997     681 ## BC_109658    681 plotDetectedBarcodes(dge.filtered.collapsed, percentile = 1, plot = T, group = \"Treatment\") plotDetectedBarcodes(dge.filtered.collapsed, percentile = 0.95, plot = T, group = \"Treatment\")"},{"path":"https://danevass.github.io/bartools/articles/quickstart.html","id":"diversity-analysis","dir":"Articles","previous_headings":"Bartools Quickstart Guide > 4. Analysing Composition and Diversity","what":"Diversity analysis","title":"bartools: quickstart guide","text":"can examine diversity different ways. common Shannon, Simpson, Inverse Simpson Gini. applicable different circumstances, however Shannon diversity index widely used compare global diversity amongst populations barcoded cells.","code":"diversity <- calcDivIndexes(dge.filtered.collapsed$counts) ## Joining with `by = join_by(name)` diversity ##            name  shannon   simpson invsimpson      gini  group ## 1   1_High_dose 2.348595 0.8444003   6.426747 0.9944996 Group1 ## 2  10_High_dose 1.225780 0.6032511   2.520486 0.9979181 Group1 ## 3    11_Vehicle 2.651924 0.8814260   8.433552 0.9924681 Group1 ## 4    12_Vehicle 2.414033 0.8399949   6.249800 0.9938575 Group1 ## 5   13_Low_dose 2.019197 0.8131725   5.352531 0.9958395 Group1 ## 6   14_Low_dose 1.519874 0.6814167   3.138896 0.9975312 Group1 ## 7   15_Low_dose 1.832136 0.7746698   4.437931 0.9965920 Group1 ## 8   16_Low_dose 2.778791 0.9048391  10.508519 0.9918608 Group1 ## 9  17_High_dose 1.534413 0.6789847   3.115116 0.9974705 Group1 ## 10   18_Vehicle 3.153732 0.9327037  14.859650 0.9879949 Group1 ## 11  2_High_dose 2.256218 0.8510409   6.713251 0.9949786 Group1 ## 12  3_High_dose 1.798233 0.6916675   3.243252 0.9964293 Group1 ## 13    4_Vehicle 3.122387 0.9318059  14.664035 0.9884237 Group1 ## 14   5_Low_dose 1.704952 0.6350916   2.740414 0.9964065 Group1 ## 15  6_High_dose 1.855001 0.7799122   4.543641 0.9963006 Group1 ## 16    7_Vehicle 2.605078 0.8891045   9.017500 0.9931725 Group1 ## 17    8_Vehicle 2.599803 0.8583799   7.061143 0.9924983 Group1 ## 18   9_Low_dose 2.747539 0.8980367   9.807451 0.9919927 Group1 ## 19           T0 5.503885 0.9851023  67.124565 0.8199223 Group1 qplot(diversity$name, diversity$shannon) + theme_bw() + coord_flip() ## Warning: `qplot()` was deprecated in ggplot2 3.4.0. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated."},{"path":"https://danevass.github.io/bartools/articles/quickstart.html","id":"comparing-abundance","dir":"Articles","previous_headings":"Bartools Quickstart Guide > 4. Analysing Composition and Diversity","what":"Comparing abundance","title":"bartools: quickstart guide","text":"can also statistically test barcodes / tags / underrepresented group samples relative another using internal edgeR framework. bartools contains convenience wrapper functionality","code":"diff.bc <- compareAbundance(dge.filtered.collapsed,                   condition = dge.filtered.collapsed$samples$Treatment,                   condition_names = c(\"Vehicle\", \"High_dose\")) ## Error in compareAbundance(dge.filtered.collapsed, condition = dge.filtered.collapsed$samples$Treatment, : argument 2 matches multiple formal arguments diff.bc ## Error in eval(expr, envir, enclos): object 'diff.bc' not found"},{"path":"https://danevass.github.io/bartools/articles/quickstart.html","id":"linegraphs-of-barcode-abundance---not-working","dir":"Articles","previous_headings":"Bartools Quickstart Guide > 4. Analysing Composition and Diversity","what":"Linegraphs of barcode abundance - NOT WORKING","title":"bartools: quickstart guide","text":"","code":"plotAbundanceLines(dge.filtered.collapsed, condition = dge.filtered.collapsed$samples$group, condition_names = c(\"Vehicle\",\"High_dose\"), plot_type = 'counts')"},{"path":"https://danevass.github.io/bartools/articles/quickstart.html","id":"session-info","dir":"Articles","previous_headings":"Bartools Quickstart Guide","what":"5. Session Info","title":"bartools: quickstart guide","text":"","code":"sessionInfo() ## R version 4.2.2 (2022-10-31) ## Platform: aarch64-apple-darwin20 (64-bit) ## Running under: macOS Ventura 13.1 ##  ## Matrix products: default ## BLAS:   /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRblas.0.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRlapack.dylib ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] bartools_0.2.3 ggplot2_3.4.2  edgeR_3.40.2   limma_3.54.2   ##  ## loaded via a namespace (and not attached): ##  [1] nlme_3.1-162          matrixStats_1.0.0     fs_1.6.2              ##  [4] RColorBrewer_1.1-3    doParallel_1.0.17     rprojroot_2.0.3       ##  [7] ggsci_3.0.0           tools_4.2.2           backports_1.4.1       ## [10] bslib_0.5.0           utf8_1.2.3            R6_2.5.1              ## [13] vegan_2.6-4           BiocGenerics_0.44.0   mgcv_1.9-0            ## [16] colorspace_2.1-0      permute_0.9-7         GetoptLong_1.0.5      ## [19] withr_2.5.0           tidyselect_1.2.0      compiler_4.2.2        ## [22] textshaping_0.3.6     cli_3.6.1             desc_1.4.2            ## [25] labeling_0.4.2        sass_0.4.6            scales_1.2.1          ## [28] pkgdown_2.0.7         systemfonts_1.0.4     stringr_1.5.0         ## [31] digest_0.6.33         rmarkdown_2.23        pkgconfig_2.0.3       ## [34] htmltools_0.5.5       fastmap_1.1.1         highr_0.10            ## [37] rlang_1.1.1           GlobalOptions_0.1.2   rstudioapi_0.15.0     ## [40] shape_1.4.6           jquerylib_0.1.4       farver_2.1.1          ## [43] generics_0.1.3        jsonlite_1.8.7        dplyr_1.1.2           ## [46] car_3.1-2             magrittr_2.0.3        Matrix_1.6-0          ## [49] S4Vectors_0.36.2      Rcpp_1.0.11           munsell_0.5.0         ## [52] fansi_1.0.4           abind_1.4-5           lifecycle_1.0.3       ## [55] stringi_1.7.12        yaml_2.3.7            carData_3.0-5         ## [58] MASS_7.3-60           plyr_1.8.8            grid_4.2.2            ## [61] parallel_4.2.2        forcats_1.0.0         crayon_1.5.2          ## [64] lattice_0.21-8        splines_4.2.2         circlize_0.4.15       ## [67] magick_2.7.4          locfit_1.5-9.8        knitr_1.43            ## [70] ComplexHeatmap_2.14.0 pillar_1.9.0          ggpubr_0.6.0          ## [73] rjson_0.2.21          ggsignif_0.6.4        stats4_4.2.2          ## [76] reshape2_1.4.4        codetools_0.2-19      glue_1.6.2            ## [79] evaluate_0.21         vctrs_0.6.3           png_0.1-8             ## [82] foreach_1.5.2         gtable_0.3.3          purrr_1.0.1           ## [85] tidyr_1.3.0           clue_0.3-64           cachem_1.0.8          ## [88] xfun_0.39             broom_1.0.5           rstatix_0.7.2         ## [91] ragg_1.2.5            tibble_3.2.1          iterators_1.0.14      ## [94] ineq_0.2-13           memoise_2.0.1         IRanges_2.32.0        ## [97] cluster_2.1.4"},{"path":"https://danevass.github.io/bartools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dane Vassiliadis. Author, maintainer.","code":""},{"path":"https://danevass.github.io/bartools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vassiliadis D (2023). bartools: toolkit analysis visualisation synthetic DNA barcodes high thorughput sequencing datasets. R package version 0.2.5.","code":"@Manual{,   title = {bartools: A toolkit for the analysis and visualisation of synthetic DNA barcodes in high thorughput sequencing datasets},   author = {Dane Vassiliadis},   year = {2023},   note = {R package version 0.2.5}, }"},{"path":[]},{"path":[]},{"path":"https://danevass.github.io/bartools/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"A toolkit for the analysis and visualisation of synthetic DNA barcodes in high thorughput sequencing datasets","text":"Cellular barcoding powerful widespread method accurately track progeny clone within population cells, enabling dissection biological phenomena single cell resolution. However remains need scalable standardised open-source tools pre-process visualise cellular barcoding datasets. bartools package R-based toolkit analysis cellular barcoding information high throughput sequencing datasets. package consists suite functions annotate, analyse plot DNA barcodes read using common high throughput sequencing methodologies Illumina machines. bartools package optimised use SPLINTR lineage barcode libraries however functions within can adapted cellular barcoding methodology utiilses random DNA barcodes.","code":""},{"path":"https://danevass.github.io/bartools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A toolkit for the analysis and visualisation of synthetic DNA barcodes in high thorughput sequencing datasets","text":"can install development version bartools GitHub:","code":"if (!requireNamespace(\"devtools\", quietly = TRUE)) {   install.packages(\"devtools\") } devtools::install_github(\"DaneVass/bartools\", dependencies = TRUE)"},{"path":"https://danevass.github.io/bartools/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"A toolkit for the analysis and visualisation of synthetic DNA barcodes in high thorughput sequencing datasets","text":"See vignette(bartools) details usage examples.","code":""},{"path":"https://danevass.github.io/bartools/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"A toolkit for the analysis and visualisation of synthetic DNA barcodes in high thorughput sequencing datasets","text":"See Docs full package documentation.","code":""},{"path":"https://danevass.github.io/bartools/index.html","id":"looking-for-a-dataset-preprocessing-pipeline","dir":"","previous_headings":"","what":"Looking for a dataset preprocessing pipeline?","title":"A toolkit for the analysis and visualisation of synthetic DNA barcodes in high thorughput sequencing datasets","text":"also developed BARtab, pre-processing pipeline automate extraction enumeration barcode reads raw sequence files. See github ","code":""},{"path":"https://danevass.github.io/bartools/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"A toolkit for the analysis and visualisation of synthetic DNA barcodes in high thorughput sequencing datasets","text":"bartools package developed Dane Vassiliadis. Please post issues https://github.com/DaneVass/bartools/issues","code":""},{"path":"https://danevass.github.io/bartools/reference/annotateBarcodeReads.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate Barcode Reads — annotateBarcodeReads","title":"Annotate Barcode Reads — annotateBarcodeReads","text":"Matches cells single cell experiment detected DNA barcodes. Dataframe returned cells matched barcode barcode matchable cell \".detected\" returned cells multiple detected barcodes barcode returned separated ';'","code":""},{"path":"https://danevass.github.io/bartools/reference/annotateBarcodeReads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate Barcode Reads — annotateBarcodeReads","text":"","code":"annotateBarcodeReads(all.cells, barcoded.cells)"},{"path":"https://danevass.github.io/bartools/reference/annotateBarcodeReads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate Barcode Reads — annotateBarcodeReads","text":".cells list cells experiment annotated barcoded.cells dataframe dataframe cell id barcode id columns","code":""},{"path":"https://danevass.github.io/bartools/reference/annotateBarcodeReads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate Barcode Reads — annotateBarcodeReads","text":"Returns data-frame containing 10X cell ID DNA barcode ID.","code":""},{"path":"https://danevass.github.io/bartools/reference/calcDivIndexes.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate diversity indices for barcode samples — calcDivIndexes","title":"Calculate diversity indices for barcode samples — calcDivIndexes","text":"Takes dataframe barcode counts computes shannon, simpson, inverse simpson gini coefficients sample","code":""},{"path":"https://danevass.github.io/bartools/reference/calcDivIndexes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate diversity indices for barcode samples — calcDivIndexes","text":"","code":"calcDivIndexes(dat)"},{"path":"https://danevass.github.io/bartools/reference/calcDivIndexes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate diversity indices for barcode samples — calcDivIndexes","text":"dat dataframe raw normalised counts samples columns observations/barcodes rows","code":""},{"path":"https://danevass.github.io/bartools/reference/calcDivIndexes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate diversity indices for barcode samples — calcDivIndexes","text":"Returns data-frame containing calculated diversity indices per sample","code":""},{"path":"https://danevass.github.io/bartools/reference/calcDivIndexes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate diversity indices for barcode samples — calcDivIndexes","text":"calcDivIndexes Calculates common diversity indices per sample dataframe counts","code":""},{"path":"https://danevass.github.io/bartools/reference/calcDivIndexes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate diversity indices for barcode samples — calcDivIndexes","text":"","code":"indexes <- calcDivIndexes(dat = test.counts) #> Error in calcDivIndexes(dat = test.counts): unused argument (dat = test.counts)"},{"path":"https://danevass.github.io/bartools/reference/calcPercentileBarcodes.html","id":null,"dir":"Reference","previous_headings":"","what":"calcPercentileBarcodes — calcPercentileBarcodes","title":"calcPercentileBarcodes — calcPercentileBarcodes","text":"Calculate barcodes comprising Nth percentile sample & generate cumulative sum plots","code":""},{"path":"https://danevass.github.io/bartools/reference/calcPercentileBarcodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calcPercentileBarcodes — calcPercentileBarcodes","text":"","code":"calcPercentileBarcodes(counts.obj, percentile = 0.95)"},{"path":"https://danevass.github.io/bartools/reference/calcPercentileBarcodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calcPercentileBarcodes — calcPercentileBarcodes","text":"counts.obj DGEList object containing raw normalised barcode counts percentile desired percentile value","code":""},{"path":"https://danevass.github.io/bartools/reference/calcPercentileBarcodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calcPercentileBarcodes — calcPercentileBarcodes","text":"Returns list object containing nth percentile tables barcode counts per sample","code":""},{"path":"https://danevass.github.io/bartools/reference/calcPercentileBarcodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"calcPercentileBarcodes — calcPercentileBarcodes","text":"","code":"data(test.dge) calcPercentileBarcodes(test.dge, percentile = .95) #> $NumBarcodes #>    Sample NumBarcodes #> 1    T0-1         593 #> 2    T0-2         590 #> 3   S10-1           3 #> 4   S10-2           4 #> 5   S11-1          19 #> 6   S11-2          20 #> 7   S12-1          14 #> 8   S12-2          14 #> 9   S13-1          10 #> 10  S13-2          11 #> 11  S14-1           6 #> 12  S14-2           6 #> 13  S15-1           7 #> 14  S15-2           7 #> 15  S16-1          19 #> 16  S16-2          20 #> 17  S17-1           5 #> 18  S17-2           6 #> 19  S18-1          27 #> 20  S18-2          27 #> 21   S1-1          14 #> 22   S1-2          15 #> 23   S2-1          12 #> 24   S2-2          11 #> 25   S3-1          10 #> 26   S3-2          10 #> 27   S4-1          25 #> 28   S4-2          26 #> 29   S5-1          11 #> 30   S5-2          12 #> 31   S6-1           9 #> 32   S6-2          10 #> 33   S7-1          16 #> 34   S7-2          16 #> 35   S8-1          20 #> 36   S8-2          21 #> 37   S9-1          19 #> 38   S9-2          19 #>  #> $TopBarcodes #> $TopBarcodes$`T0-1` #>   [1] \"BC_245016\" \"BC_121651\" \"BC_420967\" \"BC_108059\" \"BC_323670\" \"BC_9141\"   #>   [7] \"BC_331193\" \"BC_119418\" \"BC_65104\"  \"BC_17570\"  \"BC_35704\"  \"BC_383329\" #>  [13] \"BC_92942\"  \"BC_24510\"  \"BC_1396\"   \"BC_83680\"  \"BC_55858\"  \"BC_38589\"  #>  [19] \"BC_137495\" \"BC_69627\"  \"BC_446739\" \"BC_171385\" \"BC_12367\"  \"BC_280320\" #>  [25] \"BC_15782\"  \"BC_310257\" \"BC_221975\" \"BC_313129\" \"BC_67201\"  \"BC_3618\"   #>  [31] \"BC_107789\" \"BC_36103\"  \"BC_2596\"   \"BC_69641\"  \"BC_215831\" \"BC_16618\"  #>  [37] \"BC_249402\" \"BC_141060\" \"BC_13611\"  \"BC_22306\"  \"BC_588849\" \"BC_43535\"  #>  [43] \"BC_16956\"  \"BC_175651\" \"BC_294188\" \"BC_46538\"  \"BC_344050\" \"BC_25084\"  #>  [49] \"BC_56819\"  \"BC_206193\" \"BC_428803\" \"BC_219379\" \"BC_400391\" \"BC_19146\"  #>  [55] \"BC_205581\" \"BC_148563\" \"BC_114027\" \"BC_172626\" \"BC_403084\" \"BC_62602\"  #>  [61] \"BC_224300\" \"BC_47439\"  \"BC_18278\"  \"BC_43128\"  \"BC_68847\"  \"BC_111272\" #>  [67] \"BC_58978\"  \"BC_162898\" \"BC_476380\" \"BC_262618\" \"BC_276866\" \"BC_252374\" #>  [73] \"BC_550404\" \"BC_325065\" \"BC_202891\" \"BC_50136\"  \"BC_255436\" \"BC_103528\" #>  [79] \"BC_425129\" \"BC_168818\" \"BC_204266\" \"BC_176946\" \"BC_521149\" \"BC_105387\" #>  [85] \"BC_227720\" \"BC_83707\"  \"BC_64584\"  \"BC_21018\"  \"BC_458543\" \"BC_11643\"  #>  [91] \"BC_175871\" \"BC_556149\" \"BC_34617\"  \"BC_166467\" \"BC_41692\"  \"BC_72619\"  #>  [97] \"BC_168530\" \"BC_289383\" \"BC_2040\"   \"BC_516753\" \"BC_24159\"  \"BC_249161\" #> [103] \"BC_345717\" \"BC_54442\"  \"BC_236596\" \"BC_248159\" \"BC_206263\" \"BC_376665\" #> [109] \"BC_18345\"  \"BC_114040\" \"BC_612467\" \"BC_56338\"  \"BC_363714\" \"BC_39281\"  #> [115] \"BC_30946\"  \"BC_32325\"  \"BC_418545\" \"BC_103714\" \"BC_140320\" \"BC_120596\" #> [121] \"BC_503475\" \"BC_160057\" \"BC_16754\"  \"BC_43673\"  \"BC_173736\" \"BC_46524\"  #> [127] \"BC_142999\" \"BC_11277\"  \"BC_67854\"  \"BC_258799\" \"BC_13395\"  \"BC_37062\"  #> [133] \"BC_38398\"  \"BC_105732\" \"BC_139928\" \"BC_355420\" \"BC_40856\"  \"BC_128266\" #> [139] \"BC_321677\" \"BC_203520\" \"BC_29284\"  \"BC_172412\" \"BC_85441\"  \"BC_20263\"  #> [145] \"BC_118831\" \"BC_10454\"  \"BC_5256\"   \"BC_129519\" \"BC_11391\"  \"BC_172238\" #> [151] \"BC_43123\"  \"BC_42178\"  \"BC_102205\" \"BC_346124\" \"BC_389078\" \"BC_42612\"  #> [157] \"BC_93485\"  \"BC_415373\" \"BC_3733\"   \"BC_32680\"  \"BC_474982\" \"BC_7405\"   #> [163] \"BC_289568\" \"BC_229995\" \"BC_79026\"  \"BC_45955\"  \"BC_146666\" \"BC_183401\" #> [169] \"BC_356531\" \"BC_187025\" \"BC_42310\"  \"BC_221056\" \"BC_132225\" \"BC_235128\" #> [175] \"BC_15740\"  \"BC_160158\" \"BC_320233\" \"BC_8835\"   \"BC_173674\" \"BC_53234\"  #> [181] \"BC_91412\"  \"BC_135438\" \"BC_373901\" \"BC_44599\"  \"BC_87047\"  \"BC_350464\" #> [187] \"BC_324711\" \"BC_40516\"  \"BC_113839\" \"BC_162119\" \"BC_33699\"  \"BC_635211\" #> [193] \"BC_346627\" \"BC_7122\"   \"BC_806\"    \"BC_63846\"  \"BC_283335\" \"BC_151544\" #> [199] \"BC_273124\" \"BC_227308\" \"BC_47726\"  \"BC_102803\" \"BC_244320\" \"BC_10347\"  #> [205] \"BC_389742\" \"BC_2865\"   \"BC_77030\"  \"BC_65130\"  \"BC_564039\" \"BC_519985\" #> [211] \"BC_76947\"  \"BC_4564\"   \"BC_521485\" \"BC_495859\" \"BC_35659\"  \"BC_14377\"  #> [217] \"BC_199881\" \"BC_147006\" \"BC_26769\"  \"BC_100344\" \"BC_672202\" \"BC_146146\" #> [223] \"BC_320752\" \"BC_324953\" \"BC_217211\" \"BC_67965\"  \"BC_210529\" \"BC_189813\" #> [229] \"BC_242383\" \"BC_560839\" \"BC_228994\" \"BC_389087\" \"BC_44600\"  \"BC_20557\"  #> [235] \"BC_10808\"  \"BC_138900\" \"BC_81309\"  \"BC_145719\" \"BC_58144\"  \"BC_7299\"   #> [241] \"BC_78349\"  \"BC_102160\" \"BC_164378\" \"BC_211828\" \"BC_336794\" \"BC_53380\"  #> [247] \"BC_14492\"  \"BC_23241\"  \"BC_57621\"  \"BC_11270\"  \"BC_41523\"  \"BC_33764\"  #> [253] \"BC_12191\"  \"BC_17608\"  \"BC_8324\"   \"BC_183112\" \"BC_167638\" \"BC_2206\"   #> [259] \"BC_123791\" \"BC_377226\" \"BC_195246\" \"BC_161563\" \"BC_67233\"  \"BC_421415\" #> [265] \"BC_150291\" \"BC_408928\" \"BC_410172\" \"BC_121663\" \"BC_201293\" \"BC_156353\" #> [271] \"BC_45652\"  \"BC_357846\" \"BC_199093\" \"BC_214878\" \"BC_6093\"   \"BC_214604\" #> [277] \"BC_302238\" \"BC_521264\" \"BC_672021\" \"BC_2294\"   \"BC_587139\" \"BC_638624\" #> [283] \"BC_86358\"  \"BC_1764\"   \"BC_366637\" \"BC_218093\" \"BC_201372\" \"BC_19353\"  #> [289] \"BC_130431\" \"BC_22999\"  \"BC_49044\"  \"BC_154519\" \"BC_324042\" \"BC_37363\"  #> [295] \"BC_154990\" \"BC_350335\" \"BC_194823\" \"BC_23522\"  \"BC_141246\" \"BC_4531\"   #> [301] \"BC_4733\"   \"BC_654016\" \"BC_147380\" \"BC_196282\" \"BC_52081\"  \"BC_207651\" #> [307] \"BC_380559\" \"BC_527469\" \"BC_353112\" \"BC_426662\" \"BC_655329\" \"BC_73098\"  #> [313] \"BC_146322\" \"BC_596629\" \"BC_64945\"  \"BC_462254\" \"BC_261055\" \"BC_145403\" #> [319] \"BC_61489\"  \"BC_617554\" \"BC_228018\" \"BC_249649\" \"BC_211811\" \"BC_101581\" #> [325] \"BC_43206\"  \"BC_326596\" \"BC_514247\" \"BC_88464\"  \"BC_203989\" \"BC_206798\" #> [331] \"BC_19610\"  \"BC_9626\"   \"BC_116921\" \"BC_181554\" \"BC_79755\"  \"BC_77101\"  #> [337] \"BC_55675\"  \"BC_83816\"  \"BC_138737\" \"BC_322542\" \"BC_318282\" \"BC_444573\" #> [343] \"BC_9340\"   \"BC_49226\"  \"BC_57692\"  \"BC_93884\"  \"BC_181957\" \"BC_217320\" #> [349] \"BC_296283\" \"BC_3583\"   \"BC_11055\"  \"BC_95934\"  \"BC_88099\"  \"BC_35283\"  #> [355] \"BC_67374\"  \"BC_175957\" \"BC_266451\" \"BC_283541\" \"BC_14484\"  \"BC_14810\"  #> [361] \"BC_157906\" \"BC_354350\" \"BC_539228\" \"BC_61500\"  \"BC_45402\"  \"BC_234390\" #> [367] \"BC_415903\" \"BC_12418\"  \"BC_238160\" \"BC_29208\"  \"BC_91989\"  \"BC_92584\"  #> [373] \"BC_351660\" \"BC_381245\" \"BC_31196\"  \"BC_47310\"  \"BC_20573\"  \"BC_64931\"  #> [379] \"BC_2430\"   \"BC_15448\"  \"BC_94579\"  \"BC_171953\" \"BC_9322\"   \"BC_587343\" #> [385] \"BC_50222\"  \"BC_53219\"  \"BC_77187\"  \"BC_7691\"   \"BC_225019\" \"BC_238577\" #> [391] \"BC_6304\"   \"BC_13093\"  \"BC_154696\" \"BC_275321\" \"BC_75688\"  \"BC_10293\"  #> [397] \"BC_13\"     \"BC_90135\"  \"BC_357977\" \"BC_4198\"   \"BC_147556\" \"BC_231962\" #> [403] \"BC_175198\" \"BC_144061\" \"BC_26258\"  \"BC_114257\" \"BC_194092\" \"BC_31779\"  #> [409] \"BC_268745\" \"BC_67247\"  \"BC_82595\"  \"BC_103862\" \"BC_149347\" \"BC_346761\" #> [415] \"BC_473006\" \"BC_49397\"  \"BC_302454\" \"BC_207333\" \"BC_31185\"  \"BC_115436\" #> [421] \"BC_124624\" \"BC_491991\" \"BC_309303\" \"BC_12410\"  \"BC_228333\" \"BC_528062\" #> [427] \"BC_363879\" \"BC_70909\"  \"BC_563624\" \"BC_11152\"  \"BC_446649\" \"BC_129768\" #> [433] \"BC_129559\" \"BC_169627\" \"BC_21535\"  \"BC_516611\" \"BC_57582\"  \"BC_159570\" #> [439] \"BC_130861\" \"BC_48168\"  \"BC_66948\"  \"BC_257382\" \"BC_179919\" \"BC_15707\"  #> [445] \"BC_17509\"  \"BC_444761\" \"BC_57794\"  \"BC_147063\" \"BC_52856\"  \"BC_14452\"  #> [451] \"BC_316483\" \"BC_186401\" \"BC_90599\"  \"BC_245600\" \"BC_1977\"   \"BC_99\"     #> [457] \"BC_176231\" \"BC_472019\" \"BC_292962\" \"BC_221691\" \"BC_170233\" \"BC_182320\" #> [463] \"BC_381050\" \"BC_28938\"  \"BC_67370\"  \"BC_110945\" \"BC_195887\" \"BC_257523\" #> [469] \"BC_2762\"   \"BC_255928\" \"BC_355439\" \"BC_33035\"  \"BC_125634\" \"BC_430\"    #> [475] \"BC_146760\" \"BC_164579\" \"BC_345889\" \"BC_142112\" \"BC_515934\" \"BC_141114\" #> [481] \"BC_20281\"  \"BC_322219\" \"BC_248582\" \"BC_1593\"   \"BC_9747\"   \"BC_82758\"  #> [487] \"BC_329007\" \"BC_567519\" \"BC_229036\" \"BC_50311\"  \"BC_576338\" \"BC_189854\" #> [493] \"BC_25609\"  \"BC_56489\"  \"BC_10190\"  \"BC_41280\"  \"BC_370968\" \"BC_162322\" #> [499] \"BC_337697\" \"BC_6453\"   \"BC_186267\" \"BC_222891\" \"BC_297704\" \"BC_145103\" #> [505] \"BC_81579\"  \"BC_35633\"  \"BC_170407\" \"BC_62970\"  \"BC_120505\" \"BC_66747\"  #> [511] \"BC_413466\" \"BC_329679\" \"BC_454109\" \"BC_37116\"  \"BC_389378\" \"BC_4061\"   #> [517] \"BC_163063\" \"BC_125776\" \"BC_38465\"  \"BC_278096\" \"BC_288976\" \"BC_171345\" #> [523] \"BC_557872\" \"BC_127999\" \"BC_259621\" \"BC_314343\" \"BC_80020\"  \"BC_228451\" #> [529] \"BC_282868\" \"BC_182092\" \"BC_56792\"  \"BC_143062\" \"BC_219703\" \"BC_235649\" #> [535] \"BC_131019\" \"BC_561471\" \"BC_22981\"  \"BC_567514\" \"BC_345175\" \"BC_345888\" #> [541] \"BC_7076\"   \"BC_220827\" \"BC_23213\"  \"BC_73196\"  \"BC_2142\"   \"BC_41997\"  #> [547] \"BC_147873\" \"BC_19557\"  \"BC_29053\"  \"BC_230643\" \"BC_28077\"  \"BC_22263\"  #> [553] \"BC_29984\"  \"BC_215667\" \"BC_69571\"  \"BC_8838\"   \"BC_275938\" \"BC_413636\" #> [559] \"BC_2791\"   \"BC_26462\"  \"BC_29222\"  \"BC_4173\"   \"BC_89937\"  \"BC_8159\"   #> [565] \"BC_413271\" \"BC_14131\"  \"BC_59243\"  \"BC_190202\" \"BC_294271\" \"BC_23918\"  #> [571] \"BC_154806\" \"BC_214774\" \"BC_26384\"  \"BC_57471\"  \"BC_1534\"   \"BC_451991\" #> [577] \"BC_15172\"  \"BC_109658\" \"BC_483925\" \"BC_71820\"  \"BC_330625\" \"BC_153858\" #> [583] \"BC_319910\" \"BC_459545\" \"BC_53645\"  \"BC_84350\"  \"BC_427925\" \"BC_75310\"  #> [589] \"BC_5615\"   \"BC_142652\" \"BC_50626\"  \"BC_107381\" \"BC_8715\"   #>  #> $TopBarcodes$`T0-2` #>   [1] \"BC_245016\" \"BC_121651\" \"BC_420967\" \"BC_108059\" \"BC_323670\" \"BC_9141\"   #>   [7] \"BC_331193\" \"BC_119418\" \"BC_65104\"  \"BC_17570\"  \"BC_35704\"  \"BC_92942\"  #>  [13] \"BC_383329\" \"BC_83680\"  \"BC_1396\"   \"BC_24510\"  \"BC_55858\"  \"BC_38589\"  #>  [19] \"BC_313129\" \"BC_446739\" \"BC_137495\" \"BC_69627\"  \"BC_171385\" \"BC_280320\" #>  [25] \"BC_221975\" \"BC_12367\"  \"BC_15782\"  \"BC_3618\"   \"BC_310257\" \"BC_107789\" #>  [31] \"BC_67201\"  \"BC_36103\"  \"BC_215831\" \"BC_43535\"  \"BC_2596\"   \"BC_13611\"  #>  [37] \"BC_294188\" \"BC_588849\" \"BC_16618\"  \"BC_69641\"  \"BC_22306\"  \"BC_428803\" #>  [43] \"BC_403084\" \"BC_141060\" \"BC_205581\" \"BC_249402\" \"BC_206193\" \"BC_25084\"  #>  [49] \"BC_344050\" \"BC_400391\" \"BC_325065\" \"BC_219379\" \"BC_46538\"  \"BC_289383\" #>  [55] \"BC_56819\"  \"BC_43128\"  \"BC_175651\" \"BC_18278\"  \"BC_172626\" \"BC_19146\"  #>  [61] \"BC_47439\"  \"BC_252374\" \"BC_58978\"  \"BC_21018\"  \"BC_521149\" \"BC_16956\"  #>  [67] \"BC_262618\" \"BC_50136\"  \"BC_202891\" \"BC_148563\" \"BC_62602\"  \"BC_458543\" #>  [73] \"BC_68847\"  \"BC_114027\" \"BC_476380\" \"BC_276866\" \"BC_111272\" \"BC_176946\" #>  [79] \"BC_255436\" \"BC_168818\" \"BC_550404\" \"BC_175871\" \"BC_204266\" \"BC_64584\"  #>  [85] \"BC_425129\" \"BC_83707\"  \"BC_162898\" \"BC_224300\" \"BC_103528\" \"BC_34617\"  #>  [91] \"BC_72619\"  \"BC_516753\" \"BC_105387\" \"BC_376665\" \"BC_18345\"  \"BC_2040\"   #>  [97] \"BC_168530\" \"BC_11643\"  \"BC_114040\" \"BC_227720\" \"BC_556149\" \"BC_7405\"   #> [103] \"BC_249161\" \"BC_345717\" \"BC_363714\" \"BC_248159\" \"BC_24159\"  \"BC_236596\" #> [109] \"BC_16754\"  \"BC_206263\" \"BC_118831\" \"BC_54442\"  \"BC_41692\"  \"BC_503475\" #> [115] \"BC_5256\"   \"BC_11277\"  \"BC_67854\"  \"BC_30946\"  \"BC_43673\"  \"BC_29284\"  #> [121] \"BC_85441\"  \"BC_160057\" \"BC_166467\" \"BC_56338\"  \"BC_20263\"  \"BC_258799\" #> [127] \"BC_172412\" \"BC_32325\"  \"BC_321677\" \"BC_79026\"  \"BC_37062\"  \"BC_120596\" #> [133] \"BC_203520\" \"BC_418545\" \"BC_135438\" \"BC_139928\" \"BC_160158\" \"BC_635211\" #> [139] \"BC_612467\" \"BC_11391\"  \"BC_564039\" \"BC_47726\"  \"BC_105732\" \"BC_46524\"  #> [145] \"BC_53234\"  \"BC_103714\" \"BC_140320\" \"BC_289568\" \"BC_415373\" \"BC_102803\" #> [151] \"BC_39281\"  \"BC_3733\"   \"BC_172238\" \"BC_93485\"  \"BC_13395\"  \"BC_43123\"  #> [157] \"BC_2294\"   \"BC_146666\" \"BC_132225\" \"BC_40516\"  \"BC_173736\" \"BC_42612\"  #> [163] \"BC_356531\" \"BC_113839\" \"BC_519985\" \"BC_129519\" \"BC_77030\"  \"BC_32680\"  #> [169] \"BC_183401\" \"BC_128266\" \"BC_210529\" \"BC_161563\" \"BC_355420\" \"BC_217211\" #> [175] \"BC_324711\" \"BC_10454\"  \"BC_91412\"  \"BC_44599\"  \"BC_40856\"  \"BC_8835\"   #> [181] \"BC_142999\" \"BC_173674\" \"BC_151544\" \"BC_229995\" \"BC_346124\" \"BC_42310\"  #> [187] \"BC_102160\" \"BC_45955\"  \"BC_15740\"  \"BC_17608\"  \"BC_350464\" \"BC_560839\" #> [193] \"BC_389078\" \"BC_76947\"  \"BC_33699\"  \"BC_145719\" \"BC_42178\"  \"BC_67233\"  #> [199] \"BC_38398\"  \"BC_7122\"   \"BC_410172\" \"BC_65130\"  \"BC_189813\" \"BC_8324\"   #> [205] \"BC_324953\" \"BC_521485\" \"BC_235128\" \"BC_63846\"  \"BC_320752\" \"BC_87047\"  #> [211] \"BC_67965\"  \"BC_102205\" \"BC_242383\" \"BC_377226\" \"BC_389742\" \"BC_211828\" #> [217] \"BC_273124\" \"BC_23522\"  \"BC_154990\" \"BC_320233\" \"BC_41523\"  \"BC_183112\" #> [223] \"BC_221056\" \"BC_2865\"   \"BC_672202\" \"BC_187025\" \"BC_326596\" \"BC_283335\" #> [229] \"BC_336794\" \"BC_44600\"  \"BC_227308\" \"BC_156353\" \"BC_207651\" \"BC_408928\" #> [235] \"BC_495859\" \"BC_162119\" \"BC_64931\"  \"BC_7299\"   \"BC_53380\"  \"BC_35659\"  #> [241] \"BC_101581\" \"BC_4733\"   \"BC_199881\" \"BC_57621\"  \"BC_373901\" \"BC_164378\" #> [247] \"BC_147006\" \"BC_214604\" \"BC_45652\"  \"BC_154519\" \"BC_64945\"  \"BC_346627\" #> [253] \"BC_201293\" \"BC_366637\" \"BC_26769\"  \"BC_474982\" \"BC_206798\" \"BC_9340\"   #> [259] \"BC_19353\"  \"BC_95934\"  \"BC_20557\"  \"BC_14377\"  \"BC_6093\"   \"BC_33764\"  #> [265] \"BC_389087\" \"BC_130861\" \"BC_157906\" \"BC_462254\" \"BC_244320\" \"BC_1764\"   #> [271] \"BC_123791\" \"BC_37363\"  \"BC_86358\"  \"BC_194823\" \"BC_211811\" \"BC_53219\"  #> [277] \"BC_421415\" \"BC_100344\" \"BC_2206\"   \"BC_78349\"  \"BC_221691\" \"BC_116921\" #> [283] \"BC_228994\" \"BC_10347\"  \"BC_514247\" \"BC_175198\" \"BC_266451\" \"BC_638624\" #> [289] \"BC_4531\"   \"BC_10808\"  \"BC_88464\"  \"BC_228018\" \"BC_196282\" \"BC_81309\"  #> [295] \"BC_167638\" \"BC_130431\" \"BC_346761\" \"BC_77101\"  \"BC_672021\" \"BC_446649\" #> [301] \"BC_12418\"  \"BC_22999\"  \"BC_350335\" \"BC_14492\"  \"BC_806\"    \"BC_141114\" #> [307] \"BC_138737\" \"BC_10293\"  \"BC_175957\" \"BC_14810\"  \"BC_444573\" \"BC_521264\" #> [313] \"BC_147380\" \"BC_380559\" \"BC_539228\" \"BC_162322\" \"BC_91989\"  \"BC_145403\" #> [319] \"BC_57692\"  \"BC_61489\"  \"BC_58144\"  \"BC_4564\"   \"BC_77187\"  \"BC_121663\" #> [325] \"BC_73098\"  \"BC_141246\" \"BC_195246\" \"BC_49226\"  \"BC_171953\" \"BC_181957\" #> [331] \"BC_214878\" \"BC_182320\" \"BC_114257\" \"BC_146146\" \"BC_6304\"   \"BC_181554\" #> [337] \"BC_13093\"  \"BC_528062\" \"BC_587139\" \"BC_55675\"  \"BC_23241\"  \"BC_11270\"  #> [343] \"BC_20573\"  \"BC_29208\"  \"BC_218093\" \"BC_654016\" \"BC_150291\" \"BC_292962\" #> [349] \"BC_217320\" \"BC_199093\" \"BC_138900\" \"BC_225019\" \"BC_12191\"  \"BC_354350\" #> [355] \"BC_115436\" \"BC_99\"     \"BC_93884\"  \"BC_234390\" \"BC_527469\" \"BC_351660\" #> [361] \"BC_201372\" \"BC_3583\"   \"BC_19610\"  \"BC_587343\" \"BC_353112\" \"BC_15448\"  #> [367] \"BC_357977\" \"BC_2430\"   \"BC_617554\" \"BC_11152\"  \"BC_31779\"  \"BC_330625\" #> [373] \"BC_147556\" \"BC_88099\"  \"BC_2791\"   \"BC_67247\"  \"BC_110945\" \"BC_50222\"  #> [379] \"BC_147063\" \"BC_9626\"   \"BC_1593\"   \"BC_426662\" \"BC_413271\" \"BC_49044\"  #> [385] \"BC_4198\"   \"BC_164652\" \"BC_125634\" \"BC_322542\" \"BC_203989\" \"BC_67374\"  #> [391] \"BC_45402\"  \"BC_14484\"  \"BC_195887\" \"BC_9322\"   \"BC_415903\" \"BC_82595\"  #> [397] \"BC_329007\" \"BC_146322\" \"BC_261055\" \"BC_90135\"  \"BC_26258\"  \"BC_363879\" #> [403] \"BC_515934\" \"BC_11055\"  \"BC_49397\"  \"BC_381245\" \"BC_309303\" \"BC_12410\"  #> [409] \"BC_249649\" \"BC_318282\" \"BC_57794\"  \"BC_67370\"  \"BC_316483\" \"BC_31196\"  #> [415] \"BC_357846\" \"BC_9747\"   \"BC_83816\"  \"BC_26384\"  \"BC_52856\"  \"BC_302454\" #> [421] \"BC_50311\"  \"BC_282868\" \"BC_61500\"  \"BC_238577\" \"BC_47310\"  \"BC_31185\"  #> [427] \"BC_283541\" \"BC_79755\"  \"BC_231962\" \"BC_56489\"  \"BC_120505\" \"BC_94579\"  #> [433] \"BC_444761\" \"BC_70909\"  \"BC_296283\" \"BC_15652\"  \"BC_276301\" \"BC_322219\" #> [439] \"BC_169627\" \"BC_84350\"  \"BC_596629\" \"BC_21535\"  \"BC_52081\"  \"BC_7691\"   #> [445] \"BC_302238\" \"BC_165975\" \"BC_14380\"  \"BC_144061\" \"BC_129559\" \"BC_491991\" #> [451] \"BC_43206\"  \"BC_35459\"  \"BC_228333\" \"BC_176231\" \"BC_75688\"  \"BC_516611\" #> [457] \"BC_149347\" \"BC_220827\" \"BC_207333\" \"BC_159570\" \"BC_288976\" \"BC_81579\"  #> [463] \"BC_44350\"  \"BC_145103\" \"BC_35283\"  \"BC_250471\" \"BC_97874\"  \"BC_567519\" #> [469] \"BC_454109\" \"BC_355439\" \"BC_430\"    \"BC_57582\"  \"BC_48168\"  \"BC_10190\"  #> [475] \"BC_19612\"  \"BC_92584\"  \"BC_212837\" \"BC_129768\" \"BC_345889\" \"BC_115038\" #> [481] \"BC_228451\" \"BC_451991\" \"BC_179919\" \"BC_576338\" \"BC_655329\" \"BC_472019\" #> [487] \"BC_168163\" \"BC_35633\"  \"BC_257382\" \"BC_535770\" \"BC_329679\" \"BC_248582\" #> [493] \"BC_62970\"  \"BC_324042\" \"BC_18218\"  \"BC_182092\" \"BC_142112\" \"BC_4173\"   #> [499] \"BC_100070\" \"BC_259621\" \"BC_567514\" \"BC_103862\" \"BC_28938\"  \"BC_325871\" #> [505] \"BC_49060\"  \"BC_275321\" \"BC_186267\" \"BC_652798\" \"BC_1977\"   \"BC_238160\" #> [511] \"BC_189854\" \"BC_37116\"  \"BC_255928\" \"BC_268745\" \"BC_23918\"  \"BC_131019\" #> [517] \"BC_171345\" \"BC_278096\" \"BC_13\"     \"BC_82758\"  \"BC_26097\"  \"BC_65912\"  #> [523] \"BC_41280\"  \"BC_245600\" \"BC_509872\" \"BC_15707\"  \"BC_17509\"  \"BC_154696\" #> [529] \"BC_194092\" \"BC_28077\"  \"BC_4165\"   \"BC_154806\" \"BC_25609\"  \"BC_33035\"  #> [535] \"BC_1139\"   \"BC_80020\"  \"BC_388103\" \"BC_59243\"  \"BC_20281\"  \"BC_57889\"  #> [541] \"BC_143062\" \"BC_218837\" \"BC_179997\" \"BC_90599\"  \"BC_5615\"   \"BC_23363\"  #> [547] \"BC_352645\" \"BC_292621\" \"BC_153858\" \"BC_230643\" \"BC_297704\" \"BC_381050\" #> [553] \"BC_203210\" \"BC_8838\"   \"BC_183115\" \"BC_257523\" \"BC_22263\"  \"BC_56792\"  #> [559] \"BC_163063\" \"BC_184732\" \"BC_563624\" \"BC_77131\"  \"BC_78760\"  \"BC_370968\" #> [565] \"BC_307924\" \"BC_331889\" \"BC_389378\" \"BC_29053\"  \"BC_23213\"  \"BC_428204\" #> [571] \"BC_500299\" \"BC_14452\"  \"BC_124624\" \"BC_22981\"  \"BC_98171\"  \"BC_170233\" #> [577] \"BC_38465\"  \"BC_47704\"  \"BC_198370\" \"BC_14131\"  \"BC_190202\" \"BC_278655\" #> [583] \"BC_6453\"   \"BC_557872\" \"BC_31562\"  \"BC_128748\" \"BC_29984\"  \"BC_294176\" #> [589] \"BC_127999\" \"BC_796\"    #>  #> $TopBarcodes$`S10-1` #> [1] \"BC_8419\"   \"BC_124796\" \"BC_102160\" #>  #> $TopBarcodes$`S10-2` #> [1] \"BC_8419\"   \"BC_124796\" \"BC_102160\" \"BC_68847\"  #>  #> $TopBarcodes$`S11-1` #>  [1] \"BC_53234\"  \"BC_205581\" \"BC_90135\"  \"BC_172626\" \"BC_58978\"  \"BC_79755\"  #>  [7] \"BC_159570\" \"BC_118640\" \"BC_31610\"  \"BC_257382\" \"BC_1607\"   \"BC_635211\" #> [13] \"BC_4531\"   \"BC_324711\" \"BC_327422\" \"BC_297704\" \"BC_194823\" \"BC_415460\" #> [19] \"BC_140320\" #>  #> $TopBarcodes$`S11-2` #>  [1] \"BC_53234\"  \"BC_205581\" \"BC_90135\"  \"BC_172626\" \"BC_58978\"  \"BC_79755\"  #>  [7] \"BC_159570\" \"BC_635211\" \"BC_118640\" \"BC_324711\" \"BC_31610\"  \"BC_257382\" #> [13] \"BC_4531\"   \"BC_1607\"   \"BC_327422\" \"BC_297704\" \"BC_194823\" \"BC_415460\" #> [19] \"BC_62602\"  \"BC_140320\" #>  #> $TopBarcodes$`S12-1` #>  [1] \"BC_389078\" \"BC_159570\" \"BC_135438\" \"BC_500780\" \"BC_79755\"  \"BC_31610\"  #>  [7] \"BC_49629\"  \"BC_78349\"  \"BC_118640\" \"BC_47726\"  \"BC_58978\"  \"BC_1607\"   #> [13] \"BC_245016\" \"BC_329679\" #>  #> $TopBarcodes$`S12-2` #>  [1] \"BC_389078\" \"BC_159570\" \"BC_135438\" \"BC_500780\" \"BC_79755\"  \"BC_31610\"  #>  [7] \"BC_49629\"  \"BC_118640\" \"BC_47726\"  \"BC_78349\"  \"BC_245016\" \"BC_58978\"  #> [13] \"BC_1607\"   \"BC_329679\" #>  #> $TopBarcodes$`S13-1` #>  [1] \"BC_8419\"   \"BC_124796\" \"BC_102160\" \"BC_257382\" \"BC_172626\" \"BC_345889\" #>  [7] \"BC_53234\"  \"BC_79755\"  \"BC_5472\"   \"BC_205581\" #>  #> $TopBarcodes$`S13-2` #>  [1] \"BC_8419\"   \"BC_124796\" \"BC_102160\" \"BC_257382\" \"BC_172626\" \"BC_345889\" #>  [7] \"BC_53234\"  \"BC_5472\"   \"BC_79755\"  \"BC_17608\"  \"BC_205581\" #>  #> $TopBarcodes$`S14-1` #> [1] \"BC_90135\"  \"BC_388103\" \"BC_31610\"  \"BC_58978\"  \"BC_292962\" \"BC_159570\" #>  #> $TopBarcodes$`S14-2` #> [1] \"BC_90135\"  \"BC_388103\" \"BC_31610\"  \"BC_58978\"  \"BC_292962\" \"BC_159570\" #>  #> $TopBarcodes$`S15-1` #> [1] \"BC_1478\"   \"BC_94579\"  \"BC_124796\" \"BC_8419\"   \"BC_316204\" \"BC_400391\" #> [7] \"BC_23241\"  #>  #> $TopBarcodes$`S15-2` #> [1] \"BC_1478\"   \"BC_94579\"  \"BC_124796\" \"BC_8419\"   \"BC_316204\" \"BC_400391\" #> [7] \"BC_23241\"  #>  #> $TopBarcodes$`S16-1` #>  [1] \"BC_53234\"  \"BC_79755\"  \"BC_140320\" \"BC_31610\"  \"BC_248880\" \"BC_1478\"   #>  [7] \"BC_17608\"  \"BC_257382\" \"BC_345889\" \"BC_94511\"  \"BC_142112\" \"BC_142024\" #> [13] \"BC_91412\"  \"BC_58978\"  \"BC_190202\" \"BC_4198\"   \"BC_68847\"  \"BC_389078\" #> [19] \"BC_47726\"  #>  #> $TopBarcodes$`S16-2` #>  [1] \"BC_53234\"  \"BC_79755\"  \"BC_140320\" \"BC_31610\"  \"BC_248880\" \"BC_1478\"   #>  [7] \"BC_17608\"  \"BC_257382\" \"BC_345889\" \"BC_94511\"  \"BC_142112\" \"BC_142024\" #> [13] \"BC_91412\"  \"BC_58978\"  \"BC_190202\" \"BC_68847\"  \"BC_4198\"   \"BC_389078\" #> [19] \"BC_47726\"  \"BC_205581\" #>  #> $TopBarcodes$`S17-1` #> [1] \"BC_183691\" \"BC_90135\"  \"BC_400391\" \"BC_31610\"  \"BC_68847\"  #>  #> $TopBarcodes$`S17-2` #> [1] \"BC_183691\" \"BC_90135\"  \"BC_400391\" \"BC_31610\"  \"BC_68847\"  \"BC_53234\"  #>  #> $TopBarcodes$`S18-1` #>  [1] \"BC_49397\"  \"BC_91412\"  \"BC_159570\" \"BC_62602\"  \"BC_93485\"  \"BC_70225\"  #>  [7] \"BC_79755\"  \"BC_4564\"   \"BC_124796\" \"BC_58978\"  \"BC_8419\"   \"BC_149935\" #> [13] \"BC_68847\"  \"BC_90135\"  \"BC_4173\"   \"BC_4469\"   \"BC_172626\" \"BC_31610\"  #> [19] \"BC_383329\" \"BC_55960\"  \"BC_62970\"  \"BC_102160\" \"BC_244320\" \"BC_400391\" #> [25] \"BC_135438\" \"BC_203989\" \"BC_81579\"  #>  #> $TopBarcodes$`S18-2` #>  [1] \"BC_49397\"  \"BC_91412\"  \"BC_159570\" \"BC_62602\"  \"BC_70225\"  \"BC_93485\"  #>  [7] \"BC_79755\"  \"BC_4564\"   \"BC_124796\" \"BC_8419\"   \"BC_58978\"  \"BC_149935\" #> [13] \"BC_68847\"  \"BC_90135\"  \"BC_4173\"   \"BC_4469\"   \"BC_172626\" \"BC_31610\"  #> [19] \"BC_383329\" \"BC_55960\"  \"BC_62970\"  \"BC_102160\" \"BC_244320\" \"BC_400391\" #> [25] \"BC_135438\" \"BC_203989\" \"BC_133178\" #>  #> $TopBarcodes$`S1-1` #>  [1] \"BC_79755\"  \"BC_102160\" \"BC_59493\"  \"BC_23361\"  \"BC_53234\"  \"BC_400391\" #>  [7] \"BC_142112\" \"BC_94511\"  \"BC_68847\"  \"BC_142024\" \"BC_23241\"  \"BC_47310\"  #> [13] \"BC_9141\"   \"BC_65104\"  #>  #> $TopBarcodes$`S1-2` #>  [1] \"BC_79755\"  \"BC_102160\" \"BC_59493\"  \"BC_23361\"  \"BC_53234\"  \"BC_142112\" #>  [7] \"BC_400391\" \"BC_94511\"  \"BC_68847\"  \"BC_142024\" \"BC_23241\"  \"BC_9141\"   #> [13] \"BC_47310\"  \"BC_5472\"   \"BC_65104\"  #>  #> $TopBarcodes$`S2-1` #>  [1] \"BC_248880\" \"BC_65104\"  \"BC_9141\"   \"BC_1478\"   \"BC_31610\"  \"BC_79755\"  #>  [7] \"BC_388103\" \"BC_257382\" \"BC_68618\"  \"BC_102160\" \"BC_4531\"   \"BC_90135\"  #>  #> $TopBarcodes$`S2-2` #>  [1] \"BC_248880\" \"BC_65104\"  \"BC_9141\"   \"BC_1478\"   \"BC_31610\"  \"BC_79755\"  #>  [7] \"BC_388103\" \"BC_257382\" \"BC_68618\"  \"BC_102160\" \"BC_4531\"   #>  #> $TopBarcodes$`S3-1` #>  [1] \"BC_79755\"  \"BC_142024\" \"BC_102160\" \"BC_183691\" \"BC_59493\"  \"BC_345889\" #>  [7] \"BC_23361\"  \"BC_70225\"  \"BC_30946\"  \"BC_159570\" #>  #> $TopBarcodes$`S3-2` #>  [1] \"BC_79755\"  \"BC_142024\" \"BC_102160\" \"BC_183691\" \"BC_59493\"  \"BC_345889\" #>  [7] \"BC_23361\"  \"BC_70225\"  \"BC_159570\" \"BC_30946\"  #>  #> $TopBarcodes$`S4-1` #>  [1] \"BC_53234\"  \"BC_58978\"  \"BC_62602\"  \"BC_68847\"  \"BC_140320\" \"BC_79755\"  #>  [7] \"BC_327422\" \"BC_36103\"  \"BC_102160\" \"BC_81579\"  \"BC_118640\" \"BC_135438\" #> [13] \"BC_205581\" \"BC_91412\"  \"BC_4564\"   \"BC_1607\"   \"BC_159570\" \"BC_468335\" #> [19] \"BC_560839\" \"BC_229324\" \"BC_49397\"  \"BC_203989\" \"BC_124796\" \"BC_8419\"   #> [25] \"BC_190202\" #>  #> $TopBarcodes$`S4-2` #>  [1] \"BC_53234\"  \"BC_58978\"  \"BC_62602\"  \"BC_68847\"  \"BC_140320\" \"BC_79755\"  #>  [7] \"BC_327422\" \"BC_36103\"  \"BC_81579\"  \"BC_102160\" \"BC_118640\" \"BC_135438\" #> [13] \"BC_1607\"   \"BC_205581\" \"BC_4564\"   \"BC_91412\"  \"BC_229324\" \"BC_560839\" #> [19] \"BC_159570\" \"BC_468335\" \"BC_49397\"  \"BC_203989\" \"BC_124796\" \"BC_8419\"   #> [25] \"BC_190202\" \"BC_23241\"  #>  #> $TopBarcodes$`S5-1` #>  [1] \"BC_561471\" \"BC_118640\" \"BC_59493\"  \"BC_1607\"   \"BC_31610\"  \"BC_23361\"  #>  [7] \"BC_159570\" \"BC_93485\"  \"BC_468335\" \"BC_81579\"  \"BC_257382\" #>  #> $TopBarcodes$`S5-2` #>  [1] \"BC_561471\" \"BC_118640\" \"BC_59493\"  \"BC_1607\"   \"BC_31610\"  \"BC_23361\"  #>  [7] \"BC_159570\" \"BC_93485\"  \"BC_81579\"  \"BC_468335\" \"BC_257382\" \"BC_21013\"  #>  #> $TopBarcodes$`S6-1` #> [1] \"BC_79755\"  \"BC_8419\"   \"BC_124796\" \"BC_4564\"   \"BC_400391\" \"BC_31610\"  #> [7] \"BC_1478\"   \"BC_90135\"  \"BC_388103\" #>  #> $TopBarcodes$`S6-2` #>  [1] \"BC_79755\"  \"BC_8419\"   \"BC_124796\" \"BC_4564\"   \"BC_400391\" \"BC_31610\"  #>  [7] \"BC_1478\"   \"BC_90135\"  \"BC_54442\"  \"BC_388103\" #>  #> $TopBarcodes$`S7-1` #>  [1] \"BC_53234\"  \"BC_54442\"  \"BC_142024\" \"BC_140320\" \"BC_93485\"  \"BC_124796\" #>  [7] \"BC_23544\"  \"BC_8419\"   \"BC_324711\" \"BC_159570\" \"BC_58978\"  \"BC_90135\"  #> [13] \"BC_345889\" \"BC_4564\"   \"BC_102160\" \"BC_400391\" #>  #> $TopBarcodes$`S7-2` #>  [1] \"BC_53234\"  \"BC_54442\"  \"BC_142024\" \"BC_140320\" \"BC_93485\"  \"BC_124796\" #>  [7] \"BC_23544\"  \"BC_8419\"   \"BC_324711\" \"BC_159570\" \"BC_58978\"  \"BC_90135\"  #> [13] \"BC_4564\"   \"BC_345889\" \"BC_102160\" \"BC_400391\" #>  #> $TopBarcodes$`S8-1` #>  [1] \"BC_142024\" \"BC_90135\"  \"BC_58978\"  \"BC_93485\"  \"BC_363879\" \"BC_4531\"   #>  [7] \"BC_205581\" \"BC_118640\" \"BC_79755\"  \"BC_31610\"  \"BC_1607\"   \"BC_82758\"  #> [13] \"BC_389078\" \"BC_194823\" \"BC_251167\" \"BC_77209\"  \"BC_68847\"  \"BC_102160\" #> [19] \"BC_4173\"   \"BC_4564\"   #>  #> $TopBarcodes$`S8-2` #>  [1] \"BC_142024\" \"BC_90135\"  \"BC_58978\"  \"BC_93485\"  \"BC_363879\" \"BC_4531\"   #>  [7] \"BC_205581\" \"BC_118640\" \"BC_79755\"  \"BC_1607\"   \"BC_31610\"  \"BC_82758\"  #> [13] \"BC_194823\" \"BC_251167\" \"BC_389078\" \"BC_68847\"  \"BC_77209\"  \"BC_102160\" #> [19] \"BC_4173\"   \"BC_4564\"   \"BC_94579\"  #>  #> $TopBarcodes$`S9-1` #>  [1] \"BC_79755\"  \"BC_4198\"   \"BC_81579\"  \"BC_560839\" \"BC_118640\" \"BC_345889\" #>  [7] \"BC_400391\" \"BC_1607\"   \"BC_319105\" \"BC_35704\"  \"BC_205581\" \"BC_90135\"  #> [13] \"BC_124796\" \"BC_8419\"   \"BC_142024\" \"BC_561471\" \"BC_68847\"  \"BC_19146\"  #> [19] \"BC_78912\"  #>  #> $TopBarcodes$`S9-2` #>  [1] \"BC_79755\"  \"BC_4198\"   \"BC_81579\"  \"BC_118640\" \"BC_560839\" \"BC_345889\" #>  [7] \"BC_400391\" \"BC_1607\"   \"BC_319105\" \"BC_35704\"  \"BC_205581\" \"BC_90135\"  #> [13] \"BC_124796\" \"BC_142024\" \"BC_8419\"   \"BC_561471\" \"BC_19146\"  \"BC_68847\"  #> [19] \"BC_78912\"  #>  #>  #> $TopBarcodeCounts #> $TopBarcodeCounts$`T0-1` #>             T0-1 #> BC_245016 235792 #> BC_121651 229674 #> BC_420967 140576 #> BC_108059 107746 #> BC_323670  93902 #> BC_9141    75789 #> BC_331193  61209 #> BC_119418  51910 #> BC_65104   45136 #> BC_17570   44290 #> BC_35704   41752 #> BC_383329  40346 #> BC_92942   39154 #> BC_24510   38403 #> BC_1396    38215 #> BC_83680   36945 #> BC_55858   31659 #> BC_38589   31330 #> BC_137495  30929 #> BC_69627   29428 #> BC_446739  27684 #> BC_171385  24017 #> BC_12367   23205 #> BC_280320  23170 #> BC_15782   22725 #> BC_310257  21578 #> BC_221975  21486 #> BC_313129  21335 #> BC_67201   18479 #> BC_3618    17186 #> BC_107789  17104 #> BC_36103   16025 #> BC_2596    15901 #> BC_69641   14140 #> BC_215831  13831 #> BC_16618   13795 #> BC_249402  13610 #> BC_141060  13535 #> BC_13611   13328 #> BC_22306   13090 #> BC_588849  13063 #> BC_43535   12925 #> BC_16956   12924 #> BC_175651  12903 #> BC_294188  12701 #> BC_46538   12667 #> BC_344050  12651 #> BC_25084   12454 #> BC_56819   12186 #> BC_206193  11681 #> BC_428803  11596 #> BC_219379  11334 #> BC_400391  11240 #> BC_19146   10980 #> BC_205581  10868 #> BC_148563  10683 #> BC_114027  10338 #> BC_172626  10332 #> BC_403084  10243 #> BC_62602   10088 #> BC_224300   9814 #> BC_47439    9520 #> BC_18278    9480 #> BC_43128    9389 #> BC_68847    9033 #> BC_111272   9008 #> BC_58978    8725 #> BC_162898   8480 #> BC_476380   8338 #> BC_262618   8324 #> BC_276866   8296 #> BC_252374   8167 #> BC_550404   8046 #> BC_325065   7949 #> BC_202891   7930 #> BC_50136    7895 #> BC_255436   7874 #> BC_103528   7849 #> BC_425129   7823 #> BC_168818   7818 #> BC_204266   7756 #> BC_176946   7643 #> BC_521149   7583 #> BC_105387   7326 #> BC_227720   7284 #> BC_83707    7266 #> BC_64584    7171 #> BC_21018    7056 #> BC_458543   7033 #> BC_11643    7000 #> BC_175871   6893 #> BC_556149   6772 #> BC_34617    6462 #> BC_166467   6460 #> BC_41692    6409 #> BC_72619    6392 #> BC_168530   6363 #> BC_289383   6347 #> BC_2040     6290 #> BC_516753   6259 #> BC_24159    6246 #> BC_249161   6223 #> BC_345717   6187 #> BC_54442    6053 #> BC_236596   6052 #> BC_248159   6033 #> BC_206263   5911 #> BC_376665   5867 #> BC_18345    5820 #> BC_114040   5760 #> BC_612467   5614 #> BC_56338    5560 #> BC_363714   5450 #> BC_39281    5389 #> BC_30946    5292 #> BC_32325    5202 #> BC_418545   5107 #> BC_103714   5093 #> BC_140320   5043 #> BC_120596   4965 #> BC_503475   4946 #> BC_160057   4936 #> BC_16754    4925 #> BC_43673    4922 #> BC_173736   4913 #> BC_46524    4874 #> BC_142999   4871 #> BC_11277    4832 #> BC_67854    4812 #> BC_258799   4694 #> BC_13395    4689 #> BC_37062    4673 #> BC_38398    4658 #> BC_105732   4622 #> BC_139928   4582 #> BC_355420   4539 #> BC_40856    4515 #> BC_128266   4473 #> BC_321677   4464 #> BC_203520   4459 #> BC_29284    4430 #> BC_172412   4416 #> BC_85441    4400 #> BC_20263    4392 #> BC_118831   4382 #> BC_10454    4369 #> BC_5256     4362 #> BC_129519   4338 #> BC_11391    4303 #> BC_172238   4298 #> BC_43123    4290 #> BC_42178    4287 #> BC_102205   4287 #> BC_346124   4265 #> BC_389078   4171 #> BC_42612    4162 #> BC_93485    4085 #> BC_415373   4064 #> BC_3733     4063 #> BC_32680    4060 #> BC_474982   4011 #> BC_7405     3964 #> BC_289568   3919 #> BC_229995   3867 #> BC_79026    3769 #> BC_45955    3742 #> BC_146666   3727 #> BC_183401   3720 #> BC_356531   3656 #> BC_187025   3625 #> BC_42310    3618 #> BC_221056   3618 #> BC_132225   3585 #> BC_235128   3561 #> BC_15740    3530 #> BC_160158   3525 #> BC_320233   3524 #> BC_8835     3492 #> BC_173674   3443 #> BC_53234    3423 #> BC_91412    3390 #> BC_135438   3390 #> BC_373901   3388 #> BC_44599    3349 #> BC_87047    3338 #> BC_350464   3324 #> BC_324711   3320 #> BC_40516    3289 #> BC_113839   3281 #> BC_162119   3281 #> BC_33699    3222 #> BC_635211   3216 #> BC_346627   3214 #> BC_7122     3142 #> BC_806      3135 #> BC_63846    3135 #> BC_283335   3111 #> BC_151544   3104 #> BC_273124   3101 #> BC_227308   3075 #> BC_47726    3060 #> BC_102803   3056 #> BC_244320   3036 #> BC_10347    3032 #> BC_389742   3009 #> BC_2865     3004 #> BC_77030    2974 #> BC_65130    2970 #> BC_564039   2950 #> BC_519985   2943 #> BC_76947    2937 #> BC_4564     2934 #> BC_521485   2933 #> BC_495859   2921 #> BC_35659    2918 #> BC_14377    2908 #> BC_199881   2905 #> BC_147006   2887 #> BC_26769    2885 #> BC_100344   2869 #> BC_672202   2856 #> BC_146146   2848 #> BC_320752   2845 #> BC_324953   2834 #> BC_217211   2830 #> BC_67965    2821 #> BC_210529   2810 #> BC_189813   2805 #> BC_242383   2801 #> BC_560839   2798 #> BC_228994   2788 #> BC_389087   2775 #> BC_44600    2762 #> BC_20557    2757 #> BC_10808    2724 #> BC_138900   2720 #> BC_81309    2702 #> BC_145719   2690 #> BC_58144    2674 #> BC_7299     2667 #> BC_78349    2666 #> BC_102160   2658 #> BC_164378   2656 #> BC_211828   2653 #> BC_336794   2649 #> BC_53380    2641 #> BC_14492    2636 #> BC_23241    2613 #> BC_57621    2609 #> BC_11270    2605 #> BC_41523    2589 #> BC_33764    2583 #> BC_12191    2564 #> BC_17608    2564 #> BC_8324     2549 #> BC_183112   2531 #> BC_167638   2509 #> BC_2206     2504 #> BC_123791   2482 #> BC_377226   2467 #> BC_195246   2447 #> BC_161563   2433 #> BC_67233    2430 #> BC_421415   2428 #> BC_150291   2424 #> BC_408928   2410 #> BC_410172   2406 #> BC_121663   2393 #> BC_201293   2368 #> BC_156353   2338 #> BC_45652    2320 #> BC_357846   2320 #> BC_199093   2308 #> BC_214878   2300 #> BC_6093     2287 #> BC_214604   2266 #> BC_302238   2250 #> BC_521264   2244 #> BC_672021   2223 #> BC_2294     2218 #> BC_587139   2212 #> BC_638624   2206 #> BC_86358    2199 #> BC_1764     2174 #> BC_366637   2171 #> BC_218093   2168 #> BC_201372   2155 #> BC_19353    2139 #> BC_130431   2134 #> BC_22999    2112 #> BC_49044    2112 #> BC_154519   2111 #> BC_324042   2110 #> BC_37363    2103 #> BC_154990   2098 #> BC_350335   2098 #> BC_194823   2051 #> BC_23522    2047 #> BC_141246   2046 #> BC_4531     2036 #> BC_4733     2025 #> BC_654016   2009 #> BC_147380   1995 #> BC_196282   1994 #> BC_52081    1980 #> BC_207651   1977 #> BC_380559   1974 #> BC_527469   1961 #> BC_353112   1959 #> BC_426662   1958 #> BC_655329   1949 #> BC_73098    1947 #> BC_146322   1937 #> BC_596629   1928 #> BC_64945    1915 #> BC_462254   1913 #> BC_261055   1909 #> BC_145403   1898 #> BC_61489    1893 #> BC_617554   1891 #> BC_228018   1882 #> BC_249649   1878 #> BC_211811   1848 #> BC_101581   1846 #> BC_43206    1833 #> BC_326596   1829 #> BC_514247   1824 #> BC_88464    1815 #> BC_203989   1815 #> BC_206798   1814 #> BC_19610    1803 #> BC_9626     1795 #> BC_116921   1791 #> BC_181554   1780 #> BC_79755    1779 #> BC_77101    1757 #> BC_55675    1755 #> BC_83816    1751 #> BC_138737   1748 #> BC_322542   1733 #> BC_318282   1731 #> BC_444573   1730 #> BC_9340     1729 #> BC_49226    1728 #> BC_57692    1721 #> BC_93884    1720 #> BC_181957   1718 #> BC_217320   1712 #> BC_296283   1710 #> BC_3583     1704 #> BC_11055    1700 #> BC_95934    1691 #> BC_88099    1685 #> BC_35283    1678 #> BC_67374    1673 #> BC_175957   1662 #> BC_266451   1658 #> BC_283541   1657 #> BC_14484    1656 #> BC_14810    1625 #> BC_157906   1624 #> BC_354350   1612 #> BC_539228   1608 #> BC_61500    1606 #> BC_45402    1602 #> BC_234390   1602 #> BC_415903   1600 #> BC_12418    1597 #> BC_238160   1597 #> BC_29208    1595 #> BC_91989    1594 #> BC_92584    1586 #> BC_351660   1583 #> BC_381245   1578 #> BC_31196    1577 #> BC_47310    1576 #> BC_20573    1573 #> BC_64931    1573 #> BC_2430     1558 #> BC_15448    1556 #> BC_94579    1552 #> BC_171953   1548 #> BC_9322     1541 #> BC_587343   1522 #> BC_50222    1505 #> BC_53219    1505 #> BC_77187    1501 #> BC_7691     1497 #> BC_225019   1495 #> BC_238577   1494 #> BC_6304     1486 #> BC_13093    1478 #> BC_154696   1469 #> BC_275321   1468 #> BC_75688    1465 #> BC_10293    1462 #> BC_13       1458 #> BC_90135    1451 #> BC_357977   1451 #> BC_4198     1446 #> BC_147556   1443 #> BC_231962   1441 #> BC_175198   1440 #> BC_144061   1433 #> BC_26258    1422 #> BC_114257   1420 #> BC_194092   1417 #> BC_31779    1413 #> BC_268745   1404 #> BC_67247    1399 #> BC_82595    1399 #> BC_103862   1393 #> BC_149347   1390 #> BC_346761   1388 #> BC_473006   1388 #> BC_49397    1378 #> BC_302454   1378 #> BC_207333   1376 #> BC_31185    1367 #> BC_115436   1367 #> BC_124624   1367 #> BC_491991   1365 #> BC_309303   1362 #> BC_12410    1359 #> BC_228333   1353 #> BC_528062   1351 #> BC_363879   1350 #> BC_70909    1346 #> BC_563624   1341 #> BC_11152    1337 #> BC_446649   1325 #> BC_129768   1310 #> BC_129559   1283 #> BC_169627   1281 #> BC_21535    1239 #> BC_516611   1235 #> BC_57582    1234 #> BC_159570   1234 #> BC_130861   1232 #> BC_48168    1215 #> BC_66948    1214 #> BC_257382   1213 #> BC_179919   1210 #> BC_15707    1204 #> BC_17509    1195 #> BC_444761   1187 #> BC_57794    1183 #> BC_147063   1183 #> BC_52856    1173 #> BC_14452    1170 #> BC_316483   1167 #> BC_186401   1162 #> BC_90599    1160 #> BC_245600   1160 #> BC_1977     1158 #> BC_99       1155 #> BC_176231   1151 #> BC_472019   1150 #> BC_292962   1147 #> BC_221691   1145 #> BC_170233   1138 #> BC_182320   1129 #> BC_381050   1120 #> BC_28938    1116 #> BC_67370    1112 #> BC_110945   1111 #> BC_195887   1104 #> BC_257523   1098 #> BC_2762     1091 #> BC_255928   1082 #> BC_355439   1074 #> BC_33035    1068 #> BC_125634   1066 #> BC_430      1060 #> BC_146760   1060 #> BC_164579   1060 #> BC_345889   1059 #> BC_142112   1057 #> BC_515934   1056 #> BC_141114   1051 #> BC_20281    1045 #> BC_322219   1037 #> BC_248582   1035 #> BC_1593     1032 #> BC_9747     1030 #> BC_82758    1022 #> BC_329007   1021 #> BC_567519   1015 #> BC_229036   1012 #> BC_50311    1010 #> BC_576338   1008 #> BC_189854   1005 #> BC_25609    1003 #> BC_56489    1000 #> BC_10190     996 #> BC_41280     994 #> BC_370968    994 #> BC_162322    984 #> BC_337697    973 #> BC_6453      968 #> BC_186267    966 #> BC_222891    961 #> BC_297704    960 #> BC_145103    958 #> BC_81579     954 #> BC_35633     951 #> BC_170407    950 #> BC_62970     946 #> BC_120505    940 #> BC_66747     935 #> BC_413466    935 #> BC_329679    930 #> BC_454109    928 #> BC_37116     926 #> BC_389378    925 #> BC_4061      922 #> BC_163063    919 #> BC_125776    911 #> BC_38465     904 #> BC_278096    904 #> BC_288976    901 #> BC_171345    900 #> BC_557872    898 #> BC_127999    897 #> BC_259621    889 #> BC_314343    889 #> BC_80020     888 #> BC_228451    888 #> BC_282868    884 #> BC_182092    882 #> BC_56792     877 #> BC_143062    877 #> BC_219703    876 #> BC_235649    876 #> BC_131019    875 #> BC_561471    870 #> BC_22981     863 #> BC_567514    861 #> BC_345175    856 #> BC_345888    853 #> BC_7076      848 #> BC_220827    845 #> BC_23213     840 #> BC_73196     839 #> BC_2142      838 #> BC_41997     838 #> BC_147873    836 #> BC_19557     835 #> BC_29053     834 #> BC_230643    832 #> BC_28077     827 #> BC_22263     825 #> BC_29984     824 #> BC_215667    819 #> BC_69571     818 #> BC_8838      813 #> BC_275938    813 #> BC_413636    808 #> BC_2791      807 #> BC_26462     807 #> BC_29222     804 #> BC_4173      794 #> BC_89937     794 #> BC_8159      793 #> BC_413271    792 #> BC_14131     791 #> BC_59243     788 #> BC_190202    786 #> BC_294271    785 #> BC_23918     784 #> BC_154806    783 #> BC_214774    775 #> BC_26384     771 #> BC_57471     763 #> BC_1534      756 #> BC_451991    755 #> BC_15172     753 #> BC_109658    747 #> BC_483925    744 #> BC_71820     743 #> BC_330625    740 #> BC_153858    737 #> BC_319910    737 #> BC_459545    737 #> BC_53645     725 #> BC_84350     724 #> BC_427925    724 #> BC_75310     721 #> BC_5615      719 #> BC_142652    719 #> BC_50626     718 #> BC_107381    718 #> BC_8715      717 #>  #> $TopBarcodeCounts$`T0-2` #>             T0-2 #> BC_245016 223791 #> BC_121651 204396 #> BC_420967 131262 #> BC_108059 100438 #> BC_323670  83518 #> BC_9141    68107 #> BC_331193  56283 #> BC_119418  48796 #> BC_65104   44721 #> BC_17570   44349 #> BC_35704   42341 #> BC_92942   40957 #> BC_383329  36775 #> BC_83680   35981 #> BC_1396    34908 #> BC_24510   32774 #> BC_55858   32560 #> BC_38589   29758 #> BC_313129  26285 #> BC_446739  26017 #> BC_137495  24915 #> BC_69627   24208 #> BC_171385  22254 #> BC_280320  22064 #> BC_221975  21961 #> BC_12367   21757 #> BC_15782   20633 #> BC_3618    18453 #> BC_310257  17985 #> BC_107789  17399 #> BC_67201   16457 #> BC_36103   14866 #> BC_215831  14499 #> BC_43535   14158 #> BC_2596    14144 #> BC_13611   13531 #> BC_294188  13083 #> BC_588849  13038 #> BC_16618   13026 #> BC_69641   12895 #> BC_22306   12188 #> BC_428803  11962 #> BC_403084  11682 #> BC_141060  11207 #> BC_205581  11081 #> BC_249402  11072 #> BC_206193  10792 #> BC_25084   10713 #> BC_344050  10657 #> BC_400391  10460 #> BC_325065  10413 #> BC_219379  10141 #> BC_46538   10026 #> BC_289383  10001 #> BC_56819    9695 #> BC_43128    9686 #> BC_175651   9683 #> BC_18278    9643 #> BC_172626   9564 #> BC_19146    9489 #> BC_47439    9482 #> BC_252374   9310 #> BC_58978    9275 #> BC_21018    8749 #> BC_521149   8625 #> BC_16956    8603 #> BC_262618   8587 #> BC_50136    8414 #> BC_202891   8319 #> BC_148563   8270 #> BC_62602    8246 #> BC_458543   8209 #> BC_68847    8165 #> BC_114027   8136 #> BC_476380   8103 #> BC_276866   7928 #> BC_111272   7720 #> BC_176946   7511 #> BC_255436   7420 #> BC_168818   7404 #> BC_550404   7402 #> BC_175871   7397 #> BC_204266   6989 #> BC_64584    6943 #> BC_425129   6929 #> BC_83707    6887 #> BC_162898   6821 #> BC_224300   6737 #> BC_103528   6556 #> BC_34617    6437 #> BC_72619    6416 #> BC_516753   6395 #> BC_105387   6368 #> BC_376665   6255 #> BC_18345    6155 #> BC_2040     6063 #> BC_168530   6045 #> BC_11643    6039 #> BC_114040   5775 #> BC_227720   5568 #> BC_556149   5485 #> BC_7405     5475 #> BC_249161   5470 #> BC_345717   5369 #> BC_363714   5357 #> BC_248159   5310 #> BC_24159    5243 #> BC_236596   5138 #> BC_16754    5126 #> BC_206263   5087 #> BC_118831   4976 #> BC_54442    4975 #> BC_41692    4943 #> BC_503475   4931 #> BC_5256     4925 #> BC_11277    4919 #> BC_67854    4806 #> BC_30946    4718 #> BC_43673    4688 #> BC_29284    4677 #> BC_85441    4668 #> BC_160057   4652 #> BC_166467   4593 #> BC_56338    4587 #> BC_20263    4536 #> BC_258799   4489 #> BC_172412   4372 #> BC_32325    4362 #> BC_321677   4354 #> BC_79026    4342 #> BC_37062    4337 #> BC_120596   4332 #> BC_203520   4274 #> BC_418545   4216 #> BC_135438   4181 #> BC_139928   4158 #> BC_160158   4131 #> BC_635211   4121 #> BC_612467   4112 #> BC_11391    4062 #> BC_564039   4055 #> BC_47726    4015 #> BC_105732   4008 #> BC_46524    3976 #> BC_53234    3974 #> BC_103714   3971 #> BC_140320   3967 #> BC_289568   3947 #> BC_415373   3915 #> BC_102803   3880 #> BC_39281    3868 #> BC_3733     3867 #> BC_172238   3845 #> BC_93485    3842 #> BC_13395    3799 #> BC_43123    3765 #> BC_2294     3755 #> BC_146666   3743 #> BC_132225   3716 #> BC_40516    3710 #> BC_173736   3708 #> BC_42612    3706 #> BC_356531   3698 #> BC_113839   3658 #> BC_519985   3646 #> BC_129519   3613 #> BC_77030    3597 #> BC_32680    3585 #> BC_183401   3585 #> BC_128266   3548 #> BC_210529   3515 #> BC_161563   3448 #> BC_355420   3440 #> BC_217211   3431 #> BC_324711   3417 #> BC_10454    3411 #> BC_91412    3399 #> BC_44599    3397 #> BC_40856    3368 #> BC_8835     3358 #> BC_142999   3334 #> BC_173674   3330 #> BC_151544   3325 #> BC_229995   3292 #> BC_346124   3257 #> BC_42310    3253 #> BC_102160   3250 #> BC_45955    3249 #> BC_15740    3246 #> BC_17608    3193 #> BC_350464   3183 #> BC_560839   3183 #> BC_389078   3178 #> BC_76947    3169 #> BC_33699    3141 #> BC_145719   3132 #> BC_42178    3119 #> BC_67233    3104 #> BC_38398    3094 #> BC_7122     3083 #> BC_410172   3047 #> BC_65130    3008 #> BC_189813   2976 #> BC_8324     2930 #> BC_324953   2909 #> BC_521485   2908 #> BC_235128   2892 #> BC_63846    2883 #> BC_320752   2881 #> BC_87047    2866 #> BC_67965    2860 #> BC_102205   2842 #> BC_242383   2833 #> BC_377226   2832 #> BC_389742   2832 #> BC_211828   2822 #> BC_273124   2790 #> BC_23522    2783 #> BC_154990   2746 #> BC_320233   2714 #> BC_41523    2674 #> BC_183112   2669 #> BC_221056   2643 #> BC_2865     2641 #> BC_672202   2641 #> BC_187025   2632 #> BC_326596   2621 #> BC_283335   2602 #> BC_336794   2593 #> BC_44600    2570 #> BC_227308   2555 #> BC_156353   2536 #> BC_207651   2528 #> BC_408928   2503 #> BC_495859   2502 #> BC_162119   2501 #> BC_64931    2488 #> BC_7299     2476 #> BC_53380    2476 #> BC_35659    2473 #> BC_101581   2466 #> BC_4733     2447 #> BC_199881   2446 #> BC_57621    2434 #> BC_373901   2422 #> BC_164378   2409 #> BC_147006   2391 #> BC_214604   2385 #> BC_45652    2368 #> BC_154519   2364 #> BC_64945    2363 #> BC_346627   2344 #> BC_201293   2343 #> BC_366637   2336 #> BC_26769    2329 #> BC_474982   2326 #> BC_206798   2324 #> BC_9340     2319 #> BC_19353    2314 #> BC_95934    2291 #> BC_20557    2289 #> BC_14377    2272 #> BC_6093     2256 #> BC_33764    2252 #> BC_389087   2245 #> BC_130861   2223 #> BC_157906   2189 #> BC_462254   2183 #> BC_244320   2179 #> BC_1764     2173 #> BC_123791   2169 #> BC_37363    2159 #> BC_86358    2140 #> BC_194823   2129 #> BC_211811   2114 #> BC_53219    2111 #> BC_421415   2111 #> BC_100344   2097 #> BC_2206     2096 #> BC_78349    2096 #> BC_221691   2096 #> BC_116921   2090 #> BC_228994   2056 #> BC_10347    2055 #> BC_514247   2053 #> BC_175198   2052 #> BC_266451   2041 #> BC_638624   2035 #> BC_4531     2033 #> BC_10808    2028 #> BC_88464    2010 #> BC_228018   2003 #> BC_196282   2000 #> BC_81309    1999 #> BC_167638   1997 #> BC_130431   1976 #> BC_346761   1975 #> BC_77101    1969 #> BC_672021   1962 #> BC_446649   1959 #> BC_12418    1958 #> BC_22999    1952 #> BC_350335   1946 #> BC_14492    1930 #> BC_806      1925 #> BC_141114   1924 #> BC_138737   1921 #> BC_10293    1918 #> BC_175957   1910 #> BC_14810    1895 #> BC_444573   1892 #> BC_521264   1892 #> BC_147380   1890 #> BC_380559   1888 #> BC_539228   1879 #> BC_162322   1873 #> BC_91989    1868 #> BC_145403   1865 #> BC_57692    1863 #> BC_61489    1859 #> BC_58144    1855 #> BC_4564     1842 #> BC_77187    1838 #> BC_121663   1816 #> BC_73098    1810 #> BC_141246   1792 #> BC_195246   1778 #> BC_49226    1777 #> BC_171953   1763 #> BC_181957   1761 #> BC_214878   1757 #> BC_182320   1748 #> BC_114257   1734 #> BC_146146   1716 #> BC_6304     1699 #> BC_181554   1696 #> BC_13093    1694 #> BC_528062   1694 #> BC_587139   1693 #> BC_55675    1691 #> BC_23241    1690 #> BC_11270    1682 #> BC_20573    1682 #> BC_29208    1670 #> BC_218093   1661 #> BC_654016   1623 #> BC_150291   1607 #> BC_292962   1600 #> BC_217320   1596 #> BC_199093   1595 #> BC_138900   1579 #> BC_225019   1578 #> BC_12191    1567 #> BC_354350   1567 #> BC_115436   1556 #> BC_99       1554 #> BC_93884    1538 #> BC_234390   1525 #> BC_527469   1520 #> BC_351660   1515 #> BC_201372   1512 #> BC_3583     1511 #> BC_19610    1508 #> BC_587343   1507 #> BC_353112   1499 #> BC_15448    1489 #> BC_357977   1482 #> BC_2430     1479 #> BC_617554   1473 #> BC_11152    1472 #> BC_31779    1461 #> BC_330625   1451 #> BC_147556   1443 #> BC_88099    1436 #> BC_2791     1426 #> BC_67247    1424 #> BC_110945   1421 #> BC_50222    1412 #> BC_147063   1403 #> BC_9626     1400 #> BC_1593     1394 #> BC_426662   1392 #> BC_413271   1390 #> BC_49044    1376 #> BC_4198     1373 #> BC_164652   1373 #> BC_125634   1369 #> BC_322542   1367 #> BC_203989   1353 #> BC_67374    1351 #> BC_45402    1343 #> BC_14484    1337 #> BC_195887   1334 #> BC_9322     1332 #> BC_415903   1331 #> BC_82595    1324 #> BC_329007   1324 #> BC_146322   1318 #> BC_261055   1311 #> BC_90135    1307 #> BC_26258    1298 #> BC_363879   1296 #> BC_515934   1290 #> BC_11055    1269 #> BC_49397    1269 #> BC_381245   1266 #> BC_309303   1253 #> BC_12410    1249 #> BC_249649   1249 #> BC_318282   1244 #> BC_57794    1243 #> BC_67370    1239 #> BC_316483   1238 #> BC_31196    1237 #> BC_357846   1230 #> BC_9747     1223 #> BC_83816    1223 #> BC_26384    1221 #> BC_52856    1219 #> BC_302454   1203 #> BC_50311    1196 #> BC_282868   1192 #> BC_61500    1190 #> BC_238577   1185 #> BC_47310    1181 #> BC_31185    1180 #> BC_283541   1179 #> BC_79755    1165 #> BC_231962   1162 #> BC_56489    1154 #> BC_120505   1153 #> BC_94579    1150 #> BC_444761   1146 #> BC_70909    1143 #> BC_296283   1140 #> BC_15652    1129 #> BC_276301   1124 #> BC_322219   1124 #> BC_169627   1121 #> BC_84350    1120 #> BC_596629   1118 #> BC_21535    1110 #> BC_52081    1108 #> BC_7691     1104 #> BC_302238   1103 #> BC_165975   1102 #> BC_14380    1101 #> BC_144061   1099 #> BC_129559   1093 #> BC_491991   1091 #> BC_43206    1083 #> BC_35459    1081 #> BC_228333   1070 #> BC_176231   1069 #> BC_75688    1063 #> BC_516611   1057 #> BC_149347   1055 #> BC_220827   1051 #> BC_207333   1049 #> BC_159570   1046 #> BC_288976   1044 #> BC_81579    1027 #> BC_44350    1025 #> BC_145103   1024 #> BC_35283    1012 #> BC_250471   1004 #> BC_97874    1000 #> BC_567519    989 #> BC_454109    988 #> BC_355439    986 #> BC_430       984 #> BC_57582     984 #> BC_48168     983 #> BC_10190     979 #> BC_19612     978 #> BC_92584     976 #> BC_212837    976 #> BC_129768    970 #> BC_345889    956 #> BC_115038    955 #> BC_228451    955 #> BC_451991    955 #> BC_179919    948 #> BC_576338    944 #> BC_655329    940 #> BC_472019    939 #> BC_168163    936 #> BC_35633     935 #> BC_257382    935 #> BC_535770    934 #> BC_329679    932 #> BC_248582    931 #> BC_62970     925 #> BC_324042    919 #> BC_18218     912 #> BC_182092    908 #> BC_142112    907 #> BC_4173      892 #> BC_100070    892 #> BC_259621    883 #> BC_567514    880 #> BC_103862    878 #> BC_28938     874 #> BC_325871    872 #> BC_49060     871 #> BC_275321    871 #> BC_186267    868 #> BC_652798    865 #> BC_1977      863 #> BC_238160    862 #> BC_189854    858 #> BC_37116     855 #> BC_255928    854 #> BC_268745    852 #> BC_23918     848 #> BC_131019    847 #> BC_171345    844 #> BC_278096    840 #> BC_13        834 #> BC_82758     833 #> BC_26097     831 #> BC_65912     831 #> BC_41280     826 #> BC_245600    824 #> BC_509872    823 #> BC_15707     821 #> BC_17509     821 #> BC_154696    821 #> BC_194092    820 #> BC_28077     816 #> BC_4165      815 #> BC_154806    813 #> BC_25609     810 #> BC_33035     807 #> BC_1139      802 #> BC_80020     802 #> BC_388103    801 #> BC_59243     795 #> BC_20281     788 #> BC_57889     788 #> BC_143062    788 #> BC_218837    784 #> BC_179997    778 #> BC_90599     776 #> BC_5615      775 #> BC_23363     774 #> BC_352645    772 #> BC_292621    762 #> BC_153858    760 #> BC_230643    759 #> BC_297704    754 #> BC_381050    751 #> BC_203210    746 #> BC_8838      738 #> BC_183115    738 #> BC_257523    737 #> BC_22263     734 #> BC_56792     733 #> BC_163063    729 #> BC_184732    723 #> BC_563624    718 #> BC_77131     713 #> BC_78760     706 #> BC_370968    706 #> BC_307924    704 #> BC_331889    704 #> BC_389378    704 #> BC_29053     702 #> BC_23213     700 #> BC_428204    700 #> BC_500299    697 #> BC_14452     696 #> BC_124624    696 #> BC_22981     694 #> BC_98171     693 #> BC_170233    692 #> BC_38465     691 #> BC_47704     691 #> BC_198370    686 #> BC_14131     683 #> BC_190202    683 #> BC_278655    683 #> BC_6453      682 #> BC_557872    681 #> BC_31562     677 #> BC_128748    676 #> BC_29984     675 #> BC_294176    673 #> BC_127999    668 #> BC_796       664 #>  #> $TopBarcodeCounts$`S10-1` #>             S10-1 #> BC_8419   1991893 #> BC_124796 1649985 #> BC_102160  203430 #>  #> $TopBarcodeCounts$`S10-2` #>             S10-2 #> BC_8419   1995956 #> BC_124796 1710825 #> BC_102160  208878 #> BC_68847    68155 #>  #> $TopBarcodeCounts$`S11-1` #>            S11-1 #> BC_53234  680240 #> BC_205581 493308 #> BC_90135  332038 #> BC_172626 257083 #> BC_58978  196664 #> BC_79755  116795 #> BC_159570 108699 #> BC_118640  73041 #> BC_31610   71654 #> BC_257382  64909 #> BC_1607    61994 #> BC_635211  58710 #> BC_4531    58679 #> BC_324711  55178 #> BC_327422  30934 #> BC_297704  27654 #> BC_194823  25858 #> BC_415460  21413 #> BC_140320  19073 #>  #> $TopBarcodeCounts$`S11-2` #>            S11-2 #> BC_53234  672838 #> BC_205581 480681 #> BC_90135  319597 #> BC_172626 226125 #> BC_58978  168069 #> BC_79755  107090 #> BC_159570 101497 #> BC_635211  67342 #> BC_118640  57323 #> BC_324711  56730 #> BC_31610   55511 #> BC_257382  55165 #> BC_4531    50457 #> BC_1607    49865 #> BC_327422  34475 #> BC_297704  22422 #> BC_194823  22402 #> BC_415460  20209 #> BC_62602   17792 #> BC_140320  16805 #>  #> $TopBarcodeCounts$`S12-1` #>             S12-1 #> BC_389078 1413816 #> BC_159570  615742 #> BC_135438  272292 #> BC_500780  246148 #> BC_79755   235092 #> BC_31610   185291 #> BC_49629   144164 #> BC_78349   134743 #> BC_118640  132924 #> BC_47726   128882 #> BC_58978   115558 #> BC_1607    108011 #> BC_245016  107080 #> BC_329679   79183 #>  #> $TopBarcodeCounts$`S12-2` #>             S12-2 #> BC_389078 1397641 #> BC_159570  557943 #> BC_135438  248280 #> BC_500780  235202 #> BC_79755   219591 #> BC_31610   171947 #> BC_49629   131663 #> BC_118640  120960 #> BC_47726   117847 #> BC_78349   109942 #> BC_245016   99030 #> BC_58978    97876 #> BC_1607     95198 #> BC_329679   74065 #>  #> $TopBarcodeCounts$`S13-1` #>             S13-1 #> BC_8419   1132876 #> BC_124796 1113617 #> BC_102160  813971 #> BC_257382  768188 #> BC_172626  112559 #> BC_345889   84734 #> BC_53234    72801 #> BC_79755    55138 #> BC_5472     54808 #> BC_205581   41262 #>  #> $TopBarcodeCounts$`S13-2` #>             S13-2 #> BC_8419   1075999 #> BC_124796 1036131 #> BC_102160  766818 #> BC_257382  724300 #> BC_172626  106215 #> BC_345889   77361 #> BC_53234    65594 #> BC_5472     52942 #> BC_79755    51810 #> BC_17608    39408 #> BC_205581   38917 #>  #> $TopBarcodeCounts$`S14-1` #>             S14-1 #> BC_90135  2015353 #> BC_388103 1491990 #> BC_31610   325001 #> BC_58978   186583 #> BC_292962  127737 #> BC_159570   82869 #>  #> $TopBarcodeCounts$`S14-2` #>             S14-2 #> BC_90135  1814510 #> BC_388103 1338206 #> BC_31610   285251 #> BC_58978   161284 #> BC_292962  125041 #> BC_159570   76636 #>  #> $TopBarcodeCounts$`S15-1` #>             S15-1 #> BC_1478   1137019 #> BC_94579   930125 #> BC_124796  490802 #> BC_8419    480465 #> BC_316204   95059 #> BC_400391   61062 #> BC_23241    42520 #>  #> $TopBarcodeCounts$`S15-2` #>             S15-2 #> BC_1478   1189434 #> BC_94579   976104 #> BC_124796  494292 #> BC_8419    486189 #> BC_316204   96050 #> BC_400391   67224 #> BC_23241    43739 #>  #> $TopBarcodeCounts$`S16-1` #>            S16-1 #> BC_53234  967214 #> BC_79755  699557 #> BC_140320 622182 #> BC_31610  355389 #> BC_248880 310481 #> BC_1478   286098 #> BC_17608  219959 #> BC_257382 191551 #> BC_345889 186661 #> BC_94511  140502 #> BC_142112 136360 #> BC_142024 111299 #> BC_91412   96497 #> BC_58978   76133 #> BC_190202  65758 #> BC_4198    51449 #> BC_68847   48868 #> BC_389078  39963 #> BC_47726   37946 #>  #> $TopBarcodeCounts$`S16-2` #>            S16-2 #> BC_53234  955906 #> BC_79755  679328 #> BC_140320 605778 #> BC_31610  351863 #> BC_248880 297737 #> BC_1478   286187 #> BC_17608  215120 #> BC_257382 192418 #> BC_345889 192200 #> BC_94511  143289 #> BC_142112 142201 #> BC_142024 111762 #> BC_91412   97112 #> BC_58978   77379 #> BC_190202  66762 #> BC_68847   51297 #> BC_4198    51154 #> BC_389078  41183 #> BC_47726   37684 #> BC_205581  34755 #>  #> $TopBarcodeCounts$`S17-1` #>             S17-1 #> BC_183691 2648948 #> BC_90135  1584269 #> BC_400391  588642 #> BC_31610   216675 #> BC_68847   146098 #>  #> $TopBarcodeCounts$`S17-2` #>             S17-2 #> BC_183691 2785778 #> BC_90135  1600044 #> BC_400391  604178 #> BC_31610   206900 #> BC_68847   158068 #> BC_53234   139785 #>  #> $TopBarcodeCounts$`S18-1` #>            S18-1 #> BC_49397  763504 #> BC_91412  419115 #> BC_159570 417080 #> BC_62602  261522 #> BC_93485  252666 #> BC_70225  234477 #> BC_79755  204363 #> BC_4564   141545 #> BC_124796 133198 #> BC_58978  124347 #> BC_8419   120698 #> BC_149935 111889 #> BC_68847  110884 #> BC_90135  103890 #> BC_4173    99281 #> BC_4469    94003 #> BC_172626  92447 #> BC_31610   86277 #> BC_383329  74354 #> BC_55960   71818 #> BC_62970   55812 #> BC_102160  51865 #> BC_244320  38874 #> BC_400391  33062 #> BC_135438  31484 #> BC_203989  21276 #> BC_81579   19900 #>  #> $TopBarcodeCounts$`S18-2` #>            S18-2 #> BC_49397  817999 #> BC_91412  443237 #> BC_159570 436654 #> BC_62602  290698 #> BC_70225  275474 #> BC_93485  270096 #> BC_79755  214481 #> BC_4564   165210 #> BC_124796 143216 #> BC_8419   137545 #> BC_58978  134487 #> BC_149935 120452 #> BC_68847  119995 #> BC_90135  116149 #> BC_4173   109548 #> BC_4469   107465 #> BC_172626  97888 #> BC_31610   96129 #> BC_383329  83812 #> BC_55960   82691 #> BC_62970   66186 #> BC_102160  58036 #> BC_244320  44322 #> BC_400391  41088 #> BC_135438  33668 #> BC_203989  25743 #> BC_133178  20613 #>  #> $TopBarcodeCounts$`S1-1` #>             S1-1 #> BC_79755  993343 #> BC_102160 714207 #> BC_59493  406903 #> BC_23361  207760 #> BC_53234  201367 #> BC_400391 189577 #> BC_142112 174047 #> BC_94511  113449 #> BC_68847   58203 #> BC_142024  56214 #> BC_23241   44498 #> BC_47310   31114 #> BC_9141    30245 #> BC_65104   28467 #>  #> $TopBarcodeCounts$`S1-2` #>              S1-2 #> BC_79755  1222013 #> BC_102160  808336 #> BC_59493   463756 #> BC_23361   256247 #> BC_53234   244541 #> BC_142112  200263 #> BC_400391  195378 #> BC_94511   143734 #> BC_68847    67285 #> BC_142024   66571 #> BC_23241    54725 #> BC_9141     39529 #> BC_47310    38718 #> BC_5472     35839 #> BC_65104    33854 #>  #> $TopBarcodeCounts$`S2-1` #>              S2-1 #> BC_248880 2011324 #> BC_65104  1426536 #> BC_9141   1346962 #> BC_1478    850892 #> BC_31610   820495 #> BC_79755   462821 #> BC_388103  216599 #> BC_257382  200090 #> BC_68618   105753 #> BC_102160   76111 #> BC_4531     54809 #> BC_90135    45785 #>  #> $TopBarcodeCounts$`S2-2` #>              S2-2 #> BC_248880 1182134 #> BC_65104   933706 #> BC_9141    932603 #> BC_1478    561478 #> BC_31610   468327 #> BC_79755   308473 #> BC_388103  133643 #> BC_257382  121541 #> BC_68618    69576 #> BC_102160   49153 #> BC_4531     31316 #>  #> $TopBarcodeCounts$`S3-1` #>              S3-1 #> BC_79755  2163553 #> BC_142024  565889 #> BC_102160  448714 #> BC_183691  203408 #> BC_59493   163823 #> BC_345889   89546 #> BC_23361    81236 #> BC_70225    56521 #> BC_30946    50953 #> BC_159570   45613 #>  #> $TopBarcodeCounts$`S3-2` #>              S3-2 #> BC_79755  2486675 #> BC_142024  696785 #> BC_102160  551728 #> BC_183691  257218 #> BC_59493   196076 #> BC_345889  107156 #> BC_23361    93503 #> BC_70225    66396 #> BC_159570   61382 #> BC_30946    59659 #>  #> $TopBarcodeCounts$`S4-1` #>             S4-1 #> BC_53234  692353 #> BC_58978  342379 #> BC_62602  280987 #> BC_68847  237132 #> BC_140320 223426 #> BC_79755  208335 #> BC_327422 190392 #> BC_36103  181458 #> BC_102160 151606 #> BC_81579  139375 #> BC_118640 132880 #> BC_135438 119051 #> BC_205581 102204 #> BC_91412   92210 #> BC_4564    91814 #> BC_1607    90610 #> BC_159570  66307 #> BC_468335  66180 #> BC_560839  64927 #> BC_229324  62954 #> BC_49397   49062 #> BC_203989  43358 #> BC_124796  38389 #> BC_8419    31905 #> BC_190202  26816 #>  #> $TopBarcodeCounts$`S4-2` #>             S4-2 #> BC_53234  507873 #> BC_58978  223666 #> BC_62602  181352 #> BC_68847  145969 #> BC_140320 144767 #> BC_79755  139330 #> BC_327422 138287 #> BC_36103  118928 #> BC_81579   96742 #> BC_102160  93245 #> BC_118640  89017 #> BC_135438  70979 #> BC_1607    66226 #> BC_205581  62591 #> BC_4564    61778 #> BC_91412   58781 #> BC_229324  40462 #> BC_560839  38271 #> BC_159570  36888 #> BC_468335  35416 #> BC_49397   34391 #> BC_203989  33235 #> BC_124796  24380 #> BC_8419    21807 #> BC_190202  17786 #> BC_23241   16442 #>  #> $TopBarcodeCounts$`S5-1` #>              S5-1 #> BC_561471 2123044 #> BC_118640  322753 #> BC_59493   268377 #> BC_1607    259730 #> BC_31610   180017 #> BC_23361   133885 #> BC_159570   48021 #> BC_93485    30112 #> BC_468335   25518 #> BC_81579    24169 #> BC_257382   24078 #>  #> $TopBarcodeCounts$`S5-2` #>              S5-2 #> BC_561471 1975938 #> BC_118640  290505 #> BC_59493   246168 #> BC_1607    224559 #> BC_31610   172466 #> BC_23361   122852 #> BC_159570   42615 #> BC_93485    30438 #> BC_81579    25799 #> BC_468335   24958 #> BC_257382   24460 #> BC_21013    23108 #>  #> $TopBarcodeCounts$`S6-1` #>              S6-1 #> BC_79755  1282572 #> BC_8419   1123900 #> BC_124796  996596 #> BC_4564    434228 #> BC_400391   84518 #> BC_31610    44921 #> BC_1478     31005 #> BC_90135    30404 #> BC_388103   28921 #>  #> $TopBarcodeCounts$`S6-2` #>              S6-2 #> BC_79755  1344442 #> BC_8419   1117015 #> BC_124796 1031266 #> BC_4564    489628 #> BC_400391  102685 #> BC_31610    41582 #> BC_1478     36862 #> BC_90135    34556 #> BC_54442    31930 #> BC_388103   30013 #>  #> $TopBarcodeCounts$`S7-1` #>             S7-1 #> BC_53234  921435 #> BC_54442  710031 #> BC_142024 472357 #> BC_140320 350076 #> BC_93485  324557 #> BC_124796 197590 #> BC_23544  186585 #> BC_8419   179578 #> BC_324711 166985 #> BC_159570 116366 #> BC_58978  106125 #> BC_90135   92285 #> BC_345889  60307 #> BC_4564    56816 #> BC_102160  52674 #> BC_400391  42639 #>  #> $TopBarcodeCounts$`S7-2` #>             S7-2 #> BC_53234  886421 #> BC_54442  680000 #> BC_142024 434889 #> BC_140320 331549 #> BC_93485  301678 #> BC_124796 177503 #> BC_23544  166526 #> BC_8419   163482 #> BC_324711 147268 #> BC_159570 104165 #> BC_58978   87248 #> BC_90135   85151 #> BC_4564    55719 #> BC_345889  55079 #> BC_102160  48773 #> BC_400391  38887 #>  #> $TopBarcodeCounts$`S8-1` #>              S8-1 #> BC_142024 1234236 #> BC_90135   711120 #> BC_58978   347497 #> BC_93485   266947 #> BC_363879  206203 #> BC_4531    151017 #> BC_205581  141328 #> BC_118640  139500 #> BC_79755   119797 #> BC_31610   102078 #> BC_1607     99159 #> BC_82758    77715 #> BC_389078   49526 #> BC_194823   49489 #> BC_251167   47114 #> BC_77209    43860 #> BC_68847    43534 #> BC_102160   35811 #> BC_4173     27438 #> BC_4564     23411 #>  #> $TopBarcodeCounts$`S8-2` #>              S8-2 #> BC_142024 1098417 #> BC_90135   613893 #> BC_58978   269454 #> BC_93485   215752 #> BC_363879  166500 #> BC_4531    125332 #> BC_205581  115375 #> BC_118640  111091 #> BC_79755   105974 #> BC_1607     80651 #> BC_31610    79449 #> BC_82758    63339 #> BC_194823   47934 #> BC_251167   43484 #> BC_389078   41208 #> BC_68847    40176 #> BC_77209    35932 #> BC_102160   27346 #> BC_4173     24198 #> BC_4564     22430 #> BC_94579    18367 #>  #> $TopBarcodeCounts$`S9-1` #>             S9-1 #> BC_79755  684599 #> BC_4198   412438 #> BC_81579  222908 #> BC_560839 190175 #> BC_118640 190072 #> BC_345889 174338 #> BC_400391 173891 #> BC_1607   124662 #> BC_319105 106683 #> BC_35704   97669 #> BC_205581  96776 #> BC_90135   55050 #> BC_124796  54709 #> BC_8419    41751 #> BC_142024  41208 #> BC_561471  36418 #> BC_68847   26528 #> BC_19146   26470 #> BC_78912   18539 #>  #> $TopBarcodeCounts$`S9-2` #>             S9-2 #> BC_79755  678991 #> BC_4198   420103 #> BC_81579  232056 #> BC_118640 198440 #> BC_560839 187828 #> BC_345889 177297 #> BC_400391 169731 #> BC_1607   132863 #> BC_319105 107906 #> BC_35704  100753 #> BC_205581  89183 #> BC_90135   56985 #> BC_124796  51211 #> BC_142024  47093 #> BC_8419    40711 #> BC_561471  35227 #> BC_19146   32473 #> BC_68847   29591 #> BC_78912   20199 #>  #>"},{"path":"https://danevass.github.io/bartools/reference/calcReplicateCorr.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate correlation between technical replicates — calcReplicateCorr","title":"Calculate correlation between technical replicates — calcReplicateCorr","text":"Calculate return list correlation paired technical replicates dataset","code":""},{"path":"https://danevass.github.io/bartools/reference/calcReplicateCorr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate correlation between technical replicates — calcReplicateCorr","text":"","code":"calcReplicateCorr(dge, group, corr.thresh = 0.8, return = \"all\")"},{"path":"https://danevass.github.io/bartools/reference/calcReplicateCorr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate correlation between technical replicates — calcReplicateCorr","text":"dge DGEList object containing technical replicates compared group grouping variable metadata containing technical replicate information corr.thresh threshold distinguishing good vs bad correlation technical replicates return values return. One \"good\", \"bad\", \"\"","code":""},{"path":"https://danevass.github.io/bartools/reference/calcReplicateCorr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate correlation between technical replicates — calcReplicateCorr","text":"Returns plot read counts per barcode (row) data frame","code":""},{"path":"https://danevass.github.io/bartools/reference/calcReplicateCorr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate correlation between technical replicates — calcReplicateCorr","text":"","code":"data(test.dge) calcReplicateCorr(test.dge, group = \"group\") #> 10_High_dose   11_Vehicle   12_Vehicle  13_Low_dose  14_Low_dose  15_Low_dose  #>    0.9998575    0.9988328    0.9992805    0.9999569    0.9999779    0.9998939  #>  16_Low_dose 17_High_dose   18_Vehicle  1_High_dose  2_High_dose  3_High_dose  #>    0.9998965    0.9998268    0.9995628    0.9990491    0.9975029    0.9997352  #>    4_Vehicle   5_Low_dose  6_High_dose    7_Vehicle    8_Vehicle   9_Low_dose  #>    0.9975620    0.9999389    0.9994985    0.9997088    0.9992879    0.9997057  #>           T0  #>    0.9983838"},{"path":"https://danevass.github.io/bartools/reference/cluster_cormat.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster correlation matrix — cluster_cormat","title":"Cluster correlation matrix — cluster_cormat","text":"cluster correlation matrix using hierarchical clustering","code":""},{"path":"https://danevass.github.io/bartools/reference/cluster_cormat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster correlation matrix — cluster_cormat","text":"","code":"cluster_cormat(cormat)"},{"path":"https://danevass.github.io/bartools/reference/cluster_cormat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster correlation matrix — cluster_cormat","text":"cormat matrix correlation values","code":""},{"path":"https://danevass.github.io/bartools/reference/cluster_cormat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster correlation matrix — cluster_cormat","text":"Returns matrix correlation values columns rows hierarchically clustered","code":""},{"path":"https://danevass.github.io/bartools/reference/collapseReplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse technical replicates — collapseReplicates","title":"Collapse technical replicates — collapseReplicates","text":"Collapse technical replicates DGEList object mean sum. Modified collapseReplicates function DESeq2 package accept DGEList objects allow collapsing replicated mean sum.","code":""},{"path":"https://danevass.github.io/bartools/reference/collapseReplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse technical replicates — collapseReplicates","text":"","code":"collapseReplicates(   object,   groupby,   run,   renameCols = TRUE,   show_reps = TRUE,   by = \"mean\" )"},{"path":"https://danevass.github.io/bartools/reference/collapseReplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse technical replicates — collapseReplicates","text":"object DGEList object containing raw normalised barcode counts replicate grouping info object metadata groupby character vector containing grouping information. Must long columns object. Can pass metadata column object. run optional, names unique column object. provided, new column runsCollapsed added colData pastes together names run renameCols boolean. whether rename columns returned object using levels grouping factor show_reps boolean. print replicate column names console? collapse replicates mean sum","code":""},{"path":"https://danevass.github.io/bartools/reference/collapseReplicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse technical replicates — collapseReplicates","text":"Returns dataframe normalised counts sample","code":""},{"path":"https://danevass.github.io/bartools/reference/collapseReplicates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse technical replicates — collapseReplicates","text":"","code":"data(test.dge) collapseReplicates(test.dge, groupby = test.dge$samples$group, by = \"mean\") #> $`10_High_dose` #> [1] 3 4 #>  #> $`11_Vehicle` #> [1] 5 6 #>  #> $`12_Vehicle` #> [1] 7 8 #>  #> $`13_Low_dose` #> [1]  9 10 #>  #> $`14_Low_dose` #> [1] 11 12 #>  #> $`15_Low_dose` #> [1] 13 14 #>  #> $`16_Low_dose` #> [1] 15 16 #>  #> $`17_High_dose` #> [1] 17 18 #>  #> $`18_Vehicle` #> [1] 19 20 #>  #> $`1_High_dose` #> [1] 21 22 #>  #> $`2_High_dose` #> [1] 23 24 #>  #> $`3_High_dose` #> [1] 25 26 #>  #> $`4_Vehicle` #> [1] 27 28 #>  #> $`5_Low_dose` #> [1] 29 30 #>  #> $`6_High_dose` #> [1] 31 32 #>  #> $`7_Vehicle` #> [1] 33 34 #>  #> $`8_Vehicle` #> [1] 35 36 #>  #> $`9_Low_dose` #> [1] 37 38 #>  #> $T0 #> [1] 1 2 #>  #> An object of class \"DGEList\" #> $samples #>              Sample Experiment        Group PCR_Replicate Treatment #> 10_High_dose  S10-1    test_01 10_High_dose             1 High_dose #> 11_Vehicle    S11-1    test_01   11_Vehicle             1   Vehicle #> 12_Vehicle    S12-1    test_01   12_Vehicle             1   Vehicle #> 13_Low_dose   S13-1    test_01  13_Low_dose             1  Low_dose #> 14_Low_dose   S14-1    test_01  14_Low_dose             1  Low_dose #>                     group lib.size norm.factors #> 10_High_dose 10_High_dose  4114186            1 #> 11_Vehicle     11_Vehicle  2907500            1 #> 12_Vehicle     12_Vehicle  4202337            1 #> 13_Low_dose   13_Low_dose  4513559            1 #> 14_Low_dose   14_Low_dose  4503490            1 #> 14 more rows ... #>  #> $counts #>         Samples #> Tags     10_High_dose 11_Vehicle 12_Vehicle 13_Low_dose 14_Low_dose 15_Low_dose #>   BC_1              0          0          0           0           0           0 #>   BC_13             0          0          0           0           0           0 #>   BC_99             0          0          0           0           0           0 #>   BC_120            0          0          0           0           0           0 #>   BC_351            0          0          0           0           0           0 #>         Samples #> Tags     16_Low_dose 17_High_dose 18_Vehicle 1_High_dose 2_High_dose #>   BC_1             0            0          0           0           0 #>   BC_13            0            0          0           0           0 #>   BC_99            0            0          0         155           0 #>   BC_120           0            0          0           0           0 #>   BC_351           0            0          0           0           0 #>         Samples #> Tags     3_High_dose 4_Vehicle 5_Low_dose 6_High_dose 7_Vehicle 8_Vehicle #>   BC_1             0         0          0           0         0         0 #>   BC_13            0         0          0           0         0         0 #>   BC_99            0         0          0           0         0         0 #>   BC_120           0         0          0           0         0         0 #>   BC_351           0         0          0           0         0         0 #>         Samples #> Tags     9_Low_dose   T0 #>   BC_1            0  127 #>   BC_13           0 1146 #>   BC_99           0 1354 #>   BC_120          0  234 #>   BC_351          0    0 #> 1634 more rows ... #>"},{"path":"https://danevass.github.io/bartools/reference/compareAbundance.html","id":null,"dir":"Reference","previous_headings":"","what":"Barcode abundance comparison — compareAbundance","title":"Barcode abundance comparison — compareAbundance","text":"Takes dataframe barcode counts, computes mean abundance barcode two specific conditions, line plot conditions","code":""},{"path":"https://danevass.github.io/bartools/reference/compareAbundance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barcode abundance comparison — compareAbundance","text":"","code":"compareAbundance(counts, condition, condition_names)"},{"path":"https://danevass.github.io/bartools/reference/compareAbundance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Barcode abundance comparison — compareAbundance","text":"counts dataframe containing raw counts barcodes condition sample condition interest condition_names names possible conditions experiment","code":""},{"path":"https://danevass.github.io/bartools/reference/compareAbundance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Barcode abundance comparison — compareAbundance","text":"Returns text file","code":""},{"path":"https://danevass.github.io/bartools/reference/compareAbundance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Barcode abundance comparison — compareAbundance","text":"compareAbundance Compare barcode abundance 2 conditions using EdgeR","code":""},{"path":"https://danevass.github.io/bartools/reference/compareAbundance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Barcode abundance comparison — compareAbundance","text":"","code":"data(test.dge) compareAbundance(test.dge, test.dge$samples$group, c(\"T0\",\"10_High_dose\")) #> Error in .subset2(x, i, exact = exact): no such index at level 1"},{"path":"https://danevass.github.io/bartools/reference/countBarcodeReads.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Barcode Reads — countBarcodeReads","title":"Count Barcode Reads — countBarcodeReads","text":"Count number occurences barcode reference library","code":""},{"path":"https://danevass.github.io/bartools/reference/countBarcodeReads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Barcode Reads — countBarcodeReads","text":"","code":"countBarcodeReads(bam, bam_index, outdir = \".\", prefix = \"map_barcode_reads\")"},{"path":"https://danevass.github.io/bartools/reference/countBarcodeReads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Barcode Reads — countBarcodeReads","text":"bam BAM file mapBarcodeReads containing mapped barcode reads bam_index Path bowtie index barcode reference library. Include index prefix. outdir Optional. Save output directory prefix Optional. Prefix add output file","code":""},{"path":"https://danevass.github.io/bartools/reference/countBarcodeReads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Barcode Reads — countBarcodeReads","text":"Returns data-frame containing Barcode ID, count per sample.","code":""},{"path":"https://danevass.github.io/bartools/reference/createBarcodeObj.html","id":null,"dir":"Reference","previous_headings":"","what":"createBarcodeObj — createBarcodeObj","title":"createBarcodeObj — createBarcodeObj","text":"generate DGEList object containing barcode counts sample metadata raw counts files","code":""},{"path":"https://danevass.github.io/bartools/reference/createBarcodeObj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"createBarcodeObj — createBarcodeObj","text":"","code":"createBarcodeObj(counts.dir = \"counts/\", sampleanno = NULL)"},{"path":"https://danevass.github.io/bartools/reference/createBarcodeObj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"createBarcodeObj — createBarcodeObj","text":"counts.dir directory containing counts files per sample sampleanno annotation file detailing sample ID groups","code":""},{"path":"https://danevass.github.io/bartools/reference/createBarcodeObj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"createBarcodeObj — createBarcodeObj","text":"data frame containing barcode counts rows per sample columns.","code":""},{"path":"https://danevass.github.io/bartools/reference/extractBAM.html","id":null,"dir":"Reference","previous_headings":"","what":"extractBAM — extractBAM","title":"extractBAM — extractBAM","text":"Barcode extraction function BAM alignment files","code":""},{"path":"https://danevass.github.io/bartools/reference/extractBAM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extractBAM — extractBAM","text":"","code":"extractBAM(   bam,   barcode_pattern,   constant = \"\",   yieldSize = 1e+06,   outfile = NULL )"},{"path":"https://danevass.github.io/bartools/reference/extractBAM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extractBAM — extractBAM","text":"bam BAM file containing barcoded reads barcode_pattern Pattern search reads constant constant region flanking barcode, two constant regions can input character vector. set constant region part barcode_pattern. two constant regions can set e.g. c(\"ACTG\",\"TACG\") yieldSize many lines input file stream pass outfile Optional. path save parsed reads output file","code":""},{"path":"https://danevass.github.io/bartools/reference/extractBAM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extractBAM — extractBAM","text":"Returns data-frame containing read ID, 10X cell ID, 10X umi, barcode DNA sequence barcode ID.","code":""},{"path":"https://danevass.github.io/bartools/reference/extractBarcodeReads.html","id":null,"dir":"Reference","previous_headings":"","what":"extractBarcodeReads — extractBarcodeReads","title":"extractBarcodeReads — extractBarcodeReads","text":"Identify extract reads containing DNA barcodes FASTQ BAM alignment file","code":""},{"path":"https://danevass.github.io/bartools/reference/extractBarcodeReads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extractBarcodeReads — extractBarcodeReads","text":"","code":"extractBarcodeReads(   infile,   barcode_pattern = \"[ACTG][ACTG][GC][AT][GC][ACTG][ACTG][AT][GC][AT]\",   constant = NULL,   yieldSize = 1e+06,   outfile = NULL,   clean = TRUE,   verbose = FALSE,   overwrite = TRUE )"},{"path":"https://danevass.github.io/bartools/reference/extractBarcodeReads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extractBarcodeReads — extractBarcodeReads","text":"infile Input fastq bam file containing barcoded reads barcode_pattern Pattern search reads constant constant region flanking barcode, two constant regions can input character vector. set constant region part barcode_pattern. two constant regions can set e.g. c(\"ACTG\",\"TACG\") yieldSize many lines input file stream pass outfile Optional. path save parsed reads output file clean Logical. remove previous output files generated extractBarcodeReads current run verbose Logical. print detailed output console overwrite Logical. Overwrite previous output files generated extractBarcodeReads","code":""},{"path":"https://danevass.github.io/bartools/reference/extractBarcodeReads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extractBarcodeReads — extractBarcodeReads","text":"Returns data-frame containing read ID, 10X cell ID, 10X umi, barcode DNA sequence barcode ID.","code":""},{"path":"https://danevass.github.io/bartools/reference/extractBarcodeReads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"extractBarcodeReads — extractBarcodeReads","text":"","code":"test.fq <- system.file(\"extdata\", \"test_extract.fastq.gz\", package = \"bartools\") extractBarcodeReads(infile = test.fq, barcode_pattern = \"ACTG\") #> Error in extractBarcodeReads(infile = test.fq, barcode_pattern = \"ACTG\"): could not find function \"extractBarcodeReads\" test.bam <- system.file(\"extdata\", \"test_extract_anno.bam\", package = \"bartools\") extractBarcodeReads(infile = test.bam, barcode_pattern = \"ACTG\") #> Error in extractBarcodeReads(infile = test.bam, barcode_pattern = \"ACTG\"): could not find function \"extractBarcodeReads\""},{"path":"https://danevass.github.io/bartools/reference/extractFASTQ.html","id":null,"dir":"Reference","previous_headings":"","what":"extractFASTQ — extractFASTQ","title":"extractFASTQ — extractFASTQ","text":"Barcode extraction function raw FASTQ files","code":""},{"path":"https://danevass.github.io/bartools/reference/extractFASTQ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extractFASTQ — extractFASTQ","text":"","code":"extractFASTQ(   fastq,   barcode_pattern,   constant = NULL,   outfile = NULL,   block_size = 1e+06,   verbose = FALSE,   overwrite = FALSE )"},{"path":"https://danevass.github.io/bartools/reference/extractFASTQ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extractFASTQ — extractFASTQ","text":"fastq REQUIRED. Path input fastq file barcode_pattern REQUIRED. Pattern search reads. constant constant region(s) flanking barcode. set constant region part barcode_pattern. two constant regions can set e.g. constant = c(\"ACTG\",\"TACG\") outfile OPTIONAL. path save filtered reads output fasta file read name sequence ID block_size Number reads load memory per chunk. Default = 5e5 verbose Boolean. Show verbose output ShortRead? Default = FALSE. overwrite Boolean. Overwrite output files? Default = FALSE.","code":""},{"path":"https://danevass.github.io/bartools/reference/extractFASTQ.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extractFASTQ — extractFASTQ","text":"Returns data-frame containing read ID extracted DNA barcode sequence","code":""},{"path":"https://danevass.github.io/bartools/reference/getDominantBarcodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get dominant barcodes per sample — getDominantBarcodes","title":"Get dominant barcodes per sample — getDominantBarcodes","text":"Takes DGEList dataframe barcode counts, computes percentage abundance barcode within sample returns list barcodes meeting threshold abundance per sample","code":""},{"path":"https://danevass.github.io/bartools/reference/getDominantBarcodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get dominant barcodes per sample — getDominantBarcodes","text":"","code":"getDominantBarcodes(counts.obj, pct.thresh = 5)"},{"path":"https://danevass.github.io/bartools/reference/getDominantBarcodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get dominant barcodes per sample — getDominantBarcodes","text":"counts.obj DGEList object dataframe containing raw / normalised counts barcodes pct.thresh percentage abundance threshold call dominant barcodes","code":""},{"path":"https://danevass.github.io/bartools/reference/getDominantBarcodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get dominant barcodes per sample — getDominantBarcodes","text":"Returns named list containing vectors dominant barcodes per sample","code":""},{"path":"https://danevass.github.io/bartools/reference/getDominantBarcodes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get dominant barcodes per sample — getDominantBarcodes","text":"getDominantBarcodes get names barcodes given percentage frequency per sample","code":""},{"path":"https://danevass.github.io/bartools/reference/getDominantBarcodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get dominant barcodes per sample — getDominantBarcodes","text":"","code":"data(test.dge) getDominantBarcodes(test.dge, pct.thresh = 5) #> $`T0-1` #> [1] \"BC_245016\" \"BC_121651\" #>  #> $`T0-2` #> [1] \"BC_245016\" \"BC_121651\" #>  #> $`S10-1` #> [1] \"BC_8419\"   \"BC_124796\" #>  #> $`S10-2` #> [1] \"BC_8419\"   \"BC_124796\" #>  #> $`S11-1` #> [1] \"BC_53234\"  \"BC_205581\" \"BC_90135\"  \"BC_172626\" \"BC_58978\"  #>  #> $`S11-2` #> [1] \"BC_53234\"  \"BC_205581\" \"BC_90135\"  \"BC_172626\" \"BC_58978\"  #>  #> $`S12-1` #> [1] \"BC_389078\" \"BC_159570\" \"BC_135438\" \"BC_500780\" \"BC_79755\"  #>  #> $`S12-2` #> [1] \"BC_389078\" \"BC_159570\" \"BC_135438\" \"BC_500780\" \"BC_79755\"  #>  #> $`S13-1` #> [1] \"BC_8419\"   \"BC_124796\" \"BC_102160\" \"BC_257382\" #>  #> $`S13-2` #> [1] \"BC_8419\"   \"BC_124796\" \"BC_102160\" \"BC_257382\" #>  #> $`S14-1` #> [1] \"BC_90135\"  \"BC_388103\" \"BC_31610\"  #>  #> $`S14-2` #> [1] \"BC_90135\"  \"BC_388103\" \"BC_31610\"  #>  #> $`S15-1` #> [1] \"BC_1478\"   \"BC_94579\"  \"BC_124796\" \"BC_8419\"   #>  #> $`S15-2` #> [1] \"BC_1478\"   \"BC_94579\"  \"BC_124796\" \"BC_8419\"   #>  #> $`S16-1` #> [1] \"BC_53234\"  \"BC_79755\"  \"BC_140320\" \"BC_31610\"  \"BC_248880\" \"BC_1478\"   #>  #> $`S16-2` #> [1] \"BC_53234\"  \"BC_79755\"  \"BC_140320\" \"BC_31610\"  \"BC_248880\" \"BC_1478\"   #>  #> $`S17-1` #> [1] \"BC_183691\" \"BC_90135\"  \"BC_400391\" #>  #> $`S17-2` #> [1] \"BC_183691\" \"BC_90135\"  \"BC_400391\" #>  #> $`S18-1` #> [1] \"BC_49397\"  \"BC_91412\"  \"BC_159570\" \"BC_62602\"  \"BC_93485\"  \"BC_70225\"  #>  #> $`S18-2` #> [1] \"BC_49397\"  \"BC_91412\"  \"BC_159570\" \"BC_62602\"  \"BC_70225\"  \"BC_93485\"  #>  #> $`S1-1` #> [1] \"BC_79755\"  \"BC_102160\" \"BC_59493\"  \"BC_23361\"  \"BC_53234\"  \"BC_400391\" #> [7] \"BC_142112\" #>  #> $`S1-2` #> [1] \"BC_79755\"  \"BC_102160\" \"BC_59493\"  \"BC_23361\"  \"BC_53234\"  #>  #> $`S2-1` #> [1] \"BC_248880\" \"BC_65104\"  \"BC_9141\"   \"BC_1478\"   \"BC_31610\"  \"BC_79755\"  #>  #> $`S2-2` #> [1] \"BC_248880\" \"BC_65104\"  \"BC_9141\"   \"BC_1478\"   \"BC_31610\"  \"BC_79755\"  #>  #> $`S3-1` #> [1] \"BC_79755\"  \"BC_142024\" \"BC_102160\" #>  #> $`S3-2` #> [1] \"BC_79755\"  \"BC_142024\" \"BC_102160\" \"BC_183691\" #>  #> $`S4-1` #> [1] \"BC_53234\"  \"BC_58978\"  \"BC_62602\"  \"BC_68847\"  \"BC_140320\" \"BC_79755\"  #>  #> $`S4-2` #> [1] \"BC_53234\"  \"BC_58978\"  \"BC_62602\"  \"BC_68847\"  \"BC_140320\" \"BC_79755\"  #> [7] \"BC_327422\" #>  #> $`S5-1` #> [1] \"BC_561471\" \"BC_118640\" \"BC_59493\"  \"BC_1607\"   #>  #> $`S5-2` #> [1] \"BC_561471\" \"BC_118640\" \"BC_59493\"  \"BC_1607\"   \"BC_31610\"  #>  #> $`S6-1` #> [1] \"BC_79755\"  \"BC_8419\"   \"BC_124796\" \"BC_4564\"   #>  #> $`S6-2` #> [1] \"BC_79755\"  \"BC_8419\"   \"BC_124796\" \"BC_4564\"   #>  #> $`S7-1` #> [1] \"BC_53234\"  \"BC_54442\"  \"BC_142024\" \"BC_140320\" \"BC_93485\"  #>  #> $`S7-2` #> [1] \"BC_53234\"  \"BC_54442\"  \"BC_142024\" \"BC_140320\" \"BC_93485\"  #>  #> $`S8-1` #> [1] \"BC_142024\" \"BC_90135\"  \"BC_58978\"  \"BC_93485\"  #>  #> $`S8-2` #> [1] \"BC_142024\" \"BC_90135\"  \"BC_58978\"  \"BC_93485\"  #>  #> $`S9-1` #> [1] \"BC_79755\"  \"BC_4198\"   \"BC_81579\"  \"BC_560839\" \"BC_118640\" \"BC_345889\" #> [7] \"BC_400391\" #>  #> $`S9-2` #> [1] \"BC_79755\"  \"BC_4198\"   \"BC_81579\"  \"BC_118640\" \"BC_560839\" \"BC_345889\" #> [7] \"BC_400391\" #>"},{"path":"https://danevass.github.io/bartools/reference/get_upper_tri.html","id":null,"dir":"Reference","previous_headings":"","what":"Get upper triangle — get_upper_tri","title":"Get upper triangle — get_upper_tri","text":"change lower triangle values mirrored matrix NA","code":""},{"path":"https://danevass.github.io/bartools/reference/get_upper_tri.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get upper triangle — get_upper_tri","text":"","code":"get_upper_tri(cormat)"},{"path":"https://danevass.github.io/bartools/reference/get_upper_tri.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get upper triangle — get_upper_tri","text":"cormat matrix correlation values","code":""},{"path":"https://danevass.github.io/bartools/reference/get_upper_tri.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get upper triangle — get_upper_tri","text":"Returns matrix correlation values lower triangle values changed NA","code":""},{"path":"https://danevass.github.io/bartools/reference/mapBarcodeReads.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Barcode Reads — mapBarcodeReads","title":"Map Barcode Reads — mapBarcodeReads","text":"Map reads containing lintraceR DNA barcode barcode reference library/fasta return CellID:lintracer barcode ID annotations","code":""},{"path":"https://danevass.github.io/bartools/reference/mapBarcodeReads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Barcode Reads — mapBarcodeReads","text":"","code":"mapBarcodeReads(   reads,   bowtie_index = NULL,   mismatches = 2,   threads = 4,   outdir = getwd(),   prefix = \"map_barcode_reads\",   cleanup = TRUE,   reference_fasta = NULL )"},{"path":"https://danevass.github.io/bartools/reference/mapBarcodeReads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Barcode Reads — mapBarcodeReads","text":"reads Dataframe extractBarcodeReads containing barcode reads bowtie_index Path bowtie index barcode reference library. Include index prefix. mismatches Number mismatches allowed bowtie read mapping threads Number CPU threads bowtie use outdir Optional. save output directory prefix Optional. prefix add output file cleanup Logical. Remove intermediate files generated mapBarcodeReads reference_fasta Optional. Fasta file reference barcode library alignment. Use instead bowtie_index.","code":""},{"path":"https://danevass.github.io/bartools/reference/mapBarcodeReads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Barcode Reads — mapBarcodeReads","text":"Returns data-frame containing read ID, 10X cell ID, 10X umi, lintraceR DNA barcode sequence mapped lintraceR DNA barcode ID.","code":""},{"path":"https://danevass.github.io/bartools/reference/mapBarcodeReads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map Barcode Reads — mapBarcodeReads","text":"","code":"load(system.file(\"extdata\", \"test_map.rda\", package = \"bartools\")) #> Warning: cannot open compressed file '', probable reason 'No such file or directory' #> Error in readChar(con, 5L, useBytes = TRUE): cannot open the connection test.ref <- system.file(\"extdata\", \"barcode_lib_reference_test.fasta\", package = \"bartools\") mapBarcodeReads(reads = test.map, reference_fasta = test.ref, outdir = tempdir(), prefix = \"map\") #> Error in mapBarcodeReads(reads = test.map, reference_fasta = test.ref,     outdir = tempdir(), prefix = \"map\"): could not find function \"mapBarcodeReads\""},{"path":"https://danevass.github.io/bartools/reference/normaliseCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalise barcode counts — normaliseCounts","title":"Normalise barcode counts — normaliseCounts","text":"Normalise barcode counts within DGEList object","code":""},{"path":"https://danevass.github.io/bartools/reference/normaliseCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalise barcode counts — normaliseCounts","text":"","code":"normaliseCounts(dge, method = \"cpm\", threshold = 0)"},{"path":"https://danevass.github.io/bartools/reference/normaliseCounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalise barcode counts — normaliseCounts","text":"dge DGEList object containing raw barcode counts normalised method method normalisation threshold Threshold apply counts normalisation","code":""},{"path":"https://danevass.github.io/bartools/reference/normaliseCounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalise barcode counts — normaliseCounts","text":"Returns data.frame object containing normalised barcode counts","code":""},{"path":"https://danevass.github.io/bartools/reference/normaliseCounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalise barcode counts — normaliseCounts","text":"","code":"data(test.dge) normaliseCounts(test.dge, method = \"cpm\", threshold = 0) #> Error in normaliseCounts(test.dge, method = \"cpm\", threshold = 0): method argument must be one of CPM, RLE, TMM, upperquartile or TMMwsp"},{"path":"https://danevass.github.io/bartools/reference/plotAbundanceLines.html","id":null,"dir":"Reference","previous_headings":"","what":"Lineplot of barcode abundances in two conditions — plotAbundanceLines","title":"Lineplot of barcode abundances in two conditions — plotAbundanceLines","text":"Takes dataframe barcode counts, computes median abundance barcode two specific conditions, line plot conditions","code":""},{"path":"https://danevass.github.io/bartools/reference/plotAbundanceLines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lineplot of barcode abundances in two conditions — plotAbundanceLines","text":"","code":"plotAbundanceLines(   dge,   condition,   condition_names,   plot_type = \"DEG\",   keep = 0.9,   nbarcode = 10,   title = \"\" )"},{"path":"https://danevass.github.io/bartools/reference/plotAbundanceLines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lineplot of barcode abundances in two conditions — plotAbundanceLines","text":"dge DGEList object containing raw counts barcodes condition sample condition interest condition_names vector size 2. Gives name two conditions conditions plot plot_type barcodes plotted. 'DEG' plot 10 differentially abundant barcodes. 'counts' plots 5 top highest abundant barcodes condition. 'log2FC' plots barcodes highest absolute log2FC (number barcodes plot given nbarcode) keep percentage highest abundant barcode keep. Rest barcodes filtered used plots. nbarcode number barcodes plot using 'log2FC' plot type. title desired plot title","code":""},{"path":"https://danevass.github.io/bartools/reference/plotAbundanceLines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lineplot of barcode abundances in two conditions — plotAbundanceLines","text":"Returns lineplot","code":""},{"path":"https://danevass.github.io/bartools/reference/plotAbundanceLines.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lineplot of barcode abundances in two conditions — plotAbundanceLines","text":"plotAbundanceLines Lineplot barcode abundances two different experimental settings","code":""},{"path":"https://danevass.github.io/bartools/reference/plotAbundanceLines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lineplot of barcode abundances in two conditions — plotAbundanceLines","text":"","code":"data(test.dge) plotAbundanceLines(dge = test.dge, condition = test.dge$samples$group, condition_names = c(\"T0\",\"10_High_dose\"), plot_type = 'counts', title = 'test')"},{"path":"https://danevass.github.io/bartools/reference/plotBARtabFilterQC.html","id":null,"dir":"Reference","previous_headings":"","what":"plotBARtabFilterQC — plotBARtabFilterQC","title":"plotBARtabFilterQC — plotBARtabFilterQC","text":"Plot filtered read percentages BARtab run folder","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBARtabFilterQC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotBARtabFilterQC — plotBARtabFilterQC","text":"","code":"plotBARtabFilterQC(   dir = NULL,   recursive = T,   pattern.log = \"*filter.log\",   pattern.value = \"reads\",   full.names = T,   normalised = F,   plot = T,   title = \"BARtab Filter QC\" )"},{"path":"https://danevass.github.io/bartools/reference/plotBARtabFilterQC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotBARtabFilterQC — plotBARtabFilterQC","text":"dir directory BARtab successfuly run barcode count datasets recursive Logical. TRUE recurse regex search subdirectories#' pattern.log regex string specify filter stage log files pattern.value grep string log files full.names Logical. Return full names files detected regex search normalised Logical. log10 normalise counts plot Logical. Generate plots. False returns raw data title Optional. title plots.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBARtabFilterQC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotBARtabFilterQC — plotBARtabFilterQC","text":"Returns plot / dataset containing BARtab Filtering stage QC data","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBARtabMapQC.html","id":null,"dir":"Reference","previous_headings":"","what":"plotBARtabMapQC — plotBARtabMapQC","title":"plotBARtabMapQC — plotBARtabMapQC","text":"Plot mapped read percentages BARtab run folder","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBARtabMapQC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotBARtabMapQC — plotBARtabMapQC","text":"","code":"plotBARtabMapQC(   dir = NULL,   recursive = T,   pattern.log = \"*bowtie.log\",   full.names = T,   plot = T,   title = \"BARtab Mapping QC\" )"},{"path":"https://danevass.github.io/bartools/reference/plotBARtabMapQC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotBARtabMapQC — plotBARtabMapQC","text":"dir directory BARtab successfuly run barcode count datasets recursive Logical. TRUE recurse regex search subdirectories#' pattern.log regex string specify filter stage log files full.names Logical. Return full names files detected regex search plot Logical. Generate plots. False returns raw data title Optional. title plots.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBARtabMapQC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotBARtabMapQC — plotBARtabMapQC","text":"Returns plot / dataset containing BARtab Filtering stage QC data","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeBoxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Boxplot of selected barcodes — plotBarcodeBoxplot","title":"Boxplot of selected barcodes — plotBarcodeBoxplot","text":"Takes dataframe barcode counts, select specific barcodes dataframe boxplot counts","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeBoxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boxplot of selected barcodes — plotBarcodeBoxplot","text":"","code":"plotBarcodeBoxplot(dge.obj, barcodes, condition = NULL)"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeBoxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boxplot of selected barcodes — plotBarcodeBoxplot","text":"dge.obj DGE object containing counts sample information barcodes vector barcodes plotted condition specific metadata condition plotted","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeBoxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boxplot of selected barcodes — plotBarcodeBoxplot","text":"Returns boxplot","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeBoxplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Boxplot of selected barcodes — plotBarcodeBoxplot","text":"plotBCBoxplot Boxplot selected barcodes","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeBoxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boxplot of selected barcodes — plotBarcodeBoxplot","text":"","code":"data(test.dge) barcodes <- sample(rownames(test.dge), 10) plotBarcodeBoxplot(test.dge, barcodes) #> multiple barcodes given. No metadata group  plotBarcodeBoxplot(test.dge, barcodes, condition = c(\"T0\", \"T0b\")) #> multiple barcodes given. No metadata group"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeBubble.html","id":null,"dir":"Reference","previous_headings":"","what":"plotBarcodeBubble — plotBarcodeBubble","title":"plotBarcodeBubble — plotBarcodeBubble","text":"Generate proportional bubbleplots raw count object barcodes labelled specified threshold","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeBubble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotBarcodeBubble — plotBarcodeBubble","text":"","code":"plotBarcodeBubble(   counts.obj,   labels = T,   proportion.cutoff = 10,   name = \"Proportional Bubble Plot\" )"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeBubble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotBarcodeBubble — plotBarcodeBubble","text":"counts.obj dataframe containing raw counts barcodes labels Boolean. print barcode labels? proportion.cutoff barcodes represented percentage within sample threshold labelled name desired plot title","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeBubble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotBarcodeBubble — plotBarcodeBubble","text":"Returns bubbleplot barcodes represented proportion total pool","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeBubble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plotBarcodeBubble — plotBarcodeBubble","text":"","code":"data(test.counts) #> Warning: data set ‘test.counts’ not found plotBarcodeBubble(test.counts, labels = TRUE, proportion.cutoff = 10) #> Error in as.data.frame(counts.obj): object 'test.counts' not found plotBarcodeBubble(test.counts, labels = FALSE, proportion.cutoff = 10) #> Error in as.data.frame(counts.obj): object 'test.counts' not found"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCorrelation.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample to sample correlation — plotBarcodeCorrelation","title":"Sample to sample correlation — plotBarcodeCorrelation","text":"Plot sample correlation barcode sets / samples","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCorrelation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample to sample correlation — plotBarcodeCorrelation","text":"","code":"plotBarcodeCorrelation(   counts,   method = \"pearson\",   upper = T,   clustered = T,   name = \"Sample Correlation\" )"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCorrelation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample to sample correlation — plotBarcodeCorrelation","text":"counts matrix/dataframe containing raw normalised counts method correlation metric use. Refer stats::cor available options upper Logical. plot upper half matrix clustered Logical. cluster rows columns matrix name title plot","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCorrelation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample to sample correlation — plotBarcodeCorrelation","text":"Returns heatmap sample distances using desired clustering","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCorrelation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample to sample correlation — plotBarcodeCorrelation","text":"","code":"test.mat <- matrix(rnorm(10*10,mean=0,sd=2), 10, 10) plotBarcodeCorrelation(counts = test.mat, method = \"pearson\")"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot total counts per barcode in library — plotBarcodeCounts","title":"Plot total counts per barcode in library — plotBarcodeCounts","text":"Simple plot total read counts per barcode library","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot total counts per barcode in library — plotBarcodeCounts","text":"","code":"plotBarcodeCounts(counts, order = F, log10 = F)"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot total counts per barcode in library — plotBarcodeCounts","text":"counts data.frame barcode count x sample order Logical. Order dataset decreasing abundance log10 Logical. log10 transform data. Adds pseudocount 1","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot total counts per barcode in library — plotBarcodeCounts","text":"Returns plot read counts per barcode (row) data frame","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot total counts per barcode in library — plotBarcodeCounts","text":"","code":"data(test.counts) #> Warning: data set ‘test.counts’ not found plotBarcodeCounts(test.counts) #> Error in is.data.frame(x): object 'test.counts' not found plotBarcodeCounts(test.counts, order = TRUE) #> Error in is.data.frame(x): object 'test.counts' not found plotBarcodeCounts(test.counts, order = TRUE, log10 = TRUE) #> Error in is.data.frame(x): object 'test.counts' not found"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCumSum.html","id":null,"dir":"Reference","previous_headings":"","what":"Barcode cumulative sum plot of a list of samples against and ordered by sample1 — plotBarcodeCumSum","title":"Barcode cumulative sum plot of a list of samples against and ordered by sample1 — plotBarcodeCumSum","text":"Takes dataframe barcode cpm counts, calculate relative abundance barcode sample. , barcodes samples ordered sample1 decreasing order cumulative sum calculated sample. Cumulative sum plotted sample1.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCumSum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barcode cumulative sum plot of a list of samples against and ordered by sample1 — plotBarcodeCumSum","text":"","code":"plotBarcodeCumSum(counts, sample1 = NULL, samples = NULL)"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCumSum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Barcode cumulative sum plot of a list of samples against and ordered by sample1 — plotBarcodeCumSum","text":"counts Dataframe containing cpm counts sample1 sample compare others samples vector sample names plotted sample1","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCumSum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Barcode cumulative sum plot of a list of samples against and ordered by sample1 — plotBarcodeCumSum","text":"Returns plot cumulative sum read counts per barcode","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCumSum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Barcode cumulative sum plot of a list of samples against and ordered by sample1 — plotBarcodeCumSum","text":"plotBarcodeCumSum Plot cumulative sum barcode cpm counts list samples ordered sample1.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeCumSum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Barcode cumulative sum plot of a list of samples against and ordered by sample1 — plotBarcodeCumSum","text":"","code":"data(test.counts) #> Warning: data set ‘test.counts’ not found plotBarcodeCumSum(counts = test.counts, sample1 = 'T0-1', samples = c('T0-1','S9-1', 'S8-1')) #> Error in plotBarcodeCumSum(counts = test.counts, sample1 = \"T0-1\", samples = c(\"T0-1\",     \"S9-1\", \"S8-1\")): object 'test.counts' not found"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeDistance.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample to sample distances — plotBarcodeDistance","title":"Sample to sample distances — plotBarcodeDistance","text":"Plot sample distances barcode sets / samples","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeDistance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample to sample distances — plotBarcodeDistance","text":"","code":"plotBarcodeDistance(   counts,   method = \"euclidean\",   upper = T,   clustered = T,   name = \"Sample Distances\" )"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeDistance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample to sample distances — plotBarcodeDistance","text":"counts matrix/dataframe containing raw normalised counts method distance metric use. Refer stats::dist available options upper Logical. plot upper half matrix clustered Logical. cluster rows columns matrix name title plot","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeDistance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample to sample distances — plotBarcodeDistance","text":"Returns heatmap sample distances using desired clustering","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeDistance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample to sample distances — plotBarcodeDistance","text":"","code":"test.mat <- matrix(rnorm(10*10,mean=0,sd=2), 10, 10) plotBarcodeDistance(test.mat)"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeHeatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot barcode heatmap — plotBarcodeHeatmap","title":"Plot barcode heatmap — plotBarcodeHeatmap","text":"Takes dataframe barcode counts, selects N abundant barcodes per sample. abundant barcodes gathered list heatmap barcodes plotted samples. Stars indicate abundant barcodes per sample.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeHeatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot barcode heatmap — plotBarcodeHeatmap","text":"","code":"plotBarcodeHeatmap(counts, N, name = \"CPM\", show_bc = FALSE)"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeHeatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot barcode heatmap — plotBarcodeHeatmap","text":"counts Dataframe containing cpm counts N String sample 1 name (used ranked barcode abundance) name String heatmap scale name show_bc Boolean show barcode names heatmap","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeHeatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot barcode heatmap — plotBarcodeHeatmap","text":"Returns heatmap","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeHeatmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot barcode heatmap — plotBarcodeHeatmap","text":"plotBarcodeHeatmap Plot heatmap N abundant barcodes per sample","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeHeatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot barcode heatmap — plotBarcodeHeatmap","text":"","code":"data(test.counts) #> Warning: data set ‘test.counts’ not found plotBarcodeHeatmap(test.counts, 10,'Counts',FALSE) #> Error in is.data.frame(x): object 'test.counts' not found"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeHistogram.html","id":null,"dir":"Reference","previous_headings":"","what":"plotBarcodeHistogram — plotBarcodeHistogram","title":"plotBarcodeHistogram — plotBarcodeHistogram","text":"Generate stacked barcode plots showing proportion raw count object.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeHistogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotBarcodeHistogram — plotBarcodeHistogram","text":"","code":"plotBarcodeHistogram(   counts.obj,   sample = NULL,   top = 10,   name = \"Barcode Histogram\" )"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeHistogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotBarcodeHistogram — plotBarcodeHistogram","text":"counts.obj dataframe containing raw counts barcodes sample desired name sample order barcodes top top n barcodes sample color, barcodes shown grey name desired plot title","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeHistogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotBarcodeHistogram — plotBarcodeHistogram","text":"Returns barcode histogram plot barcodes represented proportion total pool","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeHistogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plotBarcodeHistogram — plotBarcodeHistogram","text":"","code":"data(test.counts) #> Warning: data set ‘test.counts’ not found plotBarcodeHistogram(test.counts, sample = \"T0-1\", top = 10, name = \"Barcode Histogram\") #> Error in sweep(counts.obj, 2, colSums(counts.obj), `/`): object 'test.counts' not found"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodePCA.html","id":null,"dir":"Reference","previous_headings":"","what":"Barcode PCA plot — plotBarcodePCA","title":"Barcode PCA plot — plotBarcodePCA","text":"Takes edgeR DGEList object contining barcode data dataframe barcode cpm counts performs PCA. , plots first two dimensions. Modified DESeq2 package plotPCA function","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodePCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barcode PCA plot — plotBarcodePCA","text":"","code":"plotBarcodePCA(   object,   intgroup = \"condition\",   col = \"group\",   ntop = 500,   returnData = FALSE,   batch = NULL )"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodePCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Barcode PCA plot — plotBarcodePCA","text":"object DGEList dataframe containing normalised barcode counts intgroup vector grouping variables interest col color group plot, must one intgroup ntop number top variable genes used PCA calculation returnData Logical. return data.frame PCA calculation? batch metadata category indicating source batch effects. used limma removeBatchEffect function prior PCA","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodePCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Barcode PCA plot — plotBarcodePCA","text":"Returns plot first two principal components dataset","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodePCA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Barcode PCA plot — plotBarcodePCA","text":"plotBarcodePCA Plot first two principal components barcode dataset","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodePCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Barcode PCA plot — plotBarcodePCA","text":"","code":"data(test.dge) plotBarcodePCA(test.dge, intgroup = \"group\", ntop = 500, returnData = FALSE, batch = NULL)"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeRegression.html","id":null,"dir":"Reference","previous_headings":"","what":"plotBarcodeRegression — plotBarcodeRegression","title":"plotBarcodeRegression — plotBarcodeRegression","text":"Generate linear regression scatterplot two sets sample counts.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeRegression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotBarcodeRegression — plotBarcodeRegression","text":"","code":"plotBarcodeRegression(   dge,   samp1 = NULL,   samp2 = NULL,   title = NULL,   trendline = T,   trans = NULL,   rug = F )"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeRegression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotBarcodeRegression — plotBarcodeRegression","text":"dge DGEList object containing grouping variable fit linear model samp1 name sample 1. must one colnames(dge) samp2 name sample 2. must one colnames(dge) title desired name output plot trendline Logical. Include linear trendline using stat_smooth() trans ggplot2. continuous scales, name transformation object object . rug Logical. Include geom_rug density information axes?","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeRegression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotBarcodeRegression — plotBarcodeRegression","text":"Returns scatterplot two samples","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeRegression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plotBarcodeRegression — plotBarcodeRegression","text":"","code":"data(test.dge) plotBarcodeRegression(dge = test.dge, samp1 = \"T0-1\", samp2 = \"T0-2\") #> `geom_smooth()` using formula = 'y ~ x'"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeTimeseries.html","id":null,"dir":"Reference","previous_headings":"","what":"plotBarcodeTimeseries — plotBarcodeTimeseries","title":"plotBarcodeTimeseries — plotBarcodeTimeseries","text":"Generate proportional timeseries plot raw / normalised barcode count object.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeTimeseries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotBarcodeTimeseries — plotBarcodeTimeseries","text":"","code":"plotBarcodeTimeseries(counts.obj, name = \"\", seed = 5, top = 50)"},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeTimeseries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotBarcodeTimeseries — plotBarcodeTimeseries","text":"counts.obj dataframe containing raw counts barcodes name desired plot title seed RNG seed top number top barcodes per sample plot","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeTimeseries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotBarcodeTimeseries — plotBarcodeTimeseries","text":"Returns bubbleplot barcodes represented proportion total pool","code":""},{"path":"https://danevass.github.io/bartools/reference/plotBarcodeTimeseries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plotBarcodeTimeseries — plotBarcodeTimeseries","text":"","code":"data(test.counts) #> Warning: data set ‘test.counts’ not found plotBarcodeTimeseries(test.counts[,1:4], name = \"Proportional Timeseries Plot\", seed = 5, top = 10) #> Error in as.data.frame(counts.obj): object 'test.counts' not found"},{"path":"https://danevass.github.io/bartools/reference/plotDetectedBarcodes.html","id":null,"dir":"Reference","previous_headings":"","what":"plotDetectedBarcodes — plotDetectedBarcodes","title":"plotDetectedBarcodes — plotDetectedBarcodes","text":"Plot total number barcodes detected sample","code":""},{"path":"https://danevass.github.io/bartools/reference/plotDetectedBarcodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotDetectedBarcodes — plotDetectedBarcodes","text":"","code":"plotDetectedBarcodes(   counts,   percentile = 0.95,   plot = T,   sample.order = NULL,   group = NULL,   title = NULL )"},{"path":"https://danevass.github.io/bartools/reference/plotDetectedBarcodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotDetectedBarcodes — plotDetectedBarcodes","text":"counts DGEList dataframe containing raw normalised barcode counts percentile desired percentile value. 95th percentile default plot Logical. plot data instead returning counts table. sample.order desired ordering samples plot group grouping field dgelist$samples color samples title desired plot title","code":""},{"path":"https://danevass.github.io/bartools/reference/plotDetectedBarcodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotDetectedBarcodes — plotDetectedBarcodes","text":"Returns histogram plot number detected barcodes per sample.","code":""},{"path":"https://danevass.github.io/bartools/reference/plotDetectedBarcodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plotDetectedBarcodes — plotDetectedBarcodes","text":"","code":"data(test.dge) plotDetectedBarcodes(test.dge, percentile = .95) #> Warning: Use of `percentile.df$Sample` is discouraged. #> ℹ Use `Sample` instead. #> Warning: Use of `percentile.df$Barcodes` is discouraged. #> ℹ Use `Barcodes` instead. #> Warning: Use of `percentile.df$Barcodes` is discouraged. #> ℹ Use `Barcodes` instead. #> Warning: Use of `percentile.df$Barcodes` is discouraged. #> ℹ Use `Barcodes` instead. #> Warning: Use of `percentile.df$Sample` is discouraged. #> ℹ Use `Sample` instead.  plotDetectedBarcodes(test.dge, plot = FALSE) #>    Sample Barcodes #> 1    T0-1      593 #> 2    T0-2      590 #> 3   S10-1        3 #> 4   S10-2        4 #> 5   S11-1       19 #> 6   S11-2       20 #> 7   S12-1       14 #> 8   S12-2       14 #> 9   S13-1       10 #> 10  S13-2       11 #> 11  S14-1        6 #> 12  S14-2        6 #> 13  S15-1        7 #> 14  S15-2        7 #> 15  S16-1       19 #> 16  S16-2       20 #> 17  S17-1        5 #> 18  S17-2        6 #> 19  S18-1       27 #> 20  S18-2       27 #> 21   S1-1       14 #> 22   S1-2       15 #> 23   S2-1       12 #> 24   S2-2       11 #> 25   S3-1       10 #> 26   S3-2       10 #> 27   S4-1       25 #> 28   S4-2       26 #> 29   S5-1       11 #> 30   S5-2       12 #> 31   S6-1        9 #> 32   S6-2       10 #> 33   S7-1       16 #> 34   S7-2       16 #> 35   S8-1       20 #> 36   S8-2       21 #> 37   S9-1       19 #> 38   S9-2       19"},{"path":"https://danevass.github.io/bartools/reference/plotLibraryCumSum.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative sum plot of barcode abundances in a reference library — plotLibraryCumSum","title":"Cumulative sum plot of barcode abundances in a reference library — plotLibraryCumSum","text":"Takes dataframe barcode counts, computes median abundance barcode two specific conditions, line plot conditions","code":""},{"path":"https://danevass.github.io/bartools/reference/plotLibraryCumSum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative sum plot of barcode abundances in a reference library — plotLibraryCumSum","text":"","code":"plotLibraryCumSum(barcodes, samplename = \"Library\", cutoff = 10)"},{"path":"https://danevass.github.io/bartools/reference/plotLibraryCumSum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative sum plot of barcode abundances in a reference library — plotLibraryCumSum","text":"barcodes dataframe containing raw counts barcodes samplename sample condition interest cutoff rowsum cutoff defining rows keep","code":""},{"path":"https://danevass.github.io/bartools/reference/plotLibraryCumSum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative sum plot of barcode abundances in a reference library — plotLibraryCumSum","text":"Returns cumulative sum plot desired barcode library sample","code":""},{"path":"https://danevass.github.io/bartools/reference/plotLibraryCumSum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cumulative sum plot of barcode abundances in a reference library — plotLibraryCumSum","text":"plotLibraryCumSum Plot cumulative sum barcode abundances barcode library","code":""},{"path":"https://danevass.github.io/bartools/reference/plotLibraryDiversity.html","id":null,"dir":"Reference","previous_headings":"","what":"Lineplot of barcode abundances in two conditions — plotLibraryDiversity","title":"Lineplot of barcode abundances in two conditions — plotLibraryDiversity","text":"Takes dataframe barcode counts, computes plots abundance barcode library sample","code":""},{"path":"https://danevass.github.io/bartools/reference/plotLibraryDiversity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lineplot of barcode abundances in two conditions — plotLibraryDiversity","text":"","code":"plotLibraryDiversity(barcodes, samplename = \"Library\", cutoff = 10, skew = F)"},{"path":"https://danevass.github.io/bartools/reference/plotLibraryDiversity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lineplot of barcode abundances in two conditions — plotLibraryDiversity","text":"barcodes dataframe containing raw counts barcodes samplename sample condition interest cutoff rowsum cutoff defining rows keep skew Logical. Calculate plot library skew ratio (90th percentile / 10th percentile)","code":""},{"path":"https://danevass.github.io/bartools/reference/plotLibraryDiversity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lineplot of barcode abundances in two conditions — plotLibraryDiversity","text":"Returns barcode library frequency plot","code":""},{"path":"https://danevass.github.io/bartools/reference/plotLibraryDiversity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lineplot of barcode abundances in two conditions — plotLibraryDiversity","text":"plotLibraryDiversity Lineplot barcode abundances two different experimental settings","code":""},{"path":"https://danevass.github.io/bartools/reference/plotOrderedBubble.html","id":null,"dir":"Reference","previous_headings":"","what":"plotOrderedBubble — plotOrderedBubble","title":"plotOrderedBubble — plotOrderedBubble","text":"Generate ordered proportional bubbleplots raw count object barcodes labelled specified threshold","code":""},{"path":"https://danevass.github.io/bartools/reference/plotOrderedBubble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotOrderedBubble — plotOrderedBubble","text":"","code":"plotOrderedBubble(   counts.obj,   labels = T,   name = \"Proportional Bubble Plot\",   orderSample = NULL,   proportion.cutoff = 10,   colorDominant = FALSE )"},{"path":"https://danevass.github.io/bartools/reference/plotOrderedBubble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotOrderedBubble — plotOrderedBubble","text":"counts.obj dataframe containing raw counts barcodes. assumes barcodes rownames. labels logical. Print barcode labels name desired plot title orderSample name sample order proportion.cutoff barcodes represented percentage within sample threshold labelled colorDominant color clones frequency proportion.cutoff. Others colored grey","code":""},{"path":"https://danevass.github.io/bartools/reference/plotOrderedBubble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotOrderedBubble — plotOrderedBubble","text":"Returns bubbleplot barcodes represented proportion total pool","code":""},{"path":"https://danevass.github.io/bartools/reference/plotOrderedBubble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plotOrderedBubble — plotOrderedBubble","text":"","code":"data(test.counts) #> Warning: data set ‘test.counts’ not found plotOrderedBubble(test.counts, orderSample = \"T0-1\") #> Error in methods::is(counts): object 'counts' not found"},{"path":"https://danevass.github.io/bartools/reference/plotReadCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot sample read counts — plotReadCounts","title":"Plot sample read counts — plotReadCounts","text":"Simple plot total read counts per sample","code":""},{"path":"https://danevass.github.io/bartools/reference/plotReadCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot sample read counts — plotReadCounts","text":"","code":"plotReadCounts(   counts,   group = NULL,   log10 = FALSE,   legend = TRUE,   order = TRUE )"},{"path":"https://danevass.github.io/bartools/reference/plotReadCounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot sample read counts — plotReadCounts","text":"counts data.frame barcode count x sample group character vector containing grouping information. Must equal number columns counts. Can pass metadata column DGEList object. log10 Boolean. log10 transform output? legend Boolean. Include legend? order Boolean. Order samples group?","code":""},{"path":"https://danevass.github.io/bartools/reference/plotReadCounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot sample read counts — plotReadCounts","text":"Returns plot read counts per column (sample) data frame","code":""},{"path":"https://danevass.github.io/bartools/reference/plotReadCounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot sample read counts — plotReadCounts","text":"","code":"data(test.counts) #> Warning: data set ‘test.counts’ not found plotReadCounts(test.dge$counts, group = test.dge$samples$Group)"},{"path":"https://danevass.github.io/bartools/reference/processBarcodeLibrary.html","id":null,"dir":"Reference","previous_headings":"","what":"processBarcodeLibrary — processBarcodeLibrary","title":"processBarcodeLibrary — processBarcodeLibrary","text":"process barcode reference file raw sequencing datasets","code":""},{"path":"https://danevass.github.io/bartools/reference/processBarcodeLibrary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"processBarcodeLibrary — processBarcodeLibrary","text":"","code":"processBarcodeLibrary(   file = NULL,   samplename = \"Barcode\",   cutoff = 10,   header = FALSE,   outdir = tempdir() )"},{"path":"https://danevass.github.io/bartools/reference/processBarcodeLibrary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"processBarcodeLibrary — processBarcodeLibrary","text":"file path starcode output barcode library samplename name reference library. prefixed barcode reference cutoff rowsum cutoff defining barcodes keep reference library header Logical. input file contain header line outdir Desired output directory save library files","code":""},{"path":"https://danevass.github.io/bartools/reference/processBarcodeLibrary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"processBarcodeLibrary — processBarcodeLibrary","text":"returns data frame containing barcode read count reference","code":""},{"path":"https://danevass.github.io/bartools/reference/processBarcodeLibrary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"processBarcodeLibrary — processBarcodeLibrary","text":"","code":"load(system.file(\"extdata\", \"test_raw_lib.rda\", package = \"bartools\")) #> Warning: cannot open compressed file '', probable reason 'No such file or directory' #> Error in readChar(con, 5L, useBytes = TRUE): cannot open the connection processBarcodeLibrary(file = test.raw.lib, samplename = \"Barcode\", outdir = tempdir()) #> Error in processBarcodeLibrary(file = test.raw.lib, samplename = \"Barcode\",     outdir = tempdir()): object 'test.raw.lib' not found"},{"path":"https://danevass.github.io/bartools/reference/test.counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Test barcode counts — test.counts","title":"Test barcode counts — test.counts","text":"dataset containing normalised count information 1639 hypothetical barcodes 38 hypothetical samples","code":""},{"path":"https://danevass.github.io/bartools/reference/test.counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test barcode counts — test.counts","text":"","code":"test.counts"},{"path":"https://danevass.github.io/bartools/reference/test.counts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Test barcode counts — test.counts","text":"data frame 1639 rows 38 variables: T0-1 sample T0, replicate 1 T0-2 sample T0, replicate 2","code":""},{"path":"https://danevass.github.io/bartools/reference/test.dge.html","id":null,"dir":"Reference","previous_headings":"","what":"Test barcode DGEList object — test.dge","title":"Test barcode DGEList object — test.dge","text":"DGEList object containing raw count information 1639 hypothetical barcodes 38 hypothetical samples","code":""},{"path":"https://danevass.github.io/bartools/reference/test.dge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test barcode DGEList object — test.dge","text":"","code":"test.dge"},{"path":"https://danevass.github.io/bartools/reference/test.dge.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Test barcode DGEList object — test.dge","text":"DGEList object containing 1639 rows 38 variables:","code":""},{"path":"https://danevass.github.io/bartools/reference/thresholdCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Threshold counts — thresholdCounts","title":"Threshold counts — thresholdCounts","text":"Threshold dataframe given level return number barcodes meeting threshold sample.","code":""},{"path":"https://danevass.github.io/bartools/reference/thresholdCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Threshold counts — thresholdCounts","text":"","code":"thresholdCounts(df, threshold = 20, plot = FALSE)"},{"path":"https://danevass.github.io/bartools/reference/thresholdCounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Threshold counts — thresholdCounts","text":"df Dataframe thresholded. threshold threshold use. Rows count removed. plot Logical. Draw plots dataset?","code":""},{"path":"https://danevass.github.io/bartools/reference/thresholdCounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Threshold counts — thresholdCounts","text":"Returns thresholded data-frame","code":""},{"path":"https://danevass.github.io/bartools/reference/thresholdCounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Threshold counts — thresholdCounts","text":"","code":"thresholdCounts(test.counts, threshold = 20, plot = FALSE) #> Error in thresholdCounts(test.counts, threshold = 20, plot = FALSE): object 'test.counts' not found"},{"path":"https://danevass.github.io/bartools/news/index.html","id":"bartools-021","dir":"Changelog","previous_headings":"","what":"bartools 0.2.1","title":"bartools 0.2.1","text":"Minor updates DESCRIPTION imports. README.md fixed, .gitignore updated","code":""},{"path":"https://danevass.github.io/bartools/news/index.html","id":"bartools-020","dir":"Changelog","previous_headings":"","what":"bartools 0.2.0","title":"bartools 0.2.0","text":"Updated plotDetectedBarcodes color reorder factors according user input. Updated quickstart vignette detail complete analysis workflow.","code":""},{"path":"https://danevass.github.io/bartools/news/index.html","id":"bartools-010","dir":"Changelog","previous_headings":"","what":"bartools 0.1.0","title":"bartools 0.1.0","text":"Updated plotBarcodeTimeseries take top n barcodes. Speeds plotting focusing barcodes interest","code":""},{"path":"https://danevass.github.io/bartools/news/index.html","id":"bartools-010-1","dir":"Changelog","previous_headings":"","what":"bartools 0.1.0","title":"bartools 0.1.0","text":"Included current versions plotting functions package. Added NEWS.md file track changes package.","code":""}]
